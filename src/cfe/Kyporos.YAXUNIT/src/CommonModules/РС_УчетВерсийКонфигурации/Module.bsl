#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
   ЮТТесты.ДобавитьТестовыйНабор("Учет конфигураций").ВТранзакции()
   		.ДобавитьТест("ТестПолучитьПоследнююВерсиюИзменений", "ПолучитьПоследнююВерсиюИзменений", "Позитив")
   		.ДобавитьТест("ТестПолучитьПоследнююВерсиюИзменений_Неопределено", "ПолучитьПоследнююВерсиюИзменений: получить до первой версии = Неопределено", "Негатив")
   		.ДобавитьТест("ТестСтатистикаОбъектовМетаданных", "СтатистикаОбъектовМетаданных: с нулевыми результатами", "Позитив")
   		.ДобавитьТест("ТестСтатистикаОбъектовМетаданныхИзменения", "СтатистикаОбъектовМетаданных: с наличием изменений", "Позитив")
   		.ДобавитьТест("ТестСтатистикаОбъектовМетаданныхВсеВыполнено", "СтатистикаОбъектовМетаданных: все выполнено + изменений не требуется", "Позитив")
   		.ДобавитьТест("ТестУстановитьИзмененияПоОбъектамМетаданных_ПроведенАнализИзменений", "УстановитьИзмененияПоОбъектамМетаданных: признак Проведен анализ изменений", "Позитив")
   		.ДобавитьТест("ТестУстановитьИзмененияПоОбъектамМетаданных_ИзмененийНеТребуется", "УстановитьИзмененияПоОбъектамМетаданных: признак Не требует изменений", "Позитив")
   		.ДобавитьТест("ТестУстановитьИзмененияПоОбъектамМетаданных_ВыполненоИзменение", "УстановитьИзмененияПоОбъектамМетаданных: признак Выполнено изменение", "Позитив")
	;

КонецПроцедуры

Процедура ТестПолучитьПоследнююВерсиюИзменений() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ДанныеДляПроверки = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Контрагенты");
 	ДанныеДляПроверки2 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Номенклатура");
	ДанныеДляПроверки3 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Валюта");

	// 2. Выполнение функции.
	ДанныеПоследнейВерсии = РегистрыСведений.УчетВерсийКонфигурации.ПолучитьПоследнююВерсиюИзменений(ДанныеДляПроверки.ОбъектМетаданных,
			ДанныеДляПроверки.ВерсияКонфигурацииНовая, ДанныеДляПроверки.ТипМодуля);
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(ДанныеПоследнейВерсии)
		.ИмеетТип("Структура")
		.Заполнено()
		.Свойство("ВерсияКонфигурации").Равно(ДанныеДляПроверки.ВерсияКонфигурацииПрошлая)
		.Свойство("ОбъектМетаданных").Равно(ДанныеДляПроверки.ОбъектМетаданных)
		;
		
КонецПроцедуры 

Процедура ТестПолучитьПоследнююВерсиюИзменений_Неопределено() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ДанныеДляПроверки = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Контрагенты");
 	ДанныеДляПроверки2 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Номенклатура");
	ДанныеДляПроверки3 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Валюта");

	// 2. Выполнение функции.
	ДанныеПоследнейВерсии = РегистрыСведений.УчетВерсийКонфигурации.ПолучитьПоследнююВерсиюИзменений(ДанныеДляПроверки.ОбъектМетаданных,
			ДанныеДляПроверки.ВерсияКонфигурацииПрошлая, ДанныеДляПроверки.ТипМодуля);
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(ДанныеПоследнейВерсии)
		.ИмеетТип("Неопределено")
		;
		
КонецПроцедуры 

Процедура ТестСтатистикаОбъектовМетаданных() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ДанныеДляПроверки = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Контрагенты");
 	ДанныеДляПроверки2 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Номенклатура");
	ДанныеДляПроверки3 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Валюта");
	ДанныеДляПроверки4 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Партнеры");
	
	// 2. Выполнение функции.
	РезультатФункции = РегистрыСведений.УчетВерсийКонфигурации.СтатистикаОбъектовМетаданных(ДанныеДляПроверки.Конфигурация,
			ДанныеДляПроверки.ВерсияКонфигурацииНовая);
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(РезультатФункции)
		.ИмеетТип("Структура")
        .Свойство("ОбщееЧислоОМ").ИмеетТип("Строка").Равно("4")
        .Свойство("НеПроведенАнализ").ИмеетТип("Строка").Равно("4")
        .Свойство("НеВыполненоОбъектов").ИмеетТип("Строка").Равно("4")
        .Свойство("ЕстьОписаниеВерсии").ИмеетТип("Булево").ЭтоЛожь()
        .Свойство("ПроцентВыполнения").ИмеетТип("Строка").Равно("0 %")
		;
		
КонецПроцедуры  

Процедура ТестСтатистикаОбъектовМетаданныхИзменения() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ДатаИзменения = ЮТест.Данные().СлучайнаяДатаВПрошлом(1, "день");
	
	// Объект 1: Проведен только анализ
	ПараметрыРесурсов = Новый Структура("ПроведенАнализИзменений, ДатаАнализаИзменений", Истина, ДатаИзменения);
	ДанныеДляПроверки = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Контрагенты", ПараметрыРесурсов);
	// Объект 2: Изменений не требуется
	ПараметрыРесурсов = Новый Структура("ИзмененийНеТребуется", Истина);
 	ДанныеДляПроверки2 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Номенклатура", ПараметрыРесурсов);
	// Объект 3: Еще ничего не проводилось
	ДанныеДляПроверки3 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Валюта");
	// Объект 4: Проведен анализ и выполнено изменение
	ПараметрыРесурсов = Новый Структура("ВыполненоИзменение, ДатаВыполненияИзменений, ПроведенАнализИзменений, ДатаАнализаИзменений", Истина, ДатаИзменения, Истина, ДатаИзменения);
	ДанныеДляПроверки4 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Партнеры", ПараметрыРесурсов);
	
	// 2. Выполнение функции.
	РезультатФункции = РегистрыСведений.УчетВерсийКонфигурации.СтатистикаОбъектовМетаданных(ДанныеДляПроверки.Конфигурация,
			ДанныеДляПроверки.ВерсияКонфигурацииНовая);
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(РезультатФункции)
		.ИмеетТип("Структура")
        .Свойство("ОбщееЧислоОМ").ИмеетТип("Строка").Равно("4")
        .Свойство("НеПроведенАнализ").ИмеетТип("Строка").Равно("1")
        .Свойство("НеВыполненоОбъектов").ИмеетТип("Строка").Равно("2")
        .Свойство("ЕстьОписаниеВерсии").ИмеетТип("Булево").ЭтоЛожь()
        .Свойство("ПроцентВыполнения").ИмеетТип("Строка").Равно("63 %")
		;
		
КонецПроцедуры 

Процедура ТестСтатистикаОбъектовМетаданныхВсеВыполнено() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ДатаИзменения = ЮТест.Данные().СлучайнаяДатаВПрошлом(1, "день");
	ПараметрыРесурсовВыполнено = Новый Структура("ВыполненоИзменение, ДатаВыполненияИзменений, ПроведенАнализИзменений, ДатаАнализаИзменений", Истина, ДатаИзменения, Истина, ДатаИзменения);
	ПараметрыРесурсовИзмененийНеТребуется = Новый Структура("ИзмененийНеТребуется", Истина);
	
	ДанныеДляПроверки = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Контрагенты", ПараметрыРесурсовВыполнено);
 	ДанныеДляПроверки2 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Номенклатура", ПараметрыРесурсовВыполнено);
	ДанныеДляПроверки3 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Валюта", ПараметрыРесурсовВыполнено);
	ДанныеДляПроверки4 = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Партнеры", ПараметрыРесурсовИзмененийНеТребуется);
	
	// 2. Выполнение функции.
	РезультатФункции = РегистрыСведений.УчетВерсийКонфигурации.СтатистикаОбъектовМетаданных(ДанныеДляПроверки.Конфигурация,
			ДанныеДляПроверки.ВерсияКонфигурацииНовая);
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(РезультатФункции)
		.ИмеетТип("Структура")
        .Свойство("ОбщееЧислоОМ").ИмеетТип("Строка").Равно("4")
        .Свойство("НеПроведенАнализ").ИмеетТип("Строка").Равно("0")
        .Свойство("НеВыполненоОбъектов").ИмеетТип("Строка").Равно("0")
        .Свойство("ЕстьОписаниеВерсии").ИмеетТип("Булево").ЭтоЛожь()
        .Свойство("ПроцентВыполнения").ИмеетТип("Строка").Равно("100 %")
		;
		
КонецПроцедуры 

Процедура ТестУстановитьИзмененияПоОбъектамМетаданных_ПроведенАнализИзменений() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ДанныеДляПроверки = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Контрагенты");
	
	// 2. Выполнение функции.
	ПараметрыЗаполнения = РегистрыСведений.УчетВерсийКонфигурации.ПараметрыЗаполненияУстановкиИзмененийРесурсов("ПроведенАнализИзменений");
	
	РегистрыСведений.УчетВерсийКонфигурации.УстановитьИзмененияПоОбъектамМетаданных(ДанныеДляПроверки.Конфигурация,
			ДанныеДляПроверки.ВерсияКонфигурацииНовая, ДанныеДляПроверки.ОбъектМетаданных, ПараметрыЗаполнения);
	
	// 3. Проверка результата.
	УсловиеПоиска = ЮТест.Предикат() 
        	.Реквизит("Конфигурация").Равно(ДанныеДляПроверки.Конфигурация)
        	.Реквизит("ВерсияКонфигурации").Равно(ДанныеДляПроверки.ВерсияКонфигурацииНовая)
         	.Реквизит("ОбъектМетаданных").Равно(ДанныеДляПроверки.ОбъектМетаданных)
          	.Реквизит("ТипМодуля").Равно(ДанныеДляПроверки.ТипМодуля)
			.Получить() // Необходимо для сохранения сформированного предиката в переменную.
			;
	Запись = ЮТЗапросы.Запись("РегистрСведений.УчетВерсийКонфигурации", УсловиеПоиска);
	ЮТест.ОжидаетЧто(Запись)
    	.Заполнено()
		.Свойство("ПроведенАнализИзменений").ЭтоИстина()
		.Свойство("ДатаАнализаИзменений").Заполнено()
    	;
			
КонецПроцедуры 

Процедура ТестУстановитьИзмененияПоОбъектамМетаданных_ИзмененийНеТребуется() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ДанныеДляПроверки = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Контрагенты");
	
	// 2. Выполнение функции.
	ПараметрыЗаполнения = РегистрыСведений.УчетВерсийКонфигурации.ПараметрыЗаполненияУстановкиИзмененийРесурсов("ИзмененийНеТребуется");
	
	РегистрыСведений.УчетВерсийКонфигурации.УстановитьИзмененияПоОбъектамМетаданных(ДанныеДляПроверки.Конфигурация,
			ДанныеДляПроверки.ВерсияКонфигурацииНовая, ДанныеДляПроверки.ОбъектМетаданных, ПараметрыЗаполнения);
	
	// 3. Проверка результата.
	УсловиеПоиска = ЮТест.Предикат() 
        	.Реквизит("Конфигурация").Равно(ДанныеДляПроверки.Конфигурация)
        	.Реквизит("ВерсияКонфигурации").Равно(ДанныеДляПроверки.ВерсияКонфигурацииНовая)
         	.Реквизит("ОбъектМетаданных").Равно(ДанныеДляПроверки.ОбъектМетаданных)
          	.Реквизит("ТипМодуля").Равно(ДанныеДляПроверки.ТипМодуля)
			.Получить() // Необходимо для сохранения сформированного предиката в переменную.
			;
	Запись = ЮТЗапросы.Запись("РегистрСведений.УчетВерсийКонфигурации", УсловиеПоиска);
	ЮТест.ОжидаетЧто(Запись)
    	.Заполнено()
		.Свойство("ИзмененийНеТребуется").ЭтоИстина()
		.Свойство("ДатаАнализаИзменений").Заполнено()
		.Свойство("ПроведенАнализИзменений").ЭтоЛожь()
		.Свойство("ВыполненоИзменение").ЭтоЛожь()
		.Свойство("ДатаВыполненияИзменений").НеЗаполнено()
    	;
			
КонецПроцедуры 

Процедура ТестУстановитьИзмененияПоОбъектамМетаданных_ВыполненоИзменение() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ДанныеДляПроверки = ПодготовитьДанныеПоОпределенномуОбъектуМетаданных("Контрагенты");
	
	// 2. Выполнение функции.
	ПараметрыЗаполнения = РегистрыСведений.УчетВерсийКонфигурации.ПараметрыЗаполненияУстановкиИзмененийРесурсов("ВыполненоИзменение");
	
	РегистрыСведений.УчетВерсийКонфигурации.УстановитьИзмененияПоОбъектамМетаданных(ДанныеДляПроверки.Конфигурация,
			ДанныеДляПроверки.ВерсияКонфигурацииНовая, ДанныеДляПроверки.ОбъектМетаданных, ПараметрыЗаполнения);
	
	// 3. Проверка результата.
	УсловиеПоиска = ЮТест.Предикат() 
        	.Реквизит("Конфигурация").Равно(ДанныеДляПроверки.Конфигурация)
        	.Реквизит("ВерсияКонфигурации").Равно(ДанныеДляПроверки.ВерсияКонфигурацииНовая)
         	.Реквизит("ОбъектМетаданных").Равно(ДанныеДляПроверки.ОбъектМетаданных)
          	.Реквизит("ТипМодуля").Равно(ДанныеДляПроверки.ТипМодуля)
			.Получить() // Необходимо для сохранения сформированного предиката в переменную.
			;
	Запись = ЮТЗапросы.Запись("РегистрСведений.УчетВерсийКонфигурации", УсловиеПоиска);
	ЮТест.ОжидаетЧто(Запись)
    	.Заполнено()
		.Свойство("ВыполненоИзменение").ЭтоИстина()
		.Свойство("ДатаВыполненияИзменений").Заполнено()
		.Свойство("ПроведенАнализИзменений").ЭтоИстина()
		.Свойство("ИзмененийНеТребуется").ЭтоЛожь()
    	;
			
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьДанныеПоОпределенномуОбъектуМетаданных(НаименованиеОбъектаМетаданных, ДанныеЗаполненияРесурсов = Неопределено)

	Конфигурация = ЮТест.Контекст().Значение("Конфигурация");
	ВерсияКонфигурацииПрошлая = ЮТест.Контекст().Значение("ВерсияКонфигурацииПрошлая");
	ВерсияКонфигурацииНовая = ЮТест.Контекст().Значение("ВерсияКонфигурацииНовая");
	Если Не ЗначениеЗаполнено(Конфигурация) Тогда
		
		Конфигурация = ЮТест.Данные().КонструкторОбъекта("Справочник.Конфигурации")
			.ФикцияОбязательныхПолей() 
			.Установить("Наименование", "Тестовая_Конфигурация")
			.Записать();
			
		ЮТест.Контекст().УстановитьЗначение("Конфигурация", Конфигурация);	
		
		ВерсияКонфигурацииПрошлая = ЮТест.Данные().КонструкторОбъекта("Справочник.ВерсииКонфигураций")
			.ФикцияОбязательныхПолей() 
			.Установить("Владелец", Конфигурация)
			.Установить("Наименование", "1.0.1.1")
			.Установить("ДатаОбновления", ЮТест.Данные().СлучайнаяДатаВПрошлом(10, "дней"))
			.Записать(); 
			
		ЮТест.Контекст().УстановитьЗначение("ВерсияКонфигурацииПрошлая", ВерсияКонфигурацииПрошлая);	
		
		// новая версия
		ВерсияКонфигурацииНовая = ЮТест.Данные().КонструкторОбъекта("Справочник.ВерсииКонфигураций")
			.ФикцияОбязательныхПолей() 
			.Установить("Владелец", Конфигурация)
			.Установить("Наименование", "1.0.2.1")
			.Установить("ДатаОбновления", ЮТест.Данные().СлучайнаяДатаВБудущем(5, "дней"))
			.Записать();
			
		ЮТест.Контекст().УстановитьЗначение("ВерсияКонфигурацииНовая", ВерсияКонфигурацииНовая);
		
	КонецЕсли;

	ОбъектМетаданных = ЮТест.Данные().КонструкторОбъекта("Справочник.ОбъектыМетаданныхКонфигураций")
	    .ФикцияОбязательныхПолей() 
		.Установить("Владелец", Конфигурация)
	    .Установить("Наименование", НаименованиеОбъектаМетаданных)
	    .Установить("Актуальность", Истина)
	    .Установить("ТипОбъектаМетаданных", Справочники.ТипОбъектаМетаданных.Справочник)
		
		.Установить("ДатаДобавления", ЮТест.Данные().СлучайнаяДатаВПрошлом(10, "дней"))
	    .Записать(); 
		
	ТипМодуля = Справочники.ТипыМодулей.МодульОбъекта;
		
	ЮТест.Данные().КонструкторОбъекта("РегистрСведений.УчетВерсийКонфигурации")
	    .ФикцияОбязательныхПолей()
	    .Установить("Конфигурация", Конфигурация)
	    .Установить("ВерсияКонфигурации", ВерсияКонфигурацииПрошлая)
	    .Установить("ОбъектМетаданных", ОбъектМетаданных)
	    .Установить("ТипМодуля", ТипМодуля)
	    .ДобавитьЗапись(); // Записываем запись в регистр
		
	// Основная запись в регистре по новой версии.	
	КонструкторЗаписи = ЮТест.Данные().КонструкторОбъекта("РегистрСведений.УчетВерсийКонфигурации")
	    .ФикцияОбязательныхПолей()
	    .Установить("Конфигурация", Конфигурация)
	    .Установить("ВерсияКонфигурации", ВерсияКонфигурацииНовая)
	    .Установить("ОбъектМетаданных", ОбъектМетаданных)
	    .Установить("ТипМодуля", ТипМодуля)
		;
		
	Если ЗначениеЗаполнено(ДанныеЗаполненияРесурсов) Тогда
	 	КонструкторЗаписи
			.УстановитьРеквизиты(ДанныеЗаполненияРесурсов)
			;
	КонецЕсли;
	ДанныеЗаписи = КонструкторЗаписи.ДобавитьЗапись();  // Записываем запись в регистр
	
	Данные = Новый Структура;
	Данные.Вставить("Конфигурация", Конфигурация);
	Данные.Вставить("ОбъектМетаданных", ОбъектМетаданных);
	Данные.Вставить("ТипМодуля", ТипМодуля);
	Данные.Вставить("ВерсияКонфигурацииПрошлая", ВерсияКонфигурацииПрошлая);
	Данные.Вставить("ВерсияКонфигурацииНовая", ВерсияКонфигурацииНовая);
	
	Возврат Данные;	
	
КонецФункции 

#КонецОбласти