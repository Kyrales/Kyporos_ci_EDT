////////////////////////////////////////////////////////////////////////////////
// Тестирование веб-сервиса AccessControl. Пакет XDTO: AccessControlData
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
   ЮТТесты.ДобавитьТестовыйНабор("Управление доступом: веб-сервис AccessControl").ВТранзакции()
   	.ДобавитьТест("ТестТаблицаАктивныхПользователейПоГруппеAD", "Метод SOAP AccessControl.GetActiveUsers: УправлениеДаннымиВнешнихСистем.ТаблицаАктивныхПользователейПоГруппеAD()", "Позитив")
   	.ДобавитьТест("ТестИмпортШаблоновДоступаВнешнихСистем", "Метод SOAP AccessControl.PutAccessPatterns: УправлениеДаннымиВнешнихСистем.ИмпортШаблоновДоступаВнешнихСистем()", "Позитив")
    .ДобавитьТест("ТестИмпортШаблоновДоступаВнешнихСистем_УстановкаНедействительных", "Метод SOAP AccessControl.PutAccessPatterns: Проверка на установку недействительных шаблонов", "Позитив")
    .ДобавитьТест("ТестИмпортШаблоновДоступаВнешнихСистем_ПризнакОбновитьПрава", "Метод SOAP AccessControl.PutAccessPatterns: Обновить справочник Имена пользователей по измененным шаблонам, для возможности передачи обновлений прав в приемник", "Позитив")
  	.ДобавитьТест("ТестТаблицаПравПользователейДляОбновления", "Метод SOAP AccessControl.GetAccessRights: ТаблицаПравПользователяДляОбновления() + СнятиеПризнакаОбновленияПрав()", "Позитив")
	;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Тест метода GetActiveUsers

// Проверка результата функции ТаблицаАктивныхПользователейПоГруппеAD()
Процедура ТестТаблицаАктивныхПользователейПоГруппеAD() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ИД_Системы = "Test_System";
	
	ИнформационнаяСистема = СозданиеИнформационнойБазы(ИД_Системы);	
	
	ДанныеПоПользователю = ОМ_РаботаСоСтруктуройКаталоговAD.СоздатьНовогоПользователя();
	ИмяПользователя = ДанныеПоПользователю.ИмяПользователя;
	
	ГруппаДоступаAD = ЮТест.Данные().КонструкторОбъекта("Справочники.ГруппыПользователейAD")
	    .ФикцияОбязательныхПолей()
		.Установить("Наименование", "Test_GroupAD")
		.Установить("Используется", Истина)
		.Установить("ИнформационнаяБаза", ИнформационнаяСистема)
		.ТабличнаяЧасть("ПользователиГруппы").ДобавитьСтроку()
			.Установить("ИмяПользователя", ИмяПользователя)
		.Записать()
		;
	
	// 2. Выполнение функции.
	ТаблицаПользователей = УправлениеДаннымиВнешнихСистем.ТаблицаАктивныхПользователейПоГруппеAD(ИД_Системы);
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(ТаблицаПользователей)
		.ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(1)
		.Свойство("[0].AccountLogin").Равно(ИмяПользователя.УчетнаяЗаписьWindows)
		.Свойство("[0].Name").Равно(ИмяПользователя.Наименование)
		.Свойство("[0].ID_User").Заполнено()
		.Свойство("[0].UserOS").Равно(ИмяПользователя.ПользовательОС)
		;
		
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////////
// Тест метода PutAccessPatterns

// Проверка результата функции ЗагрузкаШаблоновДоступа()
Процедура ТестИмпортШаблоновДоступаВнешнихСистем() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ИД_Системы =  ЮТест.Данные().СлучайнаяСтрока(30, "Test_System_");
	ИнформационнаяСистема = СозданиеИнформационнойБазы(ИД_Системы);	
	
	ТаблицаШаблоновДляЗагрузки = СоздатьТаблицуШаблоновДляЗагрузкиПоОбластиМакета(ИД_Системы, "КорректныеДанные");
	
	// 2. Выполнение функции.
	РезультатИмпорта = УправлениеДаннымиВнешнихСистем.ЗагрузкаШаблоновДоступа(ИнформационнаяСистема, ТаблицаШаблоновДляЗагрузки);	
	
	// 3. Проверка результата.
	
	ЮТест.ОжидаетЧто(РезультатИмпорта)
		.ИмеетТип("Структура")
		.Свойство("ЗагруженоУспешно").ЭтоИстина()
		;
		
	// Проверка наличия созданных записей шаблонов доступа.
	Записи = ЮТЗапросы.Записи("Справочник.ШаблоныДоступаПользователей",
    	ЮТест.Предикат()
        	.Реквизит("ИД_ИнформационнойБазы").Равно(ИД_Системы));
			
	ЮТест.ОжидаетЧто(Записи)
		.ИмеетТип("Массив")
		.ИмеетДлину(2)
		.КаждыйЭлементСодержитСвойствоСоЗначением("ИД_ИнформационнойБазы", ИД_Системы)
		.КаждыйЭлементСодержитСвойствоСоЗначением("ИнформационнаяБаза", ИнформационнаяСистема)
		.КаждыйЭлементСодержитСвойствоСоЗначением("ОписаниеДоступа", "Описание ролей доступа")
		.КаждыйЭлементСодержитСвойствоСоЗначением("Комментарий", "123")
		.Свойство("[0].Недействителен").ЭтоЛожь()
		.Свойство("[1].Недействителен").ЭтоИстина()
		;	
		
	Если Записи.Количество() > 0 Тогда
		// Проверка что УИД созданных элементов Шаблонов доступа совпадают с исходными в макете.
		
		ИсходныйУИД = Строка(Записи[0].Ссылка.УникальныйИдентификатор());
		
		ЮТест.ОжидаетЧто(ИсходныйУИД)
			.Равно(ТаблицаШаблоновДляЗагрузки[0].ИД_ШаблонаДоступа)
			;
	                                          
		ИсходныйУИД = Строка(Записи[1].Ссылка.УникальныйИдентификатор());
		
		ЮТест.ОжидаетЧто(ИсходныйУИД)
			.Равно(ТаблицаШаблоновДляЗагрузки[1].ИД_ШаблонаДоступа)
			;
		
	КонецЕсли;
		
КонецПроцедуры 

Процедура ТестИмпортШаблоновДоступаВнешнихСистем_УстановкаНедействительных() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ИД_Системы =  ЮТест.Данные().СлучайнаяСтрока(30, "Test_System_");
	ИнформационнаяСистема = СозданиеИнформационнойБазы(ИД_Системы);	
	
	// Генерируем актуальный шаблон доступа.
	ШаблонДоступа = СоздатьШаблонДоступа(ИнформационнаяСистема);
	ЮТест.ОжидаетЧто(ШаблонДоступа)
		.Свойство("Недействителен").ЭтоЛожь() // проверяем до загрузки актуальных шаблонов
		;
	
	ТаблицаШаблоновДляЗагрузки = СоздатьТаблицуШаблоновДляЗагрузкиПоОбластиМакета(ИД_Системы, "КорректныеДанные");
	
	// 2. Выполнение функции.
	// После выполнения функции, ШаблонДоступа станет не актуальным, т.к. его нет в ТаблицаШаблоновДляЗагрузки;
	РезультатИмпорта = УправлениеДаннымиВнешнихСистем.ЗагрузкаШаблоновДоступа(ИнформационнаяСистема, ТаблицаШаблоновДляЗагрузки);	
	
	// 3. Проверка результата.
	
	ЮТест.ОжидаетЧто(РезультатИмпорта)
		.ИмеетТип("Структура")
		.Свойство("ЗагруженоУспешно").ЭтоИстина()
		;
		
	ЮТест.ОжидаетЧто(ШаблонДоступа)
		.Свойство("Недействителен").ЭтоИстина() // проверяем после загрузки актуальных шаблонов
		;

КонецПроцедуры 

// Обновить справочник Имена пользователей по измененным шаблонам 
Процедура ТестИмпортШаблоновДоступаВнешнихСистем_ПризнакОбновитьПрава() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	// Система
	ИД_Системы =  ЮТест.Данные().СлучайнаяСтрока(30, "Test_System_");
	ИнформационнаяСистема = СозданиеИнформационнойБазы(ИД_Системы);	
	
	ТаблицаШаблоновДляЗагрузки = СоздатьТаблицуШаблоновДляЗагрузкиПоОбластиМакета(ИД_Системы, "КорректныеДанные");
	
	// Загрузка шаблонов доступа.
	РезультатИмпорта = УправлениеДаннымиВнешнихСистем.ЗагрузкаШаблоновДоступа(ИнформационнаяСистема, ТаблицаШаблоновДляЗагрузки);	
	// Получение шаблона доступа
	Записи = ЮТЗапросы.Записи("Справочник.ШаблоныДоступаПользователей",
    	ЮТест.Предикат()
        	.Реквизит("ИнформационнаяБаза").Равно(ИнформационнаяСистема)
	        .Реквизит("Наименование").Равно("Тестовый доступ")
			);
	
	ШаблонДоступа = Записи[0].Ссылка;		
	
	// Добавляем нового пользователя 
	ПраваПользователя = Новый Структура;
	ПраваПользователя.Вставить("ШаблонДоступа", ШаблонДоступа);
	КомментарийДоступа = "Тестовый комментарий доступа";
	ПраваПользователя.Вставить("Комментарий", КомментарийДоступа);
	
	ДанныеПоПользователю = ОМ_РаботаСоСтруктуройКаталоговAD.СоздатьНовогоПользователя(ПраваПользователя, Истина); // ОбменДанными = Истина, чтобы автоматически не заполнилось тч ИнформационныеБазыДляОбновленияПрав 
	ИмяПользователя = ДанныеПоПользователю.ИмяПользователя;
	
	ЮТест.ОжидаетЧто(ИмяПользователя)
	   	.ИмеетТип("СправочникСсылка.ИменаПользователей")
		.Свойство("ИнформационныеБазыДляОбновленияПрав").ИмеетДлину(0)
	   	;
	
	// Корректируем описание доступа для того чтобы зафиксировались изменения
	ТаблицаШаблоновДляЗагрузки[0].ОписаниеДоступа = "Новые роли шаблона доступа, вместо старых";	
	
	// Вызываем второй раз для фиксакции изменений для обновления прав.	
	РезультатИмпорта = УправлениеДаннымиВнешнихСистем.ЗагрузкаШаблоновДоступа(ИнформационнаяСистема, ТаблицаШаблоновДляЗагрузки);	
	
 	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(РезультатИмпорта)
		.ИмеетТип("Структура")
		.Свойство("ЗагруженоУспешно").ЭтоИстина()
		;
		
	// Проверка наличия признака необходимости обновления прав пользователя.
	ЮТест.ОжидаетЧто(ИмяПользователя)
		.Свойство("ИнформационныеБазыДляОбновленияПрав")
			.ИмеетДлину(1) 
		.Свойство("ИнформационныеБазыДляОбновленияПрав[0].ИнформационнаяБаза").Равно(ИнформационнаяСистема)
		.Свойство("ИнформационныеБазыДляОбновленияПрав[0].ОбновитьПрава").ЭтоИстина()  // должен быть установлен признак необходимости обновления прав
	   	;

КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////////
// Тест метода GetAccessRights

// Результат функция ТаблицаПравПользователяДляОбновления() + СнятиеПризнакаОбновленияПрав()
Процедура ТестТаблицаПравПользователейДляОбновления() Экспорт
	
	// Подготовка параметров и генерация данных для выполнения функции.
	// Система
	ИД_Системы =  ЮТест.Данные().СлучайнаяСтрока(30, "Test_System_");
	ИнформационнаяСистема = СозданиеИнформационнойБазы(ИД_Системы);
	
	// Шаблон доступа
	ШаблонДоступа = СоздатьШаблонДоступа(ИнформационнаяСистема);
		
	// Имя пользователя, Пользователь
	ПраваПользователя = Новый Структура;
	ПраваПользователя.Вставить("ШаблонДоступа", ШаблонДоступа);
	КомментарийДоступа = "Тестовый комментарий доступа";
	ПраваПользователя.Вставить("Комментарий", КомментарийДоступа);
	
	ДанныеПоПользователю = ОМ_РаботаСоСтруктуройКаталоговAD.СоздатьНовогоПользователя(ПраваПользователя);
	ИмяПользователя = ДанныеПоПользователю.ИмяПользователя;
		
	
	// Проверка на отработку метода добавления информационной базы.
	ЮТест.ОжидаетЧто(ИмяПользователя)
	   	.ИмеетТип("СправочникСсылка.ИменаПользователей")
		.Заполнено()
		.Свойство("ИнформационныеБазыДляОбновленияПрав")
			.ИмеетДлину(1) 
		.Свойство("ИнформационныеБазыДляОбновленияПрав[0].ИнформационнаяБаза").Равно(ИнформационнаяСистема)
		.Свойство("ИнформационныеБазыДляОбновленияПрав[0].ОбновитьПрава").ЭтоИстина()  // должен быть установлен признак необходимости обновления прав
	   	;
		
   	// Выполнение основной функции.
	ТаблицаПользователей = УправлениеДаннымиВнешнихСистем.ТаблицаПравПользователяДляОбновления(ИД_Системы);   	

	// Проверка результата.
	ЮТест.ОжидаетЧто(ТаблицаПользователей)
	   	.ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(1)
		.Свойство("[0].ШаблонДоступа").Равно(ШаблонДоступа)
		.Свойство("[0].Ссылка").Равно(ИмяПользователя)
		.Свойство("[0].Comment").Равно(КомментарийДоступа)
		.Свойство("[0].ID_User").Заполнено()
		.Свойство("[0].ID_Pattern").Заполнено()
	   	;
		
	Если ТаблицаПользователей.Количество() > 0 Тогда
		// Снятие признака обновления прав доступа.
		
		УправлениеДаннымиВнешнихСистем.СнятиеПризнакаОбновленияПрав(ИД_Системы, ТаблицаПользователей);
		
		// Проверка результата.
		ЮТест.ОжидаетЧто(ИмяПользователя)
	   		.ИмеетТип("СправочникСсылка.ИменаПользователей")
			.Заполнено()
			.Свойство("ИнформационныеБазыДляОбновленияПрав")
				.ИмеетДлину(1) 
			.Свойство("ИнформационныеБазыДляОбновленияПрав[0].ИнформационнаяБаза").Равно(ИнформационнаяСистема)
			.Свойство("ИнформационныеБазыДляОбновленияПрав[0].ОбновитьПрава").ЭтоЛожь()  // снят признак необходимости обновления
	   	;
		
	КонецЕсли;
		
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СозданиеИнформационнойБазы(ИД_Системы)
	
	ИнформационнаяСистема = ЮТест.Данные().КонструкторОбъекта("Справочники.СписокИнформационныхБаз1С")
	    .ФикцияОбязательныхПолей()
		.Установить("Наименование", ИД_Системы)
		.Установить("Используется", Истина)
		.Установить("ИД_ИнформационнойБазы", ИД_Системы)
		.Записать();

	
	Возврат ИнформационнаяСистема;

КонецФункции

Функция СоздатьТаблицуШаблоновДляЗагрузкиПоОбластиМакета(ИД_Системы, ТипДанных = "КорректныеДанные")
	
	ТаблицаПараметров = УправлениеДаннымиВнешнихСистем.ПустаяТаблицаПараметровШаблоновДоступа();
	
	// Сформировать соответствие с описанием типов на основе колонок таблицы значений параметров Шаблонов доступа.
	ОписаниеТипов = ОМ_ОбщегоНазначения.СоответствиеСОписаниемТиповНаОсновеТаблицыЗначений(ТаблицаПараметров);
	
	ЗаменяемыеЗначения = Новый Соответствие;
	ЗаменяемыеЗначения.Вставить("ИД_ИнформационнойБазы1", ИД_Системы);
	ЗаменяемыеЗначения.Вставить("УИД1", Строка(Новый УникальныйИдентификатор()));
	ЗаменяемыеЗначения.Вставить("УИД2", Строка(Новый УникальныйИдентификатор()));
	
	КэшЗначений = Новый Соответствие;	
	
	// Загрузить таблицу из макета данных.
	ТаблицаИсходныхДанных = ЮТест.Данные().ЗагрузитьИзМакета(
		"ОбщийМакет.ЮТ_ТестовыеДанныеШаблоновДоступа." + ТипДанных, 
		ОписаниеТипов,
		КэшЗначений,
		ЗаменяемыеЗначения
	);		
	
	Возврат ТаблицаИсходныхДанных;

КонецФункции

Функция СоздатьШаблонДоступа(ИнформационнаяСистема)
	
	ИД_ИнформационнойБазы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИнформационнаяСистема ,"ИД_ИнформационнойБазы");
	
	ТаблицаШаблоновДляЗагрузки = СоздатьТаблицуШаблоновДляЗагрузкиПоОбластиМакета(ИД_ИнформационнойБазы, "КорректныеДанные");
	ДанныеДляНовогоШаблона = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаШаблоновДляЗагрузки[0]);
	ИД_ШаблонаДоступа = ДанныеДляНовогоШаблона.ИД_ШаблонаДоступа;
	ДанныеДляНовогоШаблона.Удалить("ИД_ШаблонаДоступа");
	
	ШаблонДоступа = ЮТест.Данные().КонструкторОбъекта("Справочник.ШаблоныДоступаПользователей")
		.ФикцияОбязательныхПолей()
		.УстановитьСсылкуНового(ИД_ШаблонаДоступа)
		.УстановитьРеквизиты(ДанныеДляНовогоШаблона)
		.Установить("ИнформационнаяБаза", ИнформационнаяСистема)
		.Записать()
		;
	
	Возврат ШаблонДоступа;

КонецФункции

#КонецОбласти