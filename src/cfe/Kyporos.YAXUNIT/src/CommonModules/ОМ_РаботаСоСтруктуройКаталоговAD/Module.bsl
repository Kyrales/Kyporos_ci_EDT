#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЛитералНайтиПользователя = "РаботаСоСтруктуройКаталоговAD.НайтиПользователя()";
	
	ЮТТесты.Перед("ПодготовитьДанные")
		.ДобавитьТестовыйНабор("Работа с AD: Базовые поисковые функции").ВТранзакции()
			.ДобавитьТест("ТестСоздатьНовогоПользователяИБ", "РаботаСоСтруктуройКаталоговAD.СоздатьНовогоПользователяИБ()", "Позитив")
			.ДобавитьТест("ТестНайтиПользователя", ЛитералНайтиПользователя, "Позитив")
				.СПараметрами("ПоискПоEmail").Представление(ЛитералНайтиПользователя + ": Поиск по email")
				.СПараметрами("ПоискПоНаименование").Представление(ЛитералНайтиПользователя + ": Поиск по наименованию")
				.СПараметрами("ПоискПоНаименованиеИПользовательОС").Представление(ЛитералНайтиПользователя + ": Поиск по наименованию + пользователь ОС")
				.СПараметрами("ПоискПоПользователь").Представление(ЛитералНайтиПользователя + ": Поиск по пользователю")
			.ДобавитьТест("ТестНайтиСоздатьИмяПользователя","Справочники.ИменаПользователей.НайтиСоздатьИмяПользователя()","Позитив")
			.ДобавитьТест("ТестНайтиСоздатьИмяПользователяНегатив","Справочники.ИменаПользователей.НайтиСоздатьИмяПользователя(): Некорректные параметры поиска в режиме ТолькоПоиск","Негатив")
		.ДобавитьТестовыйНабор("Работа с AD: Обновление данных на основе ActiveDirectory по процедуре регл.задания ОбновлениеДанныхИзActiveDirectory()").Перед("ПодготовитьДанныеAD").ВТранзакции()
			.ДобавитьТест("ТестОбновлениеДанныхИзActiveDirectory", "Создания пользователя в спр.ИменаПользователей, спр.Пользователи и в пользователях ИБ", "Позитив")
			.ДобавитьТест("ТестОтключитьНедействительныхПользователей","Отключение недействительных пользователей по данным AD","Позитив")
			//.ДобавитьТест("ТестУстановитьШаблонДоступаПоГруппеПользователейAD","Установка доступов пользователям в справочнике Имена пользователей по данным справочника Группы пользователей AD","Позитив")
		;
	
КонецПроцедуры

Процедура ПодготовитьДанные() Экспорт
	
	// Базовая подготовка констант.
    Константы.ИспользоватьУправлениеСетью.Установить("Истина");
    Константы.ЗагружатьПользователейИзAD.Установить("Истина");
    Константы.ДоменПредприятия.Установить("domen");
	
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////////
// Работа с AD: Базовые поисковые функции

Процедура ТестСоздатьНовогоПользователяИБ() Экспорт
	
	Результат = СоздатьНовогоПользователя();
	
	Пользователь = Результат.Пользователь; 
	ИмяПользователя = Результат.ИмяПользователя; // для сопоставления со спр.Пользователи
	
	ЮТест.ОжидаетЧто(Пользователь)
		.ИмеетТип("СправочникСсылка.Пользователи")
		.Заполнено()
		.Свойство("Наименование").Равно(ИмяПользователя.Наименование)
		;
		
	Если ЗначениеЗаполнено(Пользователь) Тогда
		// проверка уже наличия пользователя в ИБ
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				Пользователь.ИдентификаторПользователяИБ);
		
		ЮТест.ОжидаетЧто(ПользовательИБ)
			.ЭтоНеНеопределено()
			.Свойство("ПолноеИмя").Равно(ИмяПользователя.Наименование)
			.Свойство("АутентификацияОС").ЭтоИстина()
			.Свойство("ПользовательОС").Равно(ИмяПользователя.ПользовательОС)
			;
			
	КонецЕсли;

КонецПроцедуры 

Процедура ТестНайтиПользователя(ТипПоиска) Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.		
	Результат = СоздатьНовогоПользователя();
	
	Пользователь = Результат.Пользователь; 
	ИмяПользователя = Результат.ИмяПользователя; // для сопоставления со спр.Пользователи
		
	// 2. Выполнение функции.
	Если ТипПоиска = "ПоискПоEmail" Тогда
		ПараметрыПоиска = Новый Структура("Email", ИмяПользователя.Email);
	ИначеЕсли ТипПоиска = "ПоискПоНаименование" Тогда	
		ПараметрыПоиска = Новый Структура("Наименование", ИмяПользователя.Наименование);
	ИначеЕсли ТипПоиска = "ПоискПоНаименованиеИПользовательОС" Тогда	
		ПараметрыПоиска = Новый Структура("Наименование, ПользовательОС", ИмяПользователя.Наименование, ИмяПользователя.ПользовательОС);
	ИначеЕсли ТипПоиска = "ПоискПоПользователь" Тогда	
		ПараметрыПоиска = Новый Структура("Пользователь", Пользователь);
	Иначе
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = РаботаСоСтруктуройКаталоговAD.НайтиПользователя(ПараметрыПоиска);
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(РезультатПоиска)
		.ИмеетТип("Структура")
		.Свойство("Пользователь")
			.ИмеетТип("СправочникСсылка.Пользователи")
			.Заполнено()
			.Равно(Пользователь)
		.Свойство("Пользователь.Наименование").Равно(ИмяПользователя.Наименование)
		.Свойство("Email").Равно(ИмяПользователя.Email)
		;
		
КонецПроцедуры 

Процедура ТестНайтиСоздатьИмяПользователя() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Наименование", ЮТест.Данные().Подражатель().Люди().ФИО());
	Параметры.Вставить("Email", "Test_User1@email.com");
	Параметры.Вставить("Комментарий", НСтр("ru = '#Тест создания'"));
	
	ИмяПользователя = Справочники.ИменаПользователей.НайтиСоздатьИмяПользователя(Параметры);
	
	ЮТест.ОжидаетЧто(ИмяПользователя)
		.ИмеетТип("СправочникСсылка.ИменаПользователей")
		.Заполнено()
		.Свойство("Email").Равно(Параметры.Email)
		;
		
	КодИмяПользователя = ИмяПользователя.Код;
		
	// Попытка второй раз создать с поиском.	
	ИмяПользователя = Справочники.ИменаПользователей.НайтиСоздатьИмяПользователя(Параметры);
	
	ЮТест.ОжидаетЧто(ИмяПользователя)
		.ИмеетТип("СправочникСсылка.ИменаПользователей")
		.Заполнено()
		.Свойство("Email").Равно(Параметры.Email)
		.Свойство("Код").Равно(КодИмяПользователя) // должен использовать того же самого до этого созданного
		;
		
	// Поиск через режим ТолькоПоиск
	ИмяПользователя = Справочники.ИменаПользователей.НайтиСоздатьИмяПользователя(Параметры, Истина);
	
	ЮТест.ОжидаетЧто(ИмяПользователя)
		.ИмеетТип("СправочникСсылка.ИменаПользователей")
		.Заполнено()
		.Свойство("Email").Равно(Параметры.Email)
		.Свойство("Код").Равно(КодИмяПользователя) // должен использовать того же самого до этого созданного
		;
		
КонецПроцедуры

Процедура ТестНайтиСоздатьИмяПользователяНегатив() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Наименование", ЮТест.Данные().Подражатель().Люди().ФИО());
	
	ИмяПользователя = Справочники.ИменаПользователей.НайтиСоздатьИмяПользователя(Параметры, Истина);
	
	ЮТест.ОжидаетЧто(ИмяПользователя)
		.ИмеетТип("СправочникСсылка.ИменаПользователей")
		.НеЗаполнено()  // не должен быть создан новый
		;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с AD: Обновление данных на основе ActiveDirectory по процедуре регл.задания ОбновлениеДанныхИзActiveDirectory()

Процедура ПодготовитьДанныеAD() Экспорт
	
	Домен = Константы.ДоменПредприятия.Получить();
	ПодразделениеНаименование = "Тестовое подразделение";
	ФИО = ЮТест.Данные().Подражатель().Люди().ФИО();
	Аккаунт = "TestUserAD";
	Email = "TestUserAD@email.ru";
	SID = ЮТест.Данные().СлучайныйИдентификатор(30);
	
	ТаблицаПользователей = СоздатьТаблицуСДаннымиПользователейОтAD(Домен, ПодразделениеНаименование, ФИО, Аккаунт, Email, SID);
	
	ЮТест.Контекст().УстановитьЗначение("ТаблицаПользователей", ТаблицаПользователей);
	ЮТест.Контекст().УстановитьЗначение("ПодразделениеНаименование", ПодразделениеНаименование);
	
КонецПроцедуры 

Процедура ТестОбновлениеДанныхИзActiveDirectory() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	// Подгтовливаем таблицу пользователей
	Домен = Константы.ДоменПредприятия.Получить();
	Подразделение = СоздатьПодразделение(ЮТест.Контекст().Значение("ПодразделениеНаименование"));
	
	ТаблицаПользователей = ЮТест.Контекст().Значение("ТаблицаПользователей");
	ДанныеПоПользователю = ТаблицаПользователей[0];
	
	ФИО = ДанныеПоПользователю.ОтображаемоеИмя;
	Аккаунт = ДанныеПоПользователю.Аккаунт;
	Email = ДанныеПоПользователю.Email;
	SID = ДанныеПоПользователю.SID;
	
	// Мокируем обращения к AD на возврат подготовленной выше таблицы от функции РаботаСоСтруктуройКаталоговAD.ЗаполнитьТаблицуПользователей()
	Мокито.Обучение(РаботаСоСтруктуройКаталоговAD)
		.Когда("ЗаполнитьТаблицуПользователей", Мокито.МассивПараметров(Мокито.ЛюбойПараметр(), Мокито.ЛюбойПараметр()))
		.Вернуть(ТаблицаПользователей)
		.Прогон();
	
	// 2. Выполнение основной функции.
	РаботаСоСтруктуройКаталоговAD.ОбновлениеДанныхИзActiveDirectory(Подразделение);
	
	// 3. Проверка результата.
	
	// Проверка создания пользователя в спр. ИменаПользователей.
	ИмяПользователяСсылка = Справочники.ИменаПользователей.НайтиПоРеквизиту("ИдентификаторAD", SID);
	
	ЮТест.ОжидаетЧто(ИмяПользователяСсылка)
		.Заполнено()
		.Свойство("Наименование").Равно(ФИО)
		.Свойство("УчетнаяЗаписьWindows").Равно(Аккаунт)
		.Свойство("Подразделение").Равно(Подразделение)
		;
	
	// Проверка создания пользователя информационной базы.
	ПараметрыПоиска = Новый Структура("Email", Email);
	РезультатПоиска = РаботаСоСтруктуройКаталоговAD.НайтиПользователя(ПараметрыПоиска);
	
	ЮТест.ОжидаетЧто(РезультатПоиска)
		.ИмеетТип("Структура")
		.Свойство("Пользователь")
			.ИмеетТип("СправочникСсылка.Пользователи")
			.Заполнено()
		.Свойство("Пользователь.Наименование").Равно(ФИО)
		.Свойство("Email").Равно(Email)
		;
	
	Если ЗначениеЗаполнено(РезультатПоиска.Пользователь) Тогда
		// проверка уже наличия пользователя в ИБ
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				РезультатПоиска.Пользователь.ИдентификаторПользователяИБ);
		
		ЮТест.ОжидаетЧто(ПользовательИБ)
			.ЭтоНеНеопределено()
			.Свойство("ПолноеИмя").Равно(ФИО)
			.Свойство("АутентификацияОС").ЭтоИстина()
			.Свойство("ПользовательОС").Равно(ИмяПользователяСсылка.ПользовательОС)
			;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестОтключитьНедействительныхПользователей() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	Подразделение = СоздатьПодразделение(ЮТест.Контекст().Значение("ПодразделениеНаименование"));
	ТаблицаПользователей = ЮТест.Контекст().Значение("ТаблицаПользователей").Скопировать();
	ДанныеПоПользователю = ТаблицаПользователей[0];
	
	ФИО = ДанныеПоПользователю.ОтображаемоеИмя;
	Email = ДанныеПоПользователю.Email;
	
	// Мокируем обращения к AD на возврат подготовленной выше таблицы от функции РаботаСоСтруктуройКаталоговAD.ЗаполнитьТаблицуПользователей()
	Мокито.Обучение(РаботаСоСтруктуройКаталоговAD)
		.Когда("ЗаполнитьТаблицуПользователей", Мокито.МассивПараметров(Мокито.ЛюбойПараметр(), Мокито.ЛюбойПараметр()))
		.Вернуть(ТаблицаПользователей)
		.Прогон();
	
	// Стандартное добавление пользователя
	РаботаСоСтруктуройКаталоговAD.ОбновлениеДанныхИзActiveDirectory(Подразделение);
	
	// 2. Выполнение основной функции.
	// Очистка базовой таблицы пользователей, чтобы кого в ней нет были отключены.
	ТаблицаПользователей.Очистить();
	
	РаботаСоСтруктуройКаталоговAD.ОбновлениеДанныхИзActiveDirectory(Подразделение);
	
	// 3. Проверка результата отключения пользователя.
	ПараметрыПоиска = Новый Структура("Email", Email);
	РезультатПоиска = РаботаСоСтруктуройКаталоговAD.НайтиПользователя(ПараметрыПоиска);

	ЮТест.ОжидаетЧто(РезультатПоиска)
		.ИмеетТип("Структура")
		.Свойство("Пользователь")
			.ИмеетТип("СправочникСсылка.Пользователи")
			.Заполнено()
		.Свойство("Пользователь.Наименование").Равно(ФИО)
		.Свойство("Пользователь.Недействителен").ЭтоИстина() // Ключевая проверка на то что отключен.
		.Свойство("Email").Равно(Email)
		;
	
	ЮТест.ОжидаетЧто(РезультатПоиска.Пользователь)
		.ИмеетТип("СправочникСсылка.Пользователи")
		.Заполнено()
		.Свойство("Наименование").Равно(ФИО)
		.Свойство("Недействителен").ЭтоИстина()
		;
	
	Если ЗначениеЗаполнено(РезультатПоиска.Пользователь) Тогда
		// Проверка отключенного пользователя в ИБ.
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				РезультатПоиска.Пользователь.ИдентификаторПользователяИБ);
		
		ЮТест.ОжидаетЧто(ПользовательИБ)
			.ЭтоНеНеопределено()
			.Свойство("ПолноеИмя").Равно(ФИО)
			.Свойство("АутентификацияОС").ЭтоЛожь()
			;
			
		// Проверка корректности заполнения в ИменаПользователей после отключения.
		ПараметрыЗаполненияИмениПользователя = Новый Структура;
		ПараметрыЗаполненияИмениПользователя.Вставить("Email", Email);
		ИмяПользователя = Справочники.ИменаПользователей.НайтиСоздатьИмяПользователя(ПараметрыЗаполненияИмениПользователя, Истина);
		
		ЮТест.ОжидаетЧто(ИмяПользователя)
			.ИмеетТип("СправочникСсылка.ИменаПользователей")
			.Заполнено()
			.Свойство("Наименование").Равно(ФИО)
			.Свойство("Недействителен").ЭтоИстина()
			.Свойство("Подразделение").Равно(Справочники.СтруктураПредприятия.ИсторияПредприятия)
			;

	КонецЕсли;
		
КонецПроцедуры 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СоздатьНовогоПользователя(ПраваПользователя = Неопределено, ОбменДанными = Ложь) Экспорт

	ФИО = ЮТест.Данные().Подражатель().Люди().ФИО();
	Email = "Test_User1@email.com";
	ПользовательОС = "\\domen\Test_User1";
	
	КонструкторИмяПользователя = ЮТест.Данные().КонструкторОбъекта("Справочники.ИменаПользователей")
	    .ФикцияОбязательныхПолей()
		.Установить("Наименование", ФИО)
		.Установить("УчетнаяЗаписьWindows", "Test_User1")
		.Установить("Email", Email)
		.Установить("ПользовательОС", ПользовательОС)
		.Установить("ИдентификаторAD", ЮТест.Данные().СлучайныйИдентификатор(20))
		;
		
	Если ЗначениеЗаполнено(ПраваПользователя) Тогда
	
		КонструкторИмяПользователя
			.ТабличнаяЧасть("ПраваПользователя").ДобавитьСтроку()
				.УстановитьРеквизиты(ПраваПользователя)
			;
	
	КонецЕсли;
		
	ИмяПользователя = КонструкторИмяПользователя.Записать(, ОбменДанными);
		
	Пользователь = РаботаСоСтруктуройКаталоговAD.СоздатьНовогоПользователяИБ(ИмяПользователя);
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяПользователя", ИмяПользователя);
	Результат.Вставить("Пользователь", Пользователь);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьПодразделение(Наименование)
	
	Домен = Константы.ДоменПредприятия.Получить();
	Организация = ЮТест.Данные().СоздатьЭлемент("Справочники.Организации");
	Подразделение = ЮТест.Данные().КонструкторОбъекта("Справочники.СтруктураПредприятия")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", Наименование)
		.Установить("Организация", Организация)
		.Установить("ГруппаAD", ЮТест.Данные().СлучайныйИдентификатор(20, Домен))
		.Установить("ДобавлятьПользователейАвтоИБ", Истина)
		.Записать();
	
	Возврат Подразделение;
	
КонецФункции

Функция СоздатьТаблицуСДаннымиПользователейОтAD(Домен, Подразделение, ФИО, Аккаунт, Email, SID)
	
	ТаблицаПользователей = РаботаСоСтруктуройКаталоговAD.ПараметрыТаблицыПользователей();
	НоваяСтрока = ТаблицаПользователей.Добавить();
	
	НоваяСтрока.ADsPath = СтрШаблон(НСтр("ru = 'OU=%1,OU=Административно-хозяйственный отдел,OU=KYPOROS,DC=%2,DC=loc'"),
			Подразделение, Домен);
	НоваяСтрока.ОтображаемоеИмя = ФИО;
	НоваяСтрока.Подразделение = Подразделение;
	НоваяСтрока.Аккаунт = Аккаунт;
	НоваяСтрока.Домен = Домен;
	НоваяСтрока.Email = Email;
	НоваяСтрока.SID = SID;
	НоваяСтрока.Сотрудник = ФИО;
	НоваяСтрока.ТелефонРабочий = ЮТест.Данные().СлучайныйНомерТелефона();
	НоваяСтрока.Загружено = Истина;
	
	Возврат ТаблицаПользователей;
	
КонецФункции

#КонецОбласти