
#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
   ЮТТесты.ДобавитьТестовыйНабор("Акт выполненных работ").ВТранзакции()
   	.ДобавитьТест("АктВыполненныхРабот_Корректный","Проведение документа корректное", "Позитив")
   	.ДобавитьТест("АктВыполненныхРабот_ОшибкаПроведения","Проведение документа при остатке меньше чем указано в акте", "Негатив")
	;

КонецПроцедуры

Процедура АктВыполненныхРабот_Корректный() Экспорт

	// Создание тестовых данных.
	Организация = ЮТест.Данные().СоздатьЭлемент("Справочники.Организации");	
	Проект = ЮТест.Данные().КонструкторОбъекта("Справочники.Проекты")
		.ФикцияОбязательныхПолей("Организация")
		.Установить("Организация", Организация)
		.Записать();
		;	
	
	Задача = СоздатьЗадачу(Проект);
	
	// Приход
	ДокументРаботыПоЗадаче = ЮТест.Данные().СоздатьДокумент("Документы.РаботыПоЗадаче");
	ЮТест.Данные().КонструкторДвижений(ДокументРаботыПоЗадаче, "ВзаиморасчетыСОрганизациями")
		.ДобавитьСтроку()
		    .Установить("Период", ЮТест.Данные().СлучайнаяДатаВПрошлом(1, "день"))
			.Установить("ВидДвижения", ВидДвиженияНакопления.Приход)
			.Установить("Организация", Организация)
	        .Установить("Задача", Задача)
	        .Установить("Исполнитель", Задача.Исполнитель)
	        .Установить("ФактическаяТрудоемкость", 10)
		.Записать()
		;
	
	Данные = ЮТест.Данные().КонструкторДвижений(ДокументРаботыПоЗадаче, "ВзаиморасчетыСОрганизациями")
		.ДобавитьСтроку()
			.Установить("Организация", Организация)
			.Установить("Задача", Задача)
			.Установить("Исполнитель", Задача.Исполнитель)
	        .Данные();
	
	// Расход
	АктСсылка = СоздатьАктВыполненныхРабот(Задача, 10);
	
	//АктСсылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
	
	// Проверка проведения.
	ЮТест.ОжидаетЧто(АктСсылка.ПолучитьОбъект())
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение) 
		.НеВыбрасываетИсключение()
		;
		
	// На остатках должно быть ноль.	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВзаиморасчетыСОрганизациямиОстатки.Организация КАК Организация,
	|	ВзаиморасчетыСОрганизациямиОстатки.Задача КАК Задача,
	|	ВзаиморасчетыСОрганизациямиОстатки.Исполнитель КАК Исполнитель,
	|	ВзаиморасчетыСОрганизациямиОстатки.ФактическаяТрудоемкостьОстаток КАК ФактическаяТрудоемкостьОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСОрганизациями.Остатки(
	|			,
	|			Задача = &Задача
	|				И Исполнитель = &Исполнитель
	|				И Организация = &Организация) КАК ВзаиморасчетыСОрганизациямиОстатки";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("Исполнитель", Задача.Исполнитель);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЮТест.ОжидаетЧто(Выборка.Количество())
		.Равно(0)
		;
		
КонецПроцедуры
	
Процедура АктВыполненныхРабот_ОшибкаПроведения() Экспорт

	// Создание тестовых данных.
	Организация = ЮТест.Данные().СоздатьЭлемент("Справочники.Организации");	
	Проект = ЮТест.Данные().СоздатьЭлемент("Справочники.Проекты");	
	
	Задача = СоздатьЗадачу(Проект);
	
	АктСсылка = СоздатьАктВыполненныхРабот(Задача, 10);
	
	//АктСсылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
	
	// Проверка проведения.
	ЮТест.ОжидаетЧто(АктСсылка.ПолучитьОбъект())
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение) // Указываем проверяемый метод и параметры вызова
  		.ВыбрасываетИсключение("Не удалось провести ""Акт выполненных работ") // Утверждение-проверка, исключение должно содержать
		;
		
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(1)
		.Свойство("[0].Текст")
			.ИмеетТип("Строка")
			.Содержит("остаток выполненных часов меньше чем указано в акте")
		;
	
КонецПроцедуры  

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СоздатьЗадачу(Проект) Экспорт
	
	КонструкторЗадача = ЮТест.Данные().КонструкторОбъекта("Задачи.ЗадачиПользователя")
		.ФикцияОбязательныхПолей()
	    .Установить("Проект", Проект) 
	    .Установить("Исполнитель", Пользователи.ТекущийПользователь()) 
		.Установить("СрокИсполнения", ЮТест.Данные().СлучайнаяДатаВБудущем(30, "дней"))
		.Фикция("ВидЗадачи")
		.Фикция("ТипЗадачи");
	Задача = КонструкторЗадача.Записать();
	
	Возврат Задача;

КонецФункции

Функция СоздатьАктВыполненныхРабот(Задача, Трудоемкость, Проводить = Ложь) Экспорт
	
	КонструкторАктВыполненныхРабот = ЮТест.Данные().КонструкторОбъекта("Документы.АктыВыполненныхРабот")
		.ФикцияОбязательныхПолей()
		.Установить("Дата", ЮТест.Данные().СлучайнаяДатаВБудущем(30, "дней"))
	    .Установить("Организация", Задача.Проект.Организация) 
	    .Установить("Проект", Задача.Проект) 
	    .Установить("Статус", Перечисления.СтатусАктаВыполненныхРабот.Проект) 
		.ТабличнаяЧасть("СписокЗадач").ДобавитьСтроку()
			.Установить("Задача", Задача)
			.Установить("Исполнитель", Задача.Исполнитель)
			.Установить("Трудоемкость", 10)
			.Установить("Сумма", 10000)
		;

	Если Не Проводить Тогда
	
		АктСсылка = КонструкторАктВыполненныхРабот.Записать();
	
	КонецЕсли;	

	Возврат АктСсылка;

КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти
