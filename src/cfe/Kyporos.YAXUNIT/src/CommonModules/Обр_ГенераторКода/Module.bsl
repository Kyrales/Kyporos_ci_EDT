#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
   ЮТТесты.ДобавитьТестовыйНабор("Генератор кода").ВТранзакции()
   	.ДобавитьТест("ТестСформироватьКодПоСсылкамНаОбъекты_ОсновнойКод", "СформироватьКодПоСсылкамНаОбъекты: тип кода ОсновнойКод", "Позитив")
   	.ДобавитьТест("ТестСформироватьКодПоСсылкамНаОбъекты_КонструкторОбъектаYaxunit", "СформироватьКодПоСсылкамНаОбъекты: тип кода КонструкторОбъектаYaxunit", "Позитив")
	// Генератор MarkDown-таблиц
	.ДобавитьТест("ТестРабота_ТаблицаMarkDown_БезСсылок", "ТаблицаMarkDown: простой вариант из документации", "Позитив")
	.ДобавитьТест("ТестРабота_ТаблицаMarkDown_ЕстьСсылки", "ТаблицаMarkDown: проверка функций загрузки таблицы", "Позитив")
	// Тест служебной функции ТестЭтоСсылочныйТип()
	.ДобавитьТест("ТестЭтоСсылочныйТип", "ТестЭтоСсылочныйТип", "Позитив")
		.СПараметрами(1, Ложь).Представление("ТестЭтоСсылочныйТип: Число = Нет")
		.СПараметрами(Истина, Ложь).Представление("ТестЭтоСсылочныйТип: Булево = Нет")
		.СПараметрами("тест", Ложь).Представление("ТестЭтоСсылочныйТип: Строка = Нет")
		.СПараметрами(Справочники.Организации.ПустаяСсылка(), Истина).Представление("ТестЭтоСсылочныйТип: Ссылка = Да")
	;

КонецПроцедуры

Процедура ТестСформироватьКодПоСсылкамНаОбъекты_ОсновнойКод() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	Организация = ЮТест.Данные().СоздатьЭлемент("Справочники.Организации");	
	Проект = ЮТест.Данные().КонструкторОбъекта("Справочники.Проекты")
		.ФикцияОбязательныхПолей()
		.Установить("Организация", Организация)
		.Записать();
		;	
	
	Задача = Док_АктыВыполненныхРабот.СоздатьЗадачу(Проект);
	АктСсылка = Док_АктыВыполненныхРабот.СоздатьАктВыполненныхРабот(Задача, 10);
	
	// 2. Выполнение функции.
	СсылкиДляФормирования = Новый Массив;
	СсылкиДляФормирования.Добавить(Организация);
	СсылкиДляФормирования.Добавить(Проект);
	СсылкиДляФормирования.Добавить(Задача);
	СсылкиДляФормирования.Добавить(АктСсылка);
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ТипКода", "ОсновнойКод");
	ПараметрыФормирования.Вставить("КодДляОбработчиковОбновления", Ложь);
	
	ОбработкаГенераторКода = Обработки.ГенераторКода.Создать();
	РезультатФункции = ОбработкаГенераторКода.СформироватьКодПоСсылкамНаОбъекты(СсылкиДляФормирования, ПараметрыФормирования);
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(РезультатФункции)
		.ИмеетТип(Тип("ТекстовыйДокумент"))
		;
	
	РезультатКод = РезультатФункции.ПолучитьТекст();
	ЮТест.ОжидаетЧто(РезультатКод)
		.ИмеетТип("Строка")
		.Заполнено()
		.Содержит(НСтр("ru = 'НайденЭлемент = Справочник.Проекты.НайтиПоНаименованию(Наименование, Истина);'"))
		.Содержит(НСтр("ru = 'ДокументОбъект = Документ.АктыВыполненныхРабот.СоздатьДокумент();'"))
		.Содержит(НСтр("ru = 'ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);'"))
		;
	
КонецПроцедуры 

Процедура ТестСформироватьКодПоСсылкамНаОбъекты_КонструкторОбъектаYaxunit() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	Организация = ЮТест.Данные().СоздатьЭлемент("Справочники.Организации");	
	Проект = ЮТест.Данные().КонструкторОбъекта("Справочники.Проекты")
		.ФикцияОбязательныхПолей()
		.Установить("Организация", Организация)
		.Записать()
		;	
	
	Задача = Док_АктыВыполненныхРабот.СоздатьЗадачу(Проект);
	АктСсылка = Док_АктыВыполненныхРабот.СоздатьАктВыполненныхРабот(Задача, 10);
	
	// 2. Выполнение функции.
	СсылкиДляФормирования = Новый Массив;
	СсылкиДляФормирования.Добавить(Организация);
	СсылкиДляФормирования.Добавить(Проект);
	СсылкиДляФормирования.Добавить(Задача);
	СсылкиДляФормирования.Добавить(АктСсылка);
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ТипКода", "КонструкторОбъектаYaxunit");
	ПараметрыФормирования.Вставить("КодДляОбработчиковОбновления", Ложь);
	
	ОбработкаГенераторКода = Обработки.ГенераторКода.Создать();
	РезультатФункции = ОбработкаГенераторКода.СформироватьКодПоСсылкамНаОбъекты(СсылкиДляФормирования, ПараметрыФормирования);
	
	// 3. Проверка результата.
	РезультатКод = РезультатФункции.ПолучитьТекст();
	ЮТест.ОжидаетЧто(РезультатКод)
		.ИмеетТип("Строка")
		.Заполнено()
		.Содержит(НСтр("ru = 'ОрганизацияСсылка = ЮТест.Данные().КонструкторОбъекта(""Справочник.Организации"")'"))
		.Содержит(НСтр("ru = 'АктВыполненныхРаботСсылка = ЮТест.Данные().КонструкторОбъекта(""Документ.АктыВыполненныхРабот"")'"))
		;
		
КонецПроцедуры 

Процедура ТестРабота_ТаблицаMarkDown_БезСсылок() Экспорт

	ТаблицаMarkDown = "
	|| Цена  | Количество | Сумма |
	||-------|------------|-------|
	|| 100   | 1          | 100   |
	|| 2 000 | 1          | 2000  |
	|| 300,9 | 1          | 300,9 |";
	
	ОписанияТипов = Новый Соответствие;
	ОписанияТипов.Вставить("Цена", Новый ОписаниеТипов("Число"));
	ОписанияТипов.Вставить("Количество", Новый ОписаниеТипов("Число"));
	ОписанияТипов.Вставить("Сумма", Новый ОписаниеТипов("Число"));
	
	Данные = ЮТест.Данные().ЗагрузитьИзМакета(СокрЛП(ТаблицаMarkDown), ОписанияТипов); 
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(Данные)
		.ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(3)
		;
	
КонецПроцедуры 

Процедура ТестРабота_ТаблицаMarkDown_ЕстьСсылки() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	ТаблицаMarkDown = НСтр("ru = '
	|| Проведен | Ссылка                                   | ПометкаУдаления | Дата                      | Номер           | Организация                              | Проект                                   | Статус                                   | ДатаСтатуса               | Оплачено | ДатаОплаты                | СуммаОплаты       | ДругаяСуммаСогласована | Ответственный                            | Комментарий | БанковскийСчетОтветственного             |
	||----------|------------------------------------------|-----------------|---------------------------|-----------------|------------------------------------------|------------------------------------------|------------------------------------------|---------------------------|----------|---------------------------|-------------------|------------------------|------------------------------------------|-------------|------------------------------------------|
	|| Да       | 0000-0000000009                          | Нет             | 08.12.2024 23:59:59       | 0000-0000000009 | ВА - Для актов                           |                                          | Проект                                   | 01.01.0001 0:00:00        | Нет      | 01.01.0001 0:00:00        | 30 000            | Нет                    | Контроль задач                           |             |                                          |
	|| Да       | 0000-0000000010                          | Нет             | 08.12.2024 23:59:59       | 0000-0000000010 | ВА - Для актов                           |                                          | Проект                                   | 01.01.0001 0:00:00        | Нет      | 01.01.0001 0:00:00        | 4 000             | Нет                    | Контроль задач                           |             |                                          |
	|| Да       | 0000-0000000011                          | Нет             | 11.01.2025 23:59:59       | 0000-0000000011 | ВА - Для актов                           |                                          | Проект                                   | 01.01.0001 0:00:00        | Нет      | 01.01.0001 0:00:00        | 30 000            | Нет                    | Контроль задач                           |             |                                          |
	|| Да       | 0000-0000000012                          | Нет             | 11.01.2025 23:59:59       | 0000-0000000012 | ВА - Для актов                           |                                          | Проект                                   | 01.01.0001 0:00:00        | Нет      | 01.01.0001 0:00:00        | 4 000             | Нет                    | Контроль задач                           |             |                                          |
	|'");
	
	ОписанияТипов = Новый Соответствие;
	ОписанияТипов.Вставить("Проведен", Новый ОписаниеТипов("Булево"));
	ОписанияТипов.Вставить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.АктыВыполненныхРабот"));
	ОписанияТипов.Вставить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	ОписанияТипов.Вставить("Дата", Новый ОписаниеТипов("Дата"));
	ОписанияТипов.Вставить("Номер", Новый ОписаниеТипов("Строка"));
	ОписанияТипов.Вставить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ОписанияТипов.Вставить("Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	ОписанияТипов.Вставить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусАктаВыполненныхРабот"));
	ОписанияТипов.Вставить("ДатаСтатуса", Новый ОписаниеТипов("Дата"));
	ОписанияТипов.Вставить("Оплачено", Новый ОписаниеТипов("Булево"));
	ОписанияТипов.Вставить("ДатаОплаты", Новый ОписаниеТипов("Дата"));
	ОписанияТипов.Вставить("СуммаОплаты", Новый ОписаниеТипов("Число"));
	ОписанияТипов.Вставить("ДругаяСуммаСогласована", Новый ОписаниеТипов("Булево"));
	ОписанияТипов.Вставить("Ответственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ОписанияТипов.Вставить("Комментарий", Новый ОписаниеТипов("Строка"));
	ОписанияТипов.Вставить("БанковскийСчетОтветственного", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	
	Данные = ЮТест.Данные().ЗагрузитьИзМакета(СокрЛП(ТаблицаMarkDown), ОписанияТипов);	
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(Данные)
		.ИмеетТип("ТаблицаЗначений")
		;
		
КонецПроцедуры 

Процедура ТестЭтоСсылочныйТип(Значение, Результат) Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	// 2. Выполнение функции.
	РезультатФункции = ЮТТипыДанныхСлужебный.ЭтоСсылочныйТип(ТипЗнч(Значение));
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(РезультатФункции)
		.Равно(Результат)
		;

КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти