
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Конфигурация = Параметры.ЗначенияЗаполнения.Конфигурация;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИмпортМодулей(Команда)
	
	Если Конфигурация.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		    НСтр("ru = 'Поле ""Конфигурация"" не заполнено!'"),, 
			"Конфигурация");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмпортМодулейПродолжение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Импортировать модули?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортМодулейПродолжение(РезультатВопроса, Параметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмпортМодулейЗавершение", ЭтотОбъект);
	ФайловаяСистемаКлиент.ВыбратьКаталог(ОписаниеОповещения, НСтр("ru = 'Выберите путь к каталогу файлов модулей'"));
		
КонецПроцедуры // ИмпортМодулейЗавершение()

&НаКлиенте
Процедура ИмпортМодулейЗавершение(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяКаталога) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКаталога", ИмяКаталога);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмпортМодулейРезультатПоискаФайлов", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайловНаСервер(ОписаниеОповещения, , , ИмяКаталога + "*.txt", УникальныйИдентификатор);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИмпортМодулейРезультатПоискаФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = ДополнительныеПараметры.ИмяКаталога;
	
	МассивПомещенныхФайлов = Новый Массив;
	ПомещениеВМассивСтруктурАдресовФайлов(ПомещенныеФайлы, МассивПомещенныхФайлов);
	
	ИмпортМодулейСервер(ИмяКаталога, МассивПомещенныхФайлов);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьДанныеОбъектовМетаданных(Команда)
	
	Если Конфигурация.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		    НСтр("ru = 'Поле ""Конфигурация"" не заполнено!'"),, 
			"Конфигурация");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДанныеОбъектовМетаданныхЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Обновить данные объектов метаданных?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОбъектовМетаданныхЗавершение(РезультатВопроса, Параметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеОбъектовМетаданныхСервер();	
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Обновление выполнено успешно.'"));
	
КонецПроцедуры // ОбновитьДанныеОбъектовМетаданныхЗавершение()

&НаКлиенте
Процедура УстановитьОтметкуВсех(Команда)
	
	Для каждого стр Из СписокДанных Цикл
	
		стр.Отмечен = Истина;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьОтметкуВсех(Команда)
	
	Для каждого стр Из СписокДанных Цикл
	
		стр.Отмечен = Ложь;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПомещениеВМассивСтруктурАдресовФайлов(ПомещенныеФайлы, МассивПомещенныхФайлов) 
	
	#Если Не ВебКлиент Тогда
	
	Для каждого ТекСтрока Из ПомещенныеФайлы Цикл
		
		МассивСтруктурПомещенныхФайлов = Новый Структура;
		МассивСтруктурПомещенныхФайлов.Вставить("Адрес", ТекСтрока.Адрес);
		МассивСтруктурПомещенныхФайлов.Вставить("ИмяБезРасширения", ТекСтрока.СсылкаНаФайл.Файл.ИмяБезРасширения);
		
		МассивПомещенныхФайлов.Добавить(МассивСтруктурПомещенныхФайлов);
		
	КонецЦикла;
	
	#КонецЕсли
	
КонецПроцедуры

// 1. Импортируем данные с изменениями выгруженных модулей из конфигурации
&НаСервере
Процедура ИмпортМодулейСервер(ИмяКаталога, МассивПомещенныхФайлов)
	
	СписокДанных.Очистить();
	
	Для каждого стр Из МассивПомещенныхФайлов Цикл
		// перебор файлов модулей и идентификация описания изменений
		
		ФайлДанных = ПолучитьИзВременногоХранилища(стр.Адрес);
		ЧтениеДанных = Новый ЧтениеДанных(ФайлДанных);  // для возможности далее считывать из потока
		
		ФайлТекст = Новый ТекстовыйДокумент;
		ФайлТекст.Прочитать(ЧтениеДанных.Прочитать().ОткрытьПотокДляЧтения());  // считываем из потока
		
		ЧтениеДанных.Закрыть();
		УдалитьИзВременногоХранилища(стр.Адрес);
		
		// обработка строк файла
		сч=0; ЕстьИзменения = Ложь; ИнформацияПоИзменениям="";
		Пока ФайлТекст.КоличествоСтрок() > сч Цикл
		 	сч = сч + 1;

			ТекстФайла = СокрЛП(ФайлТекст.ПолучитьСтроку(сч));
		    ТекстФайла = СтрЗаменить(ТекстФайла,Символы.НПП," ");

			// Идентификация файла с комментариями изменений по методологии.
			Если (Не ЕстьИзменения) Тогда
				НайденнаяПозиция = Найти(ТекстФайла,">>> ОПИСАНИЕ ИЗМЕНЕНИЙ >>>");
				Если НайденнаяПозиция > 0 Тогда
					ЕстьИзменения = Истина;
					
					// определение автора изменения
					НачальнаяПозицияАвтора = Найти(ТекстФайла,"//{");
					Если НачальнаяПозицияАвтора > 0 Тогда
						АвторСтрока = Сред(ТекстФайла,НачальнаяПозицияАвтора+4,НайденнаяПозиция - (НачальнаяПозицияАвтора+4));
						АвторСтрока = СтрЗаменить(АвторСтрока,">","");
						АвторСтрока = СтрЗаменить(АвторСтрока,"{","");
						АвторСтрока = СокрЛП(АвторСтрока);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		
			Если сч=5 
				И (Не ЕстьИзменения) Тогда
				Прервать;
			ИначеЕсли (Не ЕстьИзменения) Тогда
				Продолжить;
			КонецЕсли;
			
			// фиксируем основные данные по изменениям
			ИнформацияПоИзменениям = ИнформацияПоИзменениям + ТекстФайла + Символы.ПС; 
			
			Если Найти(ТекстФайла,"<<< ОПИСАНИЕ ИЗМЕНЕНИЙ <<<")>0 Тогда
				// закончить выполнение цикла
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		// фиксация в таблице значений формы
		Если ЕстьИзменения Тогда
			
			НовСтр = СписокДанных.Добавить();
			НовСтр.НазваниеМодуля 		  = стр.ИмяБезРасширения;
            НовСтр.ИнформацияПоИзменениям = СокрЛП(ИнформацияПоИзменениям);
			НовСтр.ТипОбъектаМетаданных	  = ПолучитьТипОбъектаМетаданных(стр.ИмяБезРасширения);
			НовСтр.ОбъектМетаданных		  = ПолучитьОбъектМетаданных(стр.ИмяБезРасширения,НовСтр.ТипОбъектаМетаданных);
			НовСтр.АвторИзменений		  = АвторСтрока;
			
			// определяем тип модуля по объекту метаданных
			НовСтр.ТипМодуля = ПолучитьТипМодуля(стр.ИмяБезРасширения);
		
			Если Не НовСтр.ОбъектМетаданных.Пустая() Тогда
				
				// Если были произведены обновления модулей, то устанавливается автоматически галочка "Для обновления".
				СтрТипМодуляОМ = НовСтр.ОбъектМетаданных.ИзмененияПоУмолчанию.Найти(НовСтр.ТипМодуля, "ТипМодуля");
				Если СтрТипМодуляОМ<>Неопределено Тогда
					НовСтр.Отмечен = СокрЛП(СтрТипМодуляОМ.ИнформацияПоИзменениям) <> НовСтр.ИнформацияПоИзменениям;
				Иначе
					НовСтр.Отмечен = Истина;
				КонецЕсли;
	
			КонецЕсли;
			
			Если НовСтр.ОбъектМетаданных.Пустая() Тогда
				НовСтр.Отмечен = Истина;
			КонецЕсли;
			
		КонецЕсли;  // ЕстьИзменения
		
	КонецЦикла;
	
КонецПроцедуры

// 2. Обновление информации в объектах метаданных
&НаСервере
Процедура ОбновитьДанныеОбъектовМетаданныхСервер() 
	
	// Если отмечен один из типов модулей объекта метаданных, то нужно отметить все типы объекта метаданных.
	Для каждого стр Из СписокДанных Цикл
		
		Если стр.Отмечен Тогда
			Продолжить
		КонецЕсли;
		
		ОтборДанных = Новый Структура;
		ОтборДанных.Вставить("ОбъектМетаданных",стр.ОбъектМетаданных);
		ОтборДанных.Вставить("Отмечен",Истина);
		
		НайдСтроки = СписокДанных.НайтиСтроки(ОтборДанных);
		Если НайдСтроки.Количество()>0 Тогда
			стр.Отмечен = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// очистить текущие выбранные объекты метаданных от описаний
	ТаблицаСвернутыхДанных = СписокДанных.Выгрузить();
	ТаблицаСвернутыхДанных.Свернуть("ОбъектМетаданных, Отмечен");
	
	Для каждого стр Из ТаблицаСвернутыхДанных Цикл
		Если (Не стр.Отмечен) 
			Или стр.ОбъектМетаданных.Пустая() Тогда
			Продолжить;	
		КонецЕсли;
		
		Об = стр.ОбъектМетаданных.ПолучитьОбъект();
		Об.Заблокировать();
		Об.ИзмененияПоУмолчанию.Очистить();
		Об.Записать();
		
	КонецЦикла;
	
	// заполнение описаний
	Для каждого стр Из СписокДанных Цикл
		
		Если Не стр.Отмечен Тогда
			Продолжить;	
		КонецЕсли;
		
		
		Если стр.ТипМодуля.Пустая() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке %1: не задан Тип модуля.'"), стр.НазваниеМодуля);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;			
		КонецЕсли;
		
		
		стр.ОбъектМетаданных = ПолучитьОбъектМетаданных(стр.НазваниеМодуля,стр.ТипОбъектаМетаданных);
		Если стр.ОбъектМетаданных.Пустая() Тогда
			// создаем объект метаданных
			Если стр.ТипОбъектаМетаданных.Пустая() Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке %1: не создан Объект метаданных, т.к. не задан тип объекта метаданных.'"), стр.НазваниеМодуля);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			стр.ОбъектМетаданных = СоздатьОбъектМетаданных(стр.НазваниеМодуля,стр.ТипОбъектаМетаданных);
		ИначеЕсли Не стр.ОбъектМетаданных.Актуальность Тогда	
			
			// становится актуальным
			ОбОМ = стр.ОбъектМетаданных.ПолучитьОбъект();
			ОбОМ.Актуальность = Истина;
			ОбОМ.Записать();
			
		КонецЕсли;
		
		
		Об = стр.ОбъектМетаданных.ПолучитьОбъект();
		Об.ОбъектПротестирован = Ложь; // сброс факта тестирования для новой версии
		
		НайденныйЭлемент = Об.ИзмененияПоУмолчанию.Найти(стр.ТипМодуля,"ТипМодуля");
		Если НайденныйЭлемент=Неопределено Тогда
			СтрокаДанных = Об.ИзмененияПоУмолчанию.Добавить();
			СтрокаДанных.ТипМодуля = стр.ТипМодуля;	
		Иначе
			СтрокаДанных = НайденныйЭлемент;
		КонецЕсли;
		
		СтрокаДанных.ИнформацияПоИзменениям = СокрЛП(стр.ИнформацияПоИзменениям);
		СтрокаДанных.АвторИзменений = стр.АвторИзменений;
		
		Об.Записать();
		
	КонецЦикла;		
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектМетаданных(СтрокаОМ,ТипОбъектаОМ) 
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектыМетаданныхКонфигураций.Ссылка,
	               |	ОбъектыМетаданныхКонфигураций.Владелец,
	               |	ОбъектыМетаданныхКонфигураций.ТипОбъектаМетаданных
	               |ИЗ
	               |	Справочник.ОбъектыМетаданныхКонфигураций КАК ОбъектыМетаданныхКонфигураций
	               |ГДЕ
	               |	ОбъектыМетаданныхКонфигураций.Владелец = &Владелец
	               |	И НЕ ОбъектыМетаданныхКонфигураций.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Конфигурация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		  НайденнаяПозиция = Найти(СтрокаОМ,Выборка.Ссылка.Наименование);
		  
		  Если НайденнаяПозиция=0 Тогда
		  	 Продолжить;
		  КонецЕсли;
		  
		  // Заново проверка найденного с точками с обоих сторон.
		  ОбработанноеНазвание = СокрЛП(СтрокаОМ);
		  ОбработаннаяСтрока = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ОбработанноеНазвание,".");
		  НазваниеОбъекта = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ОбработанноеНазвание,".");

		  Если Выборка.Ссылка.Наименование = НазваниеОбъекта 
			  И ( ТипОбъектаОМ.Пустая() 
			  Или  Выборка.ТипОбъектаМетаданных = ТипОбъектаОМ ) Тогда
			  
		  	  Возврат Выборка.Ссылка;
		  
		  КонецЕсли;
	КонецЦикла;
	
	
	Возврат Справочники.ОбъектыМетаданныхКонфигураций.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ПолучитьТипОбъектаМетаданных(СтрокаОМ) 
	
	Выборка = Справочники.ТипОбъектаМетаданных.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если СокрЛП(Выборка.СоответствиеМодулю)="" Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяПозиция = Найти(СтрокаОМ,СокрЛП(Выборка.СоответствиеМодулю)+".");
		Если НайденнаяПозиция>0 Тогда
			Возврат Выборка.Ссылка
		КонецЕсли;
		
		НайденнаяПозиция = Найти(СтрокаОМ,СокрЛП("Конфигурация."+Выборка.СоответствиеМодулю));
		Если НайденнаяПозиция>0 Тогда
			Возврат Выборка.Ссылка
		КонецЕсли;
		
		Если СокрЛП(Выборка.СоответствиеМодулюАнгл)="" Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяПозиция 	= Найти(СтрокаОМ,СокрЛП(Выборка.СоответствиеМодулюАнгл)+".");
		Если НайденнаяПозиция>0 Тогда
			Возврат Выборка.Ссылка
		КонецЕсли;
		
		НайденнаяПозиция = Найти(СтрокаОМ,СокрЛП("Configuration."+Выборка.СоответствиеМодулю));
		Если НайденнаяПозиция>0 Тогда
			Возврат Выборка.Ссылка
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Справочники.ТипОбъектаМетаданных.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ПолучитьТипМодуля(СтрокаОМ) 
	
	ТипМодуляСтр = РазобратьОМСервер(СтрокаОМ);	
	
	Если ТипМодуляСтр="" Тогда
	
		Возврат Справочники.ТипыМодулей.ПустаяСсылка();
		
	КонецЕсли;
	
	НайденныйТипМодуля = Справочники.ТипыМодулей.НайтиПоНаименованию(ТипМодуляСтр,Истина);
	Если Не НайденныйТипМодуля.Пустая() Тогда
	
		ТипМодуля = НайденныйТипМодуля;
		
	Иначе
		
		Об = Справочники.ТипыМодулей.СоздатьЭлемент();
		Об.Наименование = ТипМодуляСтр;
		Об.Записать();
		
		ТипМодуля = Об.Ссылка;
		
	КонецЕсли;	
	
	Возврат ТипМодуля;
	
КонецФункции

&НаСервере
Функция РазобратьОМСервер(Знач СтрокаОМ)
	
	// Модуль менеджера
	НайденнаяПозиция = Найти(СтрокаОМ,".МодульМенеджера");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульМенеджера";
			
	КонецЕсли;	
	
	НайденнаяПозиция = Найти(СтрокаОМ,".ManagerModule");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульМенеджера";
			
	КонецЕсли;	
	
	// Модуль объекта
	НайденнаяПозиция = Найти(СтрокаОМ,".МодульОбъекта");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульОбъекта";
			
	КонецЕсли;
	
	НайденнаяПозиция = Найти(СтрокаОМ,".ObjectModule");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульОбъекта";
			
	КонецЕсли;
	
	// Модуль набора записей
	НайденнаяПозиция = Найти(СтрокаОМ,".МодульНабораЗаписей");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульНабораЗаписей";
			
	КонецЕсли;
	НайденнаяПозиция = Найти(СтрокаОМ,".RecordSetModule");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульНабораЗаписей";
			
	КонецЕсли;
	
	// Общий модуль
	НайденнаяПозиция = Найти(СтрокаОМ,"ОбщийМодуль.");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "ОбщийМодуль";
			
	КонецЕсли;
	
	НайденнаяПозиция = Найти(СтрокаОМ,"CommonModule.");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "ОбщийМодуль";
			
	КонецЕсли;
	
	// Общая форма
	НайденнаяПозиция = Найти(СтрокаОМ,"ОбщаяФорма.");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "ОбщаяФорма";
			
	КонецЕсли;
	
	НайденнаяПозиция = Найти(СтрокаОМ,"CommonForm.");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "ОбщаяФорма";
			
	КонецЕсли;
	
	// Модуль обычного приложения
	НайденнаяПозиция = Найти(СтрокаОМ,"Конфигурация.МодульОбычногоПриложения");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульОбычногоПриложения";
			
	КонецЕсли;
	
	НайденнаяПозиция = Найти(СтрокаОМ,"Configuration.OrdinaryApplicationModule");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульОбычногоПриложения";
			
	КонецЕсли;
	
	// Модуль управляемого приложения
	НайденнаяПозиция = Найти(СтрокаОМ,"Конфигурация.МодульУправляемогоПриложения");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульУправляемогоПриложения";
			
	КонецЕсли;
	
	НайденнаяПозиция = Найти(СтрокаОМ,"Configuration.ManagedApplicationModule");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульУправляемогоПриложения";
			
	КонецЕсли;
	
	// Модуль сеанса
	НайденнаяПозиция = Найти(СтрокаОМ,"Конфигурация.МодульСеанса");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульСеанса";
			
	КонецЕсли;
	
	НайденнаяПозиция = Найти(СтрокаОМ,"Configuration.SessionModule");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульСеанса";
			
	КонецЕсли;
	
	// ДОПОЛНИТЕЛЬНЫЕ
	
	// Форма
	ОбработаннаяСтрока = ВыделитьТипОМ(СтрокаОМ, ".Форма.");
	Если ОбработаннаяСтрока<>"" Тогда
		Возврат ОбработаннаяСтрока;
	КонецЕсли;
	
	ОбработаннаяСтрока = ВыделитьТипОМ(СтрокаОМ, ".Form.");
	Если ОбработаннаяСтрока<>"" Тогда
		Возврат ОбработаннаяСтрока;
	КонецЕсли;
	
	// Команда
	ОбработаннаяСтрока = ВыделитьТипОМ(СтрокаОМ, ".Команда.");
	Если ОбработаннаяСтрока<>"" Тогда
		Возврат ОбработаннаяСтрока;
	КонецЕсли;
	
	ОбработаннаяСтрока = ВыделитьТипОМ(СтрокаОМ, ".Command.");
	Если ОбработаннаяСтрока<>"" Тогда
		Возврат ОбработаннаяСтрока;
	КонецЕсли;
	
	// Модуль команды
	НайденнаяПозиция = Найти(СтрокаОМ,".МодульКоманды");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульКоманды";
		
	КонецЕсли;
	
	НайденнаяПозиция = Найти(СтрокаОМ,".CommandModule");
	Если НайденнаяПозиция>0 Тогда
		
		Возврат "МодульКоманды";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции
 
&НаСервере
Функция СоздатьОбъектМетаданных(НазваниеМодуля,ТипОбъектаМетаданных) 
	
	ОбработанноеНазвание = СокрЛП(НазваниеМодуля);
	
	ОбработаннаяСтрока = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ОбработанноеНазвание,".");
	
	НазваниеОбъекта = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ОбработанноеНазвание,".");
	
	Об = Справочники.ОбъектыМетаданныхКонфигураций.СоздатьЭлемент();
	Об.Владелец = Конфигурация;
	Об.Наименование = НазваниеОбъекта;
	Об.Актуальность = Истина;
	Об.ТипОбъектаМетаданных = ТипОбъектаМетаданных;
	Об.Записать();
	
	Возврат Об.Ссылка;
	
КонецФункции

&НаСервере
Функция ВыделитьТипОМ(СтрокаОМ, ВыбранныйОМ) 
	
	НайденнаяПозиция = Найти(СтрокаОМ,ВыбранныйОМ);
	Если НайденнаяПозиция>0 Тогда
		
		ОбработанноеНазвание = СокрЛП(Прав(СтрокаОМ,СтрДлина(СтрокаОМ)-НайденнаяПозиция+1-СтрДлина(ВыбранныйОМ)));
		ОбработаннаяСтрока = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ОбработанноеНазвание,".");
		
		Возврат ОбработаннаяСтрока;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти
