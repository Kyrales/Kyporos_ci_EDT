#Область ОписаниеПеременных

&НаКлиенте
Перем НужноЗаписатьФорму; // Контроль закрытия формы.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьИзмененияФормыНаСервере();
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначенийВызовСервера.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДекорацийРезультата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ДействияРезультат = УправлениеУчетомКонфигурацийВызовСервера.ОпределитьРезультатИзменения(Запись, ТаблицаИзменений);	
	Если Запись.ДействияРезультат <> ДействияРезультат Тогда
		Запись.ДействияРезультат = ДействияРезультат;
		
		Если НЕ НужноЗаписатьФорму Тогда
			Если Запись.ДействияРезультат = ПредопределенноеЗначение("Перечисление.РежимРаботыПослеОбновления.ВзятьИзменения1СПолностью") Тогда 
				Отказ = Истина;
				ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Очистить изменения по умолчанию в объекте метаданных?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	НужноЗаписатьФорму = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, Параметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// Очистка изменений по умолчанию в объекте метаданных, 
		// для того чтобы в будущих версиях конфигурации уже данное изменение не заполнялось снова.
		УправлениеУчетомКонфигурацийВызовСервера.ОчиститьИзменениеПоУмолчаниюОбъектаМетаданных(Запись.ОбъектМетаданных, Запись.ТипМодуля);
	КонецЕсли;
	
	НужноЗаписатьФорму = Истина;
	Записать();
	
КонецПроцедуры // ПослеЗаписиЗавершение()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЗаписьБезТаблицыИзменений 
		И Элементы.ГруппаТаблицаИзменения.Видимость Тогда
	    ТекущийОбъект.КомментарийИзменения = УправлениеУчетомКонфигурацийВызовСервера.ЗаписьИзТаблицыЗначенийДанныхПоИзменениям(ТаблицаИзменений);	
    КонецЕсли;
	ЗаписьБезТаблицыИзменений = Ложь;

	Если ТекущийОбъект.ВыполненоИзменение Тогда
	   ТекущийОбъект.ИзмененийНеТребуется = Ложь;
	   ТекущийОбъект.ПроведенАнализИзменений = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначенийВызовСервера.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьВидимостьДекорацийРезультата();
	
	Оповестить("Запись_УчетВерсийКонфигурации");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДействияРезультатПриИзменении(Элемент)
	
	Если Запись.ДействияРезультат = ПредопределенноеЗначение("Перечисление.РежимРаботыПослеОбновления.ВзятьИзменения1СПолностью") Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДействияРезультатПриИзмененииЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Очистить изменения по умолчанию в объекте метаданных?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияРезультатПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
    	// Очистка изменений по умолчанию в объекте метаданных, 
		// для того чтобы в будущих версиях конфигурации уже данное изменение не заполнялось снова.
   	 	УправлениеУчетомКонфигурацийВызовСервера.ОчиститьИзменениеПоУмолчаниюОбъектаМетаданных(Запись.ОбъектМетаданных, Запись.ТипМодуля);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроведенАнализИзмененийПриИзменении(Элемент)
	
	Запись.ДатаАнализаИзменений = ?(Запись.ПроведенАнализИзменений, ОбщегоНазначенияКлиент.ДатаСеанса(), '00010101');
	Запись.ИзмененийНеТребуется = Ложь;
	
	УстановитьВидимостьДекорацийРезультата();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененийНеТребуетсяПриИзменении(Элемент)
	
	Запись.ДатаАнализаИзменений = ?(Запись.ПроведенАнализИзменений, ОбщегоНазначенияКлиент.ДатаСеанса(), '00010101');
	Запись.ДатаВыполненияИзменений = '00010101';
	Запись.ПроведенАнализИзменений = Ложь;
	Запись.ВыполненоИзменение = Ложь;
	
	УстановитьВидимостьДекорацийРезультата();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполненоИзменениеПриИзменении(Элемент)
	
	Запись.ДатаВыполненияИзменений = ?(Запись.ВыполненоИзменение, ОбщегоНазначенияКлиент.ДатаСеанса(), '00010101');
	
	УстановитьВидимостьДекорацийРезультата();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПроведенАнализИзменений(Команда)
	
	Запись.ПроведенАнализИзменений = Истина;
	Запись.ДатаАнализаИзменений = ?(Запись.ПроведенАнализИзменений, ОбщегоНазначенияКлиент.ДатаСеанса(), '00010101');
	Запись.ИзмененийНеТребуется = Ложь;
	
	Записать();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененийНеТребуется(Команда)
	
	Запись.ИзмененийНеТребуется = Истина;
	Запись.ДатаАнализаИзменений = ?(Запись.ПроведенАнализИзменений, ОбщегоНазначенияКлиент.ДатаСеанса(), '00010101');
	Запись.ДатаВыполненияИзменений = '00010101';
	Запись.ПроведенАнализИзменений = Ложь;
	Запись.ВыполненоИзменение = Ложь;
	
	Записать();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполненоИзменение(Команда)
	
	Запись.ВыполненоИзменение = Истина;
	Запись.ДатаВыполненияИзменений = ?(Запись.ВыполненоИзменение, ОбщегоНазначенияКлиент.ДатаСеанса(), '00010101');
	
	Записать();
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаИзменений

&НаКлиенте
Процедура УстановитьИзмененияНеТребуются(Команда)
	
	УстановитьРежимРаботыПослеОбновленияНаВсеСтроки(ПредопределенноеЗначение("Перечисление.РежимРаботыПослеОбновления.ИзмененияНеТребуются"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПереписатьНашиИзменения(Команда)
	
	УстановитьРежимРаботыПослеОбновленияНаВсеСтроки(ПредопределенноеЗначение("Перечисление.РежимРаботыПослеОбновления.ПереписатьНашиИзменения"));	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДополнитьИзменения1С(Команда)
	
	УстановитьРежимРаботыПослеОбновленияНаВсеСтроки(ПредопределенноеЗначение("Перечисление.РежимРаботыПослеОбновления.ДополнитьИзменения1С"));	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВзятьИзменения1СПолностью(Команда)
	
	УстановитьРежимРаботыПослеОбновленияНаВсеСтроки(ПредопределенноеЗначение("Перечисление.РежимРаботыПослеОбновления.ВзятьИзменения1СПолностью"));	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрошлуюВерсию(Команда)
	
	СтруктураКлюча = ПолучитьПоследнююВерсиюИзменений(Запись.ОбъектМетаданных, Запись.ВерсияКонфигурации, Запись.ТипМодуля);
	Если СтруктураКлюча <> Неопределено Тогда
		// уже существующий
		КлючЗаписи = ПолучитьКлючЗаписи(СтруктураКлюча); 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
		
		ОткрытьФорму("РегистрСведений.УчетВерсийКонфигурации.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекстДляРедактирования(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьТекстДляРедактированияЗавершение", ЭтотОбъект);
 	ПоказатьВводСтроки(Оповещение, Запись.КомментарийИзменения, НСтр("ru = 'Исходный текст изменений'"),, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекстДляРедактированияЗавершение(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	Запись.КомментарийИзменения = Результат;
	// BSLLS:UnusedLocalVariable-off
	ЗаписьБезТаблицыИзменений = Истина;
	// BSLLS:UnusedLocalVariable-on	
	Записать();
	
	ОбновитьИзмененияФормыНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИзмененийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаИзмененийЗначениеКартинкиЕстьТег" Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеОтраженияКомментарияТега", ЭтотОбъект);
		ПоказатьВводСтроки(Оповещение, Запись.ТегиИзменения, НСтр("ru = 'Информация по тегам изменения'"),, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтраженияКомментарияТега(Строка, Параметры) Экспорт
	
	Если НЕ Строка = Неопределено Тогда
		// Изменения текущей информации по тегам.
		// ...
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБуферИмяФункции(Команда)

	Если Элементы.ТаблицаИзменений.ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;  
	
	СтрокаИзменения = Элементы.ТаблицаИзменений.ТекущиеДанные.СтрокаИзменения;
	
	СтрокаРезультат = ВыделитьИмяФункцииИзСтроки(СтрокаИзменения);
	
	РаботаСЗадачамиКлиент.СкопироватьТекстВБуферОбмена(СтрокаРезультат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыделитьИмяФункцииИзСтроки(СтрокаИзменения)
	
	СтрокаИзменения = СтрЗаменить(СтрокаИзменения, "//  * ", "");
	СтрокаИзменения = СтрЗаменить(СтрокаИзменения, "// * ", "");
	СтрокаИзменения = СтрЗаменить(СтрокаИзменения, "// *", "");
	СтрокаИзменения = СтрЗаменить(СтрокаИзменения, "//  + ", "");
	СтрокаИзменения = СтрЗаменить(СтрокаИзменения, "// + ", "");
	СтрокаИзменения = СтрЗаменить(СтрокаИзменения, "// +", "");
	
	РегулярноеВыражение = "\[[А-Яа-яЁё]+\]";
	ПодстрокаЗамены = "";
	
	СтрокаИзменения = СтрЗаменитьПоРегулярномуВыражению(СтрокаИзменения, 
	РегулярноеВыражение, ПодстрокаЗамены);
	
	
	РегулярноеВыражение = "\s(.*)";	
	
	СтрокаИзменения = СтрЗаменитьПоРегулярномуВыражению(СтрокаИзменения, 
	РегулярноеВыражение, ПодстрокаЗамены);
	
	
	Результат = СтрокаИзменения;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьТаблицуИзменений(Команда)
	
	Элементы.ГруппаТаблицаИзменения.Видимость     = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзменения(Команда)
	
	  ОбновитьИзмененияФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзмененияИзОМ(Команда)
	
	ЗагрузитьИзмененияИзОМСервер();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияВОМ(Команда)
	
	ЗаписатьИзмененияВОМСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхПриИзменении(Элемент)
	
	ОбновитьИзмененияФормыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Основная командная панель

&НаКлиенте
Процедура УстановитьВидимостьДекорацийРезультата() 
	
	Элементы.ДекорацияПроведенАнализ.Видимость 	   	 	 = Запись.ПроведенАнализИзменений;
	Элементы.ДекорацияПроведенАнализПустая.Видимость     = Не Запись.ПроведенАнализИзменений;
	
	Элементы.ДекорацияИзмененийНеТребуется.Видимость	   = Запись.ИзмененийНеТребуется;
	Элементы.ДекорацияИзмененийНеТребуетсяПустая.Видимость = Не Запись.ИзмененийНеТребуется;
	
	Элементы.ДекорацияВыполненоИзменение.Видимость 	 	 = Запись.ВыполненоИзменение;	
	Элементы.ДекорацияВыполненоИзменениеПустая.Видимость = Не Запись.ВыполненоИзменение;	
	Элементы.ВыполненоИзменение.Доступность 			 = Не Запись.ИзмененийНеТребуется;
	
КонецПроцедуры

// Функции обновления изменений с данных объекта метаданных

&НаСервере
Процедура ОбновитьИзмененияФормыНаСервере()
	
	АвторСтрока = "";
	ДанныеПоИзменениям = УправлениеУчетомКонфигурацийВызовСервера.ЧтениеВТаблицуЗначенийДанныхПоИзменениям(Запись.КомментарийИзменения, АвторСтрока);
	
	Если ДанныеПоИзменениям = Неопределено Тогда
		// отображение только группы описания
		Элементы.ГруппаКомментарийИзменения.Видимость = Истина;
		Элементы.ГруппаТаблицаИзменения.Видимость     = Ложь;
	Иначе
		Элементы.ГруппаКомментарийИзменения.Видимость = Ложь;
		Элементы.ГруппаТаблицаИзменения.Видимость     = Истина;
		
		ТаблицаИзменений.Загрузить(ДанныеПоИзменениям);
		
		Если АвторСтрока <> "" 
			И АвторСтрока <> Запись.АвторИзменений Тогда
			Запись.АвторИзменений = АвторСтрока;
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзмененияИзОМСервер()

	НайденныеЗаписиИзмененийПоУмолчанию = Запись.ОбъектМетаданных.ИзмененияПоУмолчанию.Найти(Запись.ТипМодуля, "ТипМодуля");
	Если НайденныеЗаписиИзмененийПоУмолчанию <> Неопределено Тогда
	
		Запись.КомментарийИзменения = НайденныеЗаписиИзмененийПоУмолчанию.ИнформацияПоИзменениям;	
	
	КонецЕсли;
	
	Запись.ТегиИзменения = УправлениеУчетомКонфигурацийВызовСервера.ТегиИзДанныхПоИзменениям(Запись.КомментарийИзменения);
	ЭтотОбъект.Модифицированность = Истина;

	ОбновитьИзмененияФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияВОМСервер()

	ОбъектОМ = Запись.ОбъектМетаданных.ПолучитьОбъект();
	ОбъектОМ.Заблокировать();
	НайденноеЗначение = ОбъектОМ.ИзмененияПоУмолчанию.Найти(Запись.ТипМодуля, "ТипМодуля");
	Если НайденноеЗначение <> Неопределено Тогда
		СтрИзменения = НайденноеЗначение;	
	Иначе
		СтрИзменения = ОбъектОМ.ИзмененияПоУмолчанию.Добавить();
	КонецЕсли;
    СтрИзменения.ТипМодуля 				= Запись.ТипМодуля;
    СтрИзменения.ИнформацияПоИзменениям = Запись.КомментарийИзменения;
	
	ОбъектОМ.Записать();
	
КонецПроцедуры

// Обработка результата

&НаСервере
Процедура УстановитьРежимРаботыПослеОбновленияНаВсеСтроки(ВыбранныйРежим)

	 Для каждого стр Из ТаблицаИзменений Цикл
	 
	 	стр.Режим = ВыбранныйРежим;
	 
	 КонецЦикла;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	СохраняемыеЭлементы.Вставить("КомментарийРезультата", Запись.КомментарийРезультата);
	
	Возврат СохранениеВводимыхЗначенийВызовСервера.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоследнююВерсиюИзменений(ОбъектМетаданных, ВерсияКонфигурации, ТипМодуля) 
	
	Результат = РегистрыСведений.УчетВерсийКонфигурации.ПолучитьПоследнююВерсиюИзменений(ОбъектМетаданных, ВерсияКонфигурации, ТипМодуля);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьКлючЗаписи(СтруктураКлюча)

	Возврат РегистрыСведений.УчетВерсийКонфигурации.СоздатьКлючЗаписи(СтруктураКлюча);

КонецФункции // ПолучитьКлючЗаписиДокФизЛиц()

#КонецОбласти

#Область Инициализация

НужноЗаписатьФорму = Ложь;

#КонецОбласти




