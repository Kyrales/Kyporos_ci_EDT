
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтборСписковНачальный();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонфигурацияПриИзменении(Элемент)
	
	УстановитьОтборСписковНачальный();
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПриИзменении(Элемент)
	
	УстановитьОтборСписковНачальный();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		
		Отказ = Истина;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Конфигурация", Конфигурация);
		
		Если Элементы.Список.ТекущиеДанные <> Неопределено 
			И Элементы.Список.ТекущиеДанные.Свойство("ВерсияКонфигурации") Тогда
			ТекущаяВерсияКонфигурации = Элементы.Список.ТекущиеДанные.ВерсияКонфигурации;
		Иначе
			ТекущаяВерсияКонфигурации = ВерсияКонфигурации;
		КонецЕсли;
			ЗначенияЗаполнения.Вставить("ВерсияКонфигурации", ТекущаяВерсияКонфигурации);
		
		Если Элементы.Список.ТекущиеДанные <> Неопределено 
				И Элементы.Список.ТекущиеДанные.Свойство("РазделОбновления") Тогда
			ТекущееЗначениеРазделаОбновления = Элементы.Список.ТекущиеДанные.РазделОбновления;
		Иначе
			ТекущееЗначениеРазделаОбновления = ПредопределенноеЗначение("Справочник.РазделыОбновленийКонфигураций.ПустаяСсылка");
		КонецЕсли;
 		ЗначенияЗаполнения.Вставить("РазделОбновления", ТекущееЗначениеРазделаОбновления);
		МаксимальныйПорядковыйНомер = ПолучитьМаксимальныйПорядковыйНомерСервер(Конфигурация, ТекущаяВерсияКонфигурации, ТекущееЗначениеРазделаОбновления);
		ЗначенияЗаполнения.Вставить("ПорядковыйНомер", МаксимальныйПорядковыйНомер + 1);
		
		
		ЗначенияЗаполнения.Вставить("ДатаДобавления", ОбщегоНазначенияКлиент.ДатаСеанса());
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

		ОткрытьФорму("РегистрСведений.ОписаниеИзмененийКонфигурации.ФормаЗаписи", ПараметрыФормы, Элемент);	

	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПриоритетВверх(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПереместитьПриоритетВверхСервер(ТекущиеДанные.ВерсияКонфигурации, ТекущиеДанные.РазделОбновления, ТекущиеДанные.ПорядковыйНомер);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьПриоритетВверхСервер(ВерсияКонфигурации, РазделОбновления, ПорядковыйНомер)
	
	Если ПорядковыйНомер = 1 Тогда
		Возврат;
	КонецЕсли;
	
	МаксПорядковыйНомер = РегистрыСведений.ОписаниеИзмененийКонфигурации.ПолучитьМаксимальныйПорядковыйНомер(ВерсияКонфигурации.Владелец, 
		ВерсияКонфигурации, РазделОбновления);	
	
	// временно ближайшему присваем Макс+1 номер
	МенеджерЗаписиБлижайшего = РегистрыСведений.ОписаниеИзмененийКонфигурации.СоздатьМенеджерЗаписи();
	МенеджерЗаписиБлижайшего.Конфигурация = ВерсияКонфигурации.Владелец;
	МенеджерЗаписиБлижайшего.ВерсияКонфигурации = ВерсияКонфигурации;
	МенеджерЗаписиБлижайшего.РазделОбновления = РазделОбновления;
	МенеджерЗаписиБлижайшего.ПорядковыйНомер = ПорядковыйНомер - 1;
	МенеджерЗаписиБлижайшего.Прочитать();
	
	Если МенеджерЗаписиБлижайшего.Выбран() Тогда
		МенеджерЗаписиБлижайшего.ПорядковыйНомер = МаксПорядковыйНомер + 1;
		МенеджерЗаписиБлижайшего.Записать();
	КонецЕсли;
	
	// присваем текущий элемент вместо ближайшего
	МенеджерЗаписи = РегистрыСведений.ОписаниеИзмененийКонфигурации.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Конфигурация = ВерсияКонфигурации.Владелец;
	МенеджерЗаписи.ВерсияКонфигурации = ВерсияКонфигурации;
	МенеджерЗаписи.РазделОбновления = РазделОбновления;
	МенеджерЗаписи.ПорядковыйНомер = ПорядковыйНомер;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ПорядковыйНомер = ПорядковыйНомер - 1;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	// возвращаем ближайший вместо заменененного
	МенеджерЗаписиБлижайшего = РегистрыСведений.ОписаниеИзмененийКонфигурации.СоздатьМенеджерЗаписи();
	МенеджерЗаписиБлижайшего.Конфигурация = ВерсияКонфигурации.Владелец;
	МенеджерЗаписиБлижайшего.ВерсияКонфигурации = ВерсияКонфигурации;
	МенеджерЗаписиБлижайшего.РазделОбновления = РазделОбновления;
	МенеджерЗаписиБлижайшего.ПорядковыйНомер = МаксПорядковыйНомер + 1;
	МенеджерЗаписиБлижайшего.Прочитать();
	
	Если МенеджерЗаписиБлижайшего.Выбран() Тогда
		МенеджерЗаписиБлижайшего.ПорядковыйНомер = ПорядковыйНомер;
		МенеджерЗаписиБлижайшего.Записать();
	КонецЕсли;
	
	ОтборДляКлюча = Новый Структура;
	ОтборДляКлюча.Вставить("Конфигурация", ВерсияКонфигурации.Владелец);
	ОтборДляКлюча.Вставить("ВерсияКонфигурации", ВерсияКонфигурации);
	ОтборДляКлюча.Вставить("РазделОбновления", РазделОбновления);
	ОтборДляКлюча.Вставить("ПорядковыйНомер", ПорядковыйНомер - 1);
	
	Ключ = РегистрыСведений.ОписаниеИзмененийКонфигурации.СоздатьКлючЗаписи(ОтборДляКлюча);
	
	Элементы.Список.ТекущаяСтрока = Ключ;
	
КонецПроцедуры // ПереместитьПриоритетВверхСервер()

&НаКлиенте
Процедура ПереместитьПриоритетВниз(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПереместитьПриоритетВнизСервер(ТекущиеДанные.ВерсияКонфигурации, ТекущиеДанные.РазделОбновления, ТекущиеДанные.ПорядковыйНомер);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьПриоритетВнизСервер(ВерсияКонфигурации, РазделОбновления, ПорядковыйНомер)
	
	
	МаксПорядковыйНомер = РегистрыСведений.ОписаниеИзмененийКонфигурации.ПолучитьМаксимальныйПорядковыйНомер(ВерсияКонфигурации.Владелец, 
		ВерсияКонфигурации, РазделОбновления);	
	
	Если МаксПорядковыйНомер = 1 
		Или ПорядковыйНомер = МаксПорядковыйНомер Тогда
		Возврат;
	КонецЕсли;
	
	// временно ближайшему присваем Макс+1 номер
	МенеджерЗаписиБлижайшего = РегистрыСведений.ОписаниеИзмененийКонфигурации.СоздатьМенеджерЗаписи();
	МенеджерЗаписиБлижайшего.Конфигурация = ВерсияКонфигурации.Владелец;
	МенеджерЗаписиБлижайшего.ВерсияКонфигурации = ВерсияКонфигурации;
	МенеджерЗаписиБлижайшего.РазделОбновления = РазделОбновления;
	МенеджерЗаписиБлижайшего.ПорядковыйНомер = ПорядковыйНомер + 1;
	МенеджерЗаписиБлижайшего.Прочитать();
	
	Если МенеджерЗаписиБлижайшего.Выбран() Тогда
		МенеджерЗаписиБлижайшего.ПорядковыйНомер = МаксПорядковыйНомер + 1;
		МенеджерЗаписиБлижайшего.Записать();
	КонецЕсли;
	
	// присваем текущий элемент вместо ближайшего
	МенеджерЗаписи = РегистрыСведений.ОписаниеИзмененийКонфигурации.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Конфигурация = ВерсияКонфигурации.Владелец;
	МенеджерЗаписи.ВерсияКонфигурации = ВерсияКонфигурации;
	МенеджерЗаписи.РазделОбновления = РазделОбновления;
	МенеджерЗаписи.ПорядковыйНомер = ПорядковыйНомер;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ПорядковыйНомер = ПорядковыйНомер + 1;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	// возвращаем ближайший вместо заменененного
	МенеджерЗаписиБлижайшего = РегистрыСведений.ОписаниеИзмененийКонфигурации.СоздатьМенеджерЗаписи();
	МенеджерЗаписиБлижайшего.Конфигурация = ВерсияКонфигурации.Владелец;
	МенеджерЗаписиБлижайшего.ВерсияКонфигурации = ВерсияКонфигурации;
	МенеджерЗаписиБлижайшего.РазделОбновления = РазделОбновления;
	МенеджерЗаписиБлижайшего.ПорядковыйНомер = МаксПорядковыйНомер + 1;
	МенеджерЗаписиБлижайшего.Прочитать();
	
	Если МенеджерЗаписиБлижайшего.Выбран() Тогда
		МенеджерЗаписиБлижайшего.ПорядковыйНомер = ПорядковыйНомер;
		МенеджерЗаписиБлижайшего.Записать();
	КонецЕсли;
	
	
	ОтборДляКлюча = Новый Структура;
	ОтборДляКлюча.Вставить("Конфигурация", ВерсияКонфигурации.Владелец);
	ОтборДляКлюча.Вставить("ВерсияКонфигурации", ВерсияКонфигурации);
	ОтборДляКлюча.Вставить("РазделОбновления", РазделОбновления);
	ОтборДляКлюча.Вставить("ПорядковыйНомер", ПорядковыйНомер + 1);
	
	Ключ = РегистрыСведений.ОписаниеИзмененийКонфигурации.СоздатьКлючЗаписи(ОтборДляКлюча);
	
	Элементы.Список.ТекущаяСтрока = Ключ;
	
КонецПроцедуры // ПереместитьПриоритетВверхСервер()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПечатьОписанияИзменений(Команда)
	
	Если Конфигурация.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Конфигурация не выбрана.'"),, "Конфигурация");
		Возврат;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(Конфигурация);
	Печать(ТабДок, МассивДанных);

	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Истина;
	ТабДок.СохранятьСвойстваОтображения = Истина;
	ТабДок.Показать(НСтр("ru = 'Описание изменений конфигурации'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьHTML_ОписаниеИзменений(Команда)
	
	УправлениеУчетомКонфигурацийКлиент.СохранитьHTMLДокументОписанияИзмененийКонфигурации(Конфигурация, ВерсияКонфигурации);	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьHTML_ОписаниеИзмененийДетально(Команда)
	
	Если ВерсияКонфигурации.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана версия конфигурации в фильтре.'"),, "ВерсияКонфигурации");
		Возврат;
	КонецЕсли;
	
	УправлениеУчетомКонфигурацийКлиент.СохранитьHTMLДокументОписанияИзмененийКонфигурации(Конфигурация, ВерсияКонфигурации, Ложь);		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Установка отбора Списка
&НаКлиенте
Процедура УстановитьОтборСписковНачальный() 
	
	// Список объектов метаданных
	Список.Параметры.УстановитьЗначениеПараметра("Конфигурация", Конфигурация);	
 	Список.Параметры.УстановитьЗначениеПараметра("Версия", ВерсияКонфигурации);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМаксимальныйПорядковыйНомерСервер(Конфигурация, ВерсияКонфигурации, РазделОбновления)

	Возврат РегистрыСведений.ОписаниеИзмененийКонфигурации.ПолучитьМаксимальныйПорядковыйНомер(Конфигурация, ВерсияКонфигурации, РазделОбновления);	

КонецФункции // ПолучитьМаксимальныйПорядковыйНомерСервер()

&НаСервереБезКонтекста
Процедура Печать(ТабДок, ПараметрКоманды)
	
	РегистрыСведений.ОписаниеИзмененийКонфигурации.ПечатьОписанияИзменений(ТабДок, ПараметрКоманды);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ-ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ-ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

//////////////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

