
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьМаксимальныйПорядковыйНомер(Конфигурация, ВерсияКонфигурации, РазделОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОписаниеИзмененийКонфигурации.Конфигурация КАК Конфигурация,
	               |	ОписаниеИзмененийКонфигурации.ВерсияКонфигурации КАК ВерсияКонфигурации,
	               |	ОписаниеИзмененийКонфигурации.РазделОбновления КАК РазделОбновления,
	               |	МАКСИМУМ(ОписаниеИзмененийКонфигурации.ПорядковыйНомер) КАК ПорядковыйНомер
	               |ИЗ
	               |	РегистрСведений.ОписаниеИзмененийКонфигурации КАК ОписаниеИзмененийКонфигурации
	               |ГДЕ
	               |	ОписаниеИзмененийКонфигурации.Конфигурация = &Конфигурация
	               |	И ОписаниеИзмененийКонфигурации.ВерсияКонфигурации = &ВерсияКонфигурации
	               |	И ОписаниеИзмененийКонфигурации.РазделОбновления = &РазделОбновления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОписаниеИзмененийКонфигурации.Конфигурация,
	               |	ОписаниеИзмененийКонфигурации.ВерсияКонфигурации,
	               |	ОписаниеИзмененийКонфигурации.РазделОбновления";
	
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	Запрос.УстановитьПараметр("ВерсияКонфигурации", ВерсияКонфигурации);
	Запрос.УстановитьПараметр("РазделОбновления", РазделОбновления);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.ПорядковыйНомер;
	
	КонецЕсли;
	
	Возврат 0;
   	
КонецФункции // ПолучитьМаксимальныйПорядковыйНомер()

Функция ПолучитьМаксимальнуюВерсиюКонфигурации(Конфигурация) Экспорт
	
	Если (Не ЗначениеЗаполнено(Конфигурация)) 
		Или Конфигурация.Пустая() Тогда
		Возврат Справочники.ВерсииКонфигураций.ПустаяСсылка();	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВерсииКонфигураций.Ссылка КАК Ссылка,
	               |	ВерсииКонфигураций.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ВерсииКонфигураций КАК ВерсииКонфигураций
	               |ГДЕ
	               |	ВерсииКонфигураций.Владелец = &Конфигурация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование УБЫВ";
	
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;
	
	КонецЕсли;
	
	Возврат Справочники.ВерсииКонфигураций.ПустаяСсылка();	
	
КонецФункции // ПолучитьМаксимальнуюВерсиюКонфигурации()

Процедура ПечатьОписанияИзменений(ТабДок, Конфигурация) Экспорт
	
	Макет = РегистрыСведений.ОписаниеИзмененийКонфигурации.ПолучитьМакет("ТиповойМакетОписаниеИзменений");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОписаниеИзмененийКонфигурации.Конфигурация КАК Конфигурация,
	|	ОписаниеИзмененийКонфигурации.ВерсияКонфигурации КАК ВерсияКонфигурации,
	|	ОписаниеИзмененийКонфигурации.РазделОбновления КАК РазделОбновления,
	|	ОписаниеИзмененийКонфигурации.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ОписаниеИзмененийКонфигурации.ДатаДобавления КАК ДатаДобавления,
	|	ОписаниеИзмененийКонфигурации.ОписаниеИзменения КАК ОписаниеИзменения,
	|	ОписаниеИзмененийКонфигурации.ТипИзменения КАК ТипИзменения
	|ИЗ
	|	РегистрСведений.ОписаниеИзмененийКонфигурации КАК ОписаниеИзмененийКонфигурации
	|ГДЕ
	|	ОписаниеИзмененийКонфигурации.Конфигурация В(&Конфигурация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОписаниеИзмененийКонфигурации.ВерсияКонфигурации.Наименование УБЫВ,
	|	ОписаниеИзмененийКонфигурации.РазделОбновления.Наименование,
	|	ОписаниеИзмененийКонфигурации.ПорядковыйНомер
	|ИТОГИ ПО
	|	ВерсияКонфигурации,
	|	РазделОбновления";
	Запрос.Параметры.Вставить("Конфигурация", Конфигурация);
	
	ВыборкаВерсияКонфигурации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ОбластьШапкаВерсияКонфигурация = Макет.ПолучитьОбласть("ШапкаВерсияКонфигурация");
	ОбластьШапкаРазделОбновления   = Макет.ПолучитьОбласть("ШапкаРазделОбновления");
	ОбластьДетальнаяЗаписьОписания = Макет.ПолучитьОбласть("ДетальнаяЗаписьОписания");
	
	ТабДок.Очистить();
 	ТабДок.НачатьАвтогруппировкуСтрок();
    сч = 0;
	Пока ВыборкаВерсияКонфигурации.Следующий() Цикл
        сч = сч + 1;
		
		ОткрытаГруппировка = сч = 1;
		
		ОбластьШапкаВерсияКонфигурация.Параметры.Заполнить(ВыборкаВерсияКонфигурации);
		ТабДок.Вывести(ОбластьШапкаВерсияКонфигурация, ВыборкаВерсияКонфигурации.Уровень(),, ОткрытаГруппировка);
		
		// раздел обновления
		ВыборкаРазделОбновления = ВыборкаВерсияКонфигурации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРазделОбновления.Следующий() Цикл
			ОбластьШапкаРазделОбновления.Параметры.Заполнить(ВыборкаРазделОбновления);
			ТабДок.Вывести(ОбластьШапкаРазделОбновления, ВыборкаРазделОбновления.Уровень(),, ОткрытаГруппировка);
			
			// описание изменений
			Выборка = ВыборкаРазделОбновления.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбластьДетальнаяЗаписьОписания.Параметры.Заполнить(Выборка);
				ТабДок.Вывести(ОбластьДетальнаяЗаписьОписания, Выборка.Уровень(),, ОткрытаГруппировка);
			КонецЦикла;
	
		КонецЦикла;
		
	КонецЦикла;
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

