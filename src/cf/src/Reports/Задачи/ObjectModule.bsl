//{{ *Олег Каратаев >>>>>>>>>>>>>>>>>>>>>>> ОПИСАНИЕ ИЗМЕНЕНИЙ >>>>>>>>>>>>>>>>>>>>>>>>>>>
// 
// НОВЫЕ/ИЗМЕНЕННЫЕ МЕТАДАННЫЕ ОБЪЕКТА 
//  * [ОсновнаяСхемаКомпоновкиДанных] - изменено под использование ЗадачиПользователя
// 
// НОВЫЕ/ИЗМЕНЕННЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// 
// ТЕГИ ИЗМЕНЕНИЙ
//
//}} *Олег Каратаев <<<<<<<<<<<<<<<<<<<<<<< ОПИСАНИЕ ИЗМЕНЕНИЙ <<<<<<<<<<<<<<<<<<<<<<<<<<<

// Разделитель описания изменений модуля объекта >> *Олег Каратаев
Перем ИзмененияМодуля;

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	СрокИсполнения = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Найти("СрокИсполнения");
	СрокИсполнения.Оформление.УстановитьЗначениеПараметра("Формат", ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D"));
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВыводаКонтекстаОтчета

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - см. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.ФормироватьСразу = Истина;
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
// См. также УправляемаяФорма.ПриСозданииНаСервере в синтакс-помощнике.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Форма.Параметры, "ПараметрКоманды");
	
	ДатаНачалаВыполнения = '00010101';
	ДатаОкончанияВыполнения = '00010101';
	
	Если ТипЗнч(МассивСсылок) = Тип("Массив") 
		И МассивСсылок.Количество() > 0 Тогда
		
		Если ТипЗнч(МассивСсылок[0]) <> Тип("ДокументСсылка.АктыВыполненныхРабот") Тогда
			Возврат;
		КонецЕсли;
		
		// Заполнение параметров организации и проектов из документов "АктыВыполненныхРабот" для отбора в отчете.
		МассивОрганизаций = Новый Массив;
		МассивПроектов = Новый Массив;
		
		
		ЗначенияРеквизитовОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, "Организация, Проект, Дата");
		Для Каждого Ссылка Из МассивСсылок Цикл
			
			Значения = ЗначенияРеквизитовОбъектов.Получить(Ссылка);
			Если МассивОрганизаций.Найти(Значения.Организация) = Неопределено Тогда
				МассивОрганизаций.Добавить(Значения.Организация);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Значения.Проект) 
				И МассивОрганизаций.Найти(Значения.Проект) = Неопределено Тогда
				МассивПроектов.Добавить(Значения.Проект);
			КонецЕсли;
			
			Если ДатаНачалаВыполнения = '00010101' Тогда
				ДатаНачалаВыполнения 	= НачалоГода(Значения.Дата);
				ДатаОкончанияВыполнения = Значения.Дата;
			Иначе
				ДатаНачалаВыполнения 	= Мин(ДатаНачалаВыполнения, НачалоМесяца(Значения.Дата));
				ДатаОкончанияВыполнения = Макс(ДатаОкончанияВыполнения, Значения.Дата);
			КонецЕсли;
			
			ДатаНачалаВыполнения 	= Мин(ДатаНачалаВыполнения, НачалоМесяца(Значения.Дата));
			ДатаОкончанияВыполнения = Макс(ДатаОкончанияВыполнения, Значения.Дата);
		
		КонецЦикла;
		
		ДанныеПоЗадачам = ДанныеПоЗадачамАктовВыполненныхРабот(МассивСсылок);
		Форма.ФормаПараметры.Отбор.Вставить("Ссылка", ДанныеПоЗадачам.МассивЗадач);
		
		//Форма.ФормаПараметры.Отбор.Вставить("Организация", МассивОрганизаций);
		//Если МассивПроектов.Количество() > 0 Тогда
		//	Форма.ФормаПараметры.Отбор.Вставить("Проект", МассивПроектов);
		//КонецЕсли;
		
		ПериодВыполненияЗадач = Новый СтандартныйПериод;
		ПериодВыполненияЗадач.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		ПериодВыполненияЗадач.ДатаНачала = ДанныеПоЗадачам.ДатаНачалаВыполнения;
		ПериодВыполненияЗадач.ДатаОкончания = ДатаОкончанияВыполнения;
		
		Форма.ФормаПараметры.Отбор.Вставить("ПериодВыполненияЗадач", ПериодВыполненияЗадач);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПоЗадачамАктовВыполненныхРабот(СписокСсылок)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("МассивЗадач", Новый Массив);
	СтруктураДанных.Вставить("ДатаНачалаВыполнения", '00010101');

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АктыВыполненныхРаботСписокЗадач.Задача КАК Задача,
	               |	МИНИМУМ(АктыВыполненныхРаботСписокЗадач.Задача.ДатаВыполнения) КАК ЗадачаДатаВыполнения
	               |ИЗ
	               |	Документ.АктыВыполненныхРабот.СписокЗадач КАК АктыВыполненныхРаботСписокЗадач
	               |ГДЕ
	               |	АктыВыполненныхРаботСписокЗадач.Ссылка В (&СписокСсылок)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АктыВыполненныхРаботСписокЗадач.Задача
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗадачаДатаВыполнения";
	
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	
	Результат = Запрос.Выполнить();
	ТаблицаДанных = Результат.Выгрузить();
	МассивЗадач = ТаблицаДанных.ВыгрузитьКолонку("Задача");
	
	Если МассивЗадач.Количество() > 0 Тогда
		
		СтруктураДанных.ДатаНачалаВыполнения = ТаблицаДанных[0].ЗадачаДатаВыполнения;
		СтруктураДанных.МассивЗадач = МассивЗадач;
	
	КонецЕсли;
	
	Возврат СтруктураДанных;

КонецФункции // ЗадачиАктовВыполненныхРабот()

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
