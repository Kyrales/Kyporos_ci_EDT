
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//////////////////////////////////////////////////////////////////////////////////////////
// БСП

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 1;
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Счет";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 2;
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "БанковскийСчетОтветственного", , ВидСравненияКомпоновкиДанных.Заполнено);
	
	Если Не Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		
		// Комплект документов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Акт,Счет";
		КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ФиксированныйКомплект = Ложь;
		КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
		КомандаПечати.Картинка = БиблиотекаКартинок.УровеньДоступаИспользованиеИАдминистрированиеИсточника;
		КомандаПечати.Порядок = 75;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Печать акта выполненных работ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		
		ПараметрыПечати.Вставить("ВидДокументаПечати",  "АктыВыполненныхРабот");
		ПараметрыПечати.Вставить("ИмяПараметровПечати", "ПАРАМЕТРЫ_ПЕЧАТИ_АктыВыполненныхРабот_Акт");
		ПараметрыПечати.Вставить("ИмяМакетаПечати",     "Документ.АктыВыполненныхРабот.ПФ_MXL_Акт");

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Акт",
			НСтр("ru = 'Печать акта'"),
			ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
				
	КонецЕсли;
	
	// Печать счета на оплату.
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Счет");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ВыводитьПлатежныеРеквизиты = Истина;
		
		ПечатнаяФорма.ТабличныйДокумент = ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, "Счет", ВыводитьПлатежныеРеквизиты);
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Счет на оплату'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.АктыВыполненныхРабот.ПФ_MXL_СчетЗаказ";
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// Печать акта об оказании услуг, с поддержкой вставки подписей и печатей
//
// Параметры:
//  МассивОбъектов - Массив - объекты, по которым требуется сформировать печатную форму				  
//  ОбъектыПечати  - СписокЗначений - разметка табличных документов по печатаемым объектам:
//   * Значение      - ЛюбаяСсылка - печатаемый объект;
//   * Представление - Строка - имя области, соответствующее объекту.
//  СтруктураПараметровПечати 
// 
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, СтруктураПараметровПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// - Заполнение сведений об акте.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АктыВыполненныхРабот.Ссылка КАК Документ,
	               |	АктыВыполненныхРабот.ПометкаУдаления КАК ПометкаУдаления,
	               |	АктыВыполненныхРабот.Номер КАК НомерДокумента,
	               |	АктыВыполненныхРабот.Дата КАК ДатаДокумента,
	               |	АктыВыполненныхРабот.Проведен КАК Проведен,
	               |	АктыВыполненныхРабот.Ответственный КАК Поставщик,
	               |	АктыВыполненныхРабот.Организация КАК Получатель,
	               |	АктыВыполненныхРабот.Организация.ПолноеНаименование КАК ПредставлениеПолучатель,
	               |	АктыВыполненныхРабот.Проект КАК ПредставлениеДоговора,
	               |	АктыВыполненныхРабот.Организация КАК Организация,
	               |	""руб"" КАК Валюта,
	               |	""руб"" КАК ВалютаНаименование,
	               |	ЛОЖЬ КАК СуммаВключаетНДС,
	               |	АктыВыполненныхРабот.Статус КАК Статус,
	               |	АктыВыполненныхРабот.ДатаСтатуса КАК ДатаСтатуса,
	               |	АктыВыполненныхРабот.Оплачено КАК Оплачено,
	               |	АктыВыполненныхРабот.ДатаОплаты КАК ДатаОплаты,
	               |	АктыВыполненныхРабот.СуммаОплаты КАК СуммаОплаты,
	               |	АктыВыполненныхРабот.ДругаяСуммаСогласована КАК ДругаяСуммаСогласована,
	               |	АктыВыполненныхРабот.Комментарий КАК Комментарий,
	               |	АктыВыполненныхРабот.Организация.Руководитель КАК ПредставительЗаказчика,
	               |	АктыВыполненныхРабот.Организация.ДолжностьРуководителя КАК ПредставительЗаказчикаДолжность
	               |ИЗ
	               |	Документ.АктыВыполненныхРабот КАК АктыВыполненныхРабот
	               |ГДЕ
	               |	АктыВыполненныхРабот.Ссылка В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АктыВыполненныхРаботСписокЗадач.Ссылка КАК Документ,
	               |	""СписокЗадач"" КАК ТабличнаяЧасть,
	               |	АктыВыполненныхРаботСписокЗадач.НомерСтроки КАК НомерСтроки,
	               |	АктыВыполненныхРаботСписокЗадач.Задача КАК Номенклатура,
	               |	АктыВыполненныхРаботСписокЗадач.Задача.Номер КАК НоменклатураКод,
	               |	АктыВыполненныхРаботСписокЗадач.Задача.Наименование КАК НоменклатураНаименование,
	               |	АктыВыполненныхРаботСписокЗадач.Трудоемкость КАК Количество,
	               |	АктыВыполненныхРаботСписокЗадач.Исполнитель КАК Исполнитель,
	               |	""шт"" КАК ЕдиницаИзмерения,
	               |	""шт"" КАК ЕдиницаИзмеренияКод,
	               |	""шт"" КАК ЕдиницаИзмеренияНаименование,
	               |	АктыВыполненныхРаботСписокЗадач.Сумма КАК Сумма,
	               |	АктыВыполненныхРаботСписокЗадач.Сумма КАК СуммаБезНДС,
	               |	0 КАК СуммаНДС,
	               |	""-"" КАК СтавкаНДС,
	               |	АктыВыполненныхРаботСписокЗадач.Сумма КАК СуммаСНДС,
	               |	АктыВыполненныхРаботСписокЗадач.Задача.Проект.СтоимостьЧаса КАК Цена,
	               |	АктыВыполненныхРаботСписокЗадач.Задача.ПолучательУслуг КАК ПолучательУслуг,
	               |	АктыВыполненныхРаботСписокЗадач.Задача.ДатаНачала КАК ДатаНачала,
	               |	АктыВыполненныхРаботСписокЗадач.Задача.ДатаВыполнения КАК ДатаВыполнения
	               |ИЗ
	               |	Документ.АктыВыполненныхРабот.СписокЗадач КАК АктыВыполненныхРаботСписокЗадач
	               |ГДЕ
	               |	АктыВыполненныхРаботСписокЗадач.Ссылка В(&МассивОбъектов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	АктыВыполненныхРаботСписокЗадач.Задача.ДатаВыполнения,
	               |	АктыВыполненныхРаботСписокЗадач.Задача.ДатаНачала";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	СтрокиДокументов = РезультатыЗапроса[1].Выгрузить();
	
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	СведенияАктаОбОказанииУслуг = ПолучитьОписаниеАктаОбОказанииУслуг();
	
	Пока Выборка.Следующий() Цикл
	
		СведенияОДокументе = СведенияАктаОбОказанииУслуг.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		СведенияОДокументе.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СведенияОДокументе.НомерДокумента, Истина, Истина);
		
		ТаблицаДокумента = ПолучитьОписаниеТаблицыАктаОбОказанииУслуг();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
			СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
			
		КонецЦикла;
	
	КонецЦикла;
	
	
	// - Заполнение макета печатной формы.
	
	// доп.параметры
	ДополнительнаяКолонкаПечатныхФормДокументов = "Код";
	ВыводитьКоды = Ложь;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= СтруктураПараметровПечати.ИмяПараметровПечати;

	Макет = УправлениеПечатью.МакетПечатнойФормы(СтруктураПараметровПечати.ИмяМакетаПечати);
	
	ПервыйДокумент = Истина;
	
	Для Каждого СведенияОДокументе Из СведенияАктаОбОказанииУслуг Цикл
		
		Если Не ЗначениеЗаполнено(СведенияОДокументе.ТаблицаДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ЭтоПечатьЗаПоставщика = СтруктураПараметровПечати.ВидДокументаПечати	 = "ПоступлениеИзПереработки"
								ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "ПоступлениеТоваровУслуг"
								ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "КорректировкаПоступления"
								ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "ПоступлениеДопРасходов";
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаУслуги = СведенияОДокументе.ТаблицаДокумента;
		
		// Выводим шапку документа
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ДанныеПечатиЗаголовок = Новый Структура("ТекстЗаголовка, ТекстЗаголовкаИсправления");
		ТекстЗаголовка = НСтр("ru='Акт № %1 от %2 г.'");
		НомерДокумента = СведенияОДокументе.НомерДокумента;
		ТекстЗаголовка = СтрШаблон(ТекстЗаголовка, 
			НомерДокумента, 
			Формат(СведенияОДокументе.ДатаДокумента, "ДФ='дд ММММ гггг'"));
		ДанныеПечатиЗаголовок.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		Если СтруктураПараметровПечати.ВидДокументаПечати = "КорректировкаРеализации" ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "КорректировкаПоступления" Тогда
			ТекстЗаголовкаИсправления = НСтр("ru='Исправление № %1 от %2 г.'");
			ТекстЗаголовкаИсправления = СтрШаблон(ТекстЗаголовкаИсправления, 
				СведенияОДокументе.НомерИсправления, 
				Формат(СведенияОДокументе.ДатаИсправления, "ДФ='дд ММММ гггг'"));
			ДанныеПечатиЗаголовок.Вставить("ТекстЗаголовкаИсправления", ТекстЗаголовкаИсправления);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиЗаголовок);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ПредставлениеВДокументах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.Поставщик, "ПредставлениеВДокументах");
		
		ПредставлениеПоставщика = ?(ЗначениеЗаполнено(ПредставлениеВДокументах), ПредставлениеВДокументах, СведенияОДокументе.Поставщик) ; // исполнитель
			
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ДанныеПечатиПоставщик = Новый Структура;
		ДанныеПечатиПоставщик.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		ДанныеПечатиПоставщик.Вставить("Поставщик", СведенияОДокументе.Поставщик);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПоставщик);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("Получатель") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Получатель");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		КонецЕсли;
		
		ИННПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.Получатель, "ИНН");
		Если ЗначениеЗаполнено(ИННПолучателя) Тогда
			ПредставлениеПолучателя = СтрШаблон(НСтр("ru = '%1, ИНН %2'"), СведенияОДокументе.ПредставлениеПолучатель, ИННПолучателя); ; // получатель услуг организация
		Иначе
			ПредставлениеПолучателя = СтрШаблон(НСтр("ru = '%1'"), СведенияОДокументе.ПредставлениеПолучатель); ; // получатель услуг организация
		КонецЕсли;
		
		ДанныеПечатиПолучатель = Новый Структура;
		ДанныеПечатиПолучатель.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
		ДанныеПечатиПолучатель.Вставить("Получатель", СведенияОДокументе.Получатель);
		ДанныеПечатиПолучатель.Вставить("Основание", СведенияОДокументе.ПредставлениеДоговора);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПолучатель);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Инициализация счетчика строк
		НомерСтроки = 0;
		
		// Выводим заголовок многострочной части
		ОбластьШапки = ?(ВыводитьКоды, "ШапкаСКодом", "ШапкаТаблицы");
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
		ДанныеПечатиКод = Новый Структура;
		Если ДополнительнаяКолонкаПечатныхФормДокументов = "Артикул" Тогда
			ДанныеПечатиКод.Вставить("ИмяКодАртикул", "Артикул");
		ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = "Код" Тогда
			ДанныеПечатиКод.Вставить("ИмяКодАртикул", "Код");
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиКод);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьСтроки = ?(ВыводитьКоды, "СтрокаСКодом", "Строка");
		ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);

		// Выводим многострочную часть документа
		Для каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			СтруктураПараметры = Новый Структура();
			СтруктураПараметры.Вставить("НомерСтроки", 				НомерСтроки);
			ПредставлениеЗадачи = СтрШаблон(НСтр("ru = 'Задача ""%1"" (%2) | %3| %4'"), 
				СокрЛП(СтрокаТабличнойЧасти.НоменклатураНаименование), 
				СтрокаТабличнойЧасти.НоменклатураКод,
				СтрокаТабличнойЧасти.ПолучательУслуг,
				СтрокаТабличнойЧасти.ДатаВыполнения);
			СтруктураПараметры.Вставить("НоменклатураНаименование", ПредставлениеЗадачи);
			СтруктураПараметры.Вставить("Товар", 				   	СокрЛП(СтрокаТабличнойЧасти.НоменклатураНаименование));
			СтруктураПараметры.Вставить("Номенклатура", 			СтрокаТабличнойЧасти.Номенклатура);
			СтруктураПараметры.Вставить("Количество", 				СтрокаТабличнойЧасти.Количество);
			СтруктураПараметры.Вставить("ЕдиницаИзмерения", 		СтрокаТабличнойЧасти.ЕдиницаИзмеренияНаименование);
			СтруктураПараметры.Вставить("Цена", 				   	СтрокаТабличнойЧасти.Цена);
			СтруктураПараметры.Вставить("Сумма", 				   	СтрокаТабличнойЧасти.Сумма);
			
			Если ВыводитьКоды Тогда
				СтруктураПараметры.Вставить("НоменклатураКод", 		СтрокаТабличнойЧасти.НоменклатураКод);
				СтруктураПараметры.Вставить("КодАртикул", 			СтрокаТабличнойЧасти.НоменклатураКод);
			КонецЕсли;
		
			ОбластьСтроки.Параметры.Заполнить(СтруктураПараметры);
	
			ТабличныйДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;

		// Выводим подвал документа
		Если ТаблицаУслуги <> Неопределено Тогда
			Сумма    = ТаблицаУслуги.Итог("Сумма");
			СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
		Иначе
			Сумма    = 0;
			СуммаНДС = 0;
		КонецЕсли;

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", ОбщегоНазначенияКупоросВызовСервера.ФорматСумм(Сумма)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ДанныеПечатиИтогоНДС = Новый Структура("ВсегоНДС, НДС");
		Если СуммаНДС <> 0 Тогда
			ДанныеПечатиИтогоНДС.ВсегоНДС = ОбщегоНазначенияКупоросВызовСервера.ФорматСумм(СуммаНДС);
			ДанныеПечатиИтогоНДС.НДС      = ?(СведенияОДокументе.СуммаВключаетНДС, НСтр("ru='В том числе НДС'"), НСтр("ru='Сумма НДС'"));
		Иначе
			ДанныеПечатиИтогоНДС.ВсегоНДС = НСтр("ru='-'");
			ДанныеПечатиИтогоНДС.НДС      = НСтр("ru='Без налога (НДС)'");
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиИтогоНДС);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СуммаКПрописи = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ИтоговаяСтрока = НСтр("ru='Всего оказано услуг %1, на сумму %2'");
		ИтоговаяСтрока = СтрШаблон(ИтоговаяСтрока, НомерСтроки, ОбщегоНазначенияКупоросВызовСервера.ФорматСумм(СуммаКПрописи, СведенияОДокументе.ВалютаНаименование));
		СуммаПрописью  = ОбщегоНазначенияКупоросВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Новый Структура("ПараметрыПрописи", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"));
		ДанныеПечатиСуммаПрописью = Новый Структура;
		ДанныеПечатиСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ДанныеПечатиСуммаПрописью.Вставить("СуммаПрописью", СуммаПрописью);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Выводим подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		Если ЭтоПечатьЗаПоставщика Тогда
			ЗаместительПоПриказу = "";
		Иначе
			ЗаРуководителяНаОсновании = ?(ПустаяСтрока(СведенияОДокументе.ЗаРуководителяНаОснованииНаименование), "" , ", " + СведенияОДокументе.ЗаРуководителяНаОснованииНаименование);
			ЗаместительПоПриказу = СведенияОДокументе.РуководительФИО + ЗаРуководителяНаОсновании;
		КонецЕсли;

		Если НЕ ЭтоПечатьЗаПоставщика И ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжностьНаименование) И ЗначениеЗаполнено(ПредставлениеПоставщика) Тогда 
			ДолжностьИНазваниеОрганизации = СведенияОДокументе.РуководительДолжностьНаименование + " " + ПредставлениеПоставщика;
		ИначеЕсли НЕ ЭтоПечатьЗаПоставщика И ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжностьНаименование) Тогда 
			ДолжностьИНазваниеОрганизации = СведенияОДокументе.РуководительДолжностьНаименование;
		Иначе
			ДолжностьИНазваниеОрганизации = ПредставлениеПоставщика;
		КонецЕсли;
		
		ПредставлениеЗаказчика = ПредставлениеПолучателя;
		ДанныеПечатиПодписи = Новый Структура;
		ДанныеПечатиПодписи.Вставить("НазваниеЗаказчика", ПредставлениеЗаказчика);
		
		Если НЕ ЭтоПечатьЗаПоставщика Тогда
			Если ЗначениеЗаполнено(СведенияОДокументе.ЗаЗаказчикаНаОсновании) Тогда
				ПредставительЗаказчика = СведенияОДокументе.ПредставительЗаказчика+", "+СведенияОДокументе.ЗаЗаказчикаНаОсновании;
			Иначе
				ПредставительЗаказчика = СведенияОДокументе.ПредставительЗаказчика;
			КонецЕсли;
			ДанныеПечатиПодписи.Вставить("ПредставительЗаказчика", ПредставительЗаказчика);
		Иначе
			ЗаРуководителяНаОсновании = ?(ПустаяСтрока(СведенияОДокументе.ЗаРуководителяНаОснованииНаименование), "" , ", " + СведенияОДокументе.ЗаРуководителяНаОснованииНаименование);
			ДанныеПечатиПодписи.Вставить("ПредставительЗаказчика", СведенияОДокументе.РуководительФИО + ЗаРуководителяНаОсновании);
		КонецЕсли;
		
		ДанныеПечатиПодписи.Вставить("ДолжностьИНазваниеОрганизации", ДолжностьИНазваниеОрганизации);
		ДанныеПечатиПодписи.Вставить("ЗаместительПоПриказу", ЗаместительПоПриказу);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПодписи);

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);
			
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Процедура печати счета
//
// Параметры:
//  МассивОбъектов - Массив - объекты, по которым требуется сформировать печатную форму
//  ОбъектыПечати  - СписокЗначений - разметка табличных документов по печатаемым объектам:
//   * Значение      - ЛюбаяСсылка - печатаемый объект;
//   * Представление - Строка - имя области, соответствующее объекту.
//  ИмяМакета      - Строка - "Счет" или "Заказ".
//  ВыводитьПлатежныеРеквизиты - Булево - если Истина, выводит шапку с платежными реквизитами в счете.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, ИмяМакета = "Счет", ВыводитьПлатежныеРеквизиты = Истина) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктыВыполненныхРабот.Ссылка КАК Ссылка,
	|	АктыВыполненныхРабот.Номер КАК Номер,
	|	АктыВыполненныхРабот.Дата КАК Дата,
	|	ЛОЖЬ КАК СуммаВключаетНДС,
	|	АктыВыполненныхРабот.БанковскийСчетОтветственного.Валюта КАК ВалютаДокумента,
	|	АктыВыполненныхРабот.Дата КАК ДатаДокумента,
	|	АктыВыполненныхРабот.БанковскийСчетОтветственного КАК БанковскийСчет,
	|	АктыВыполненныхРабот.Организация КАК Контрагент,
	|	АктыВыполненныхРабот.Организация.ПолноеНаименование КАК ПредставлениеКонтрагента,
	|	АктыВыполненныхРабот.Ответственный.Организация КАК Организация,
	|	АктыВыполненныхРабот.СписокЗадач.(
	|		Задача.Наименование КАК Товар,
	|		Задача.Проект.СтоимостьЧаса КАК Цена,
	|		Сумма КАК Сумма,
	|		0 КАК СуммаНДС,
	|		Трудоемкость КАК Количество,
	|		НомерСтроки КАК НомерСтроки,
	|		Задача КАК Номенклатура
	|	) КАК Товары,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.БИКБанка
	|		ИНАЧЕ КлассификаторБанков.Код
	|	КОНЕЦ КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанков.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанков.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскийСчетКонтрагента.ГородБанка
	|		ИНАЧЕ КлассификаторБанков.Город
	|	КОНЕЦ КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскийСчетКонтрагента.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ КАК ГородБанкаДляРасчетов,
	|	АктыВыполненныхРабот.Ответственный.Организация.Наименование КАК ПолучательНаименованиеПолное,
	|	БанковскийСчетКонтрагента.НомерСчета КАК ПолучательНомерСчета,
	|	АктыВыполненныхРабот.Ответственный.Организация.ИНН КАК ИНН,
	|	АктыВыполненныхРабот.Ответственный.Организация.КПП КАК КПП,
	|	АктыВыполненныхРабот.Ответственный.Организация.Руководитель КАК Директор,
	|	АктыВыполненныхРабот.Ответственный.Организация.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	АктыВыполненныхРабот.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.АктыВыполненныхРабот КАК АктыВыполненныхРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО АктыВыполненныхРабот.БанковскийСчетОтветственного.Банк = КлассификаторБанков.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|		ПО АктыВыполненныхРабот.БанковскийСчетОтветственного.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскийСчетКонтрагента
	|		ПО АктыВыполненныхРабот.БанковскийСчетОтветственного = БанковскийСчетКонтрагента.Ссылка
	|ГДЕ
	|	АктыВыполненныхРабот.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	АктыВыполненныхРабот.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетНаОплату_СчетЗаказ";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктыВыполненныхРабот.ПФ_MXL_СчетЗаказ");
	
	Пока Шапка.Следующий() Цикл
		
		КонтактнаяИнформация = КонтактнаяИнформацияДляСчета(Шапка.Организация, Шапка.Дата);
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ДанныеПечати.Вставить("ИНН", Шапка.ИНН);
		ДанныеПечати.Вставить("КПП", Шапка.КПП);
		
		Если ПустаяСтрока(Шапка.БИКБанкаДляРасчетов) Тогда
			ДанныеПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Шапка.НаименованиеБанка) + " " + СокрЛП(Шапка.ГородБанка));
			ДанныеПечати.Вставить("ПредставлениеПоставщикаЗаголовок", СокрЛП(Шапка.ПолучательНаименованиеПолное));
			ДанныеПечати.Вставить("БИКБанкаПолучателя", СокрЛП(Шапка.БИКБанк));
			ДанныеПечати.Вставить("СчетБанкаПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанка));
			ДанныеПечати.Вставить("СчетПолучателяПредставление", СокрЛП(Шапка.ПолучательНомерСчета));
		Иначе
			ДанныеПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Шапка.НаименованиеБанкаДляРасчетов) + " " 
				+ СокрЛП(Шапка.ГородБанкаДляРасчетов));
				ДанныеПечати.Вставить("ПредставлениеПоставщикаЗаголовок", 
				СтрШаблон(
				НСтр("ru = '%1 р/с %2 в %3'"),
				СокрЛП(Шапка.ПолучательНаименованиеПолное),
				СокрЛП(Шапка.ПолучательНомерСчета),
				СокрЛП(Шапка.ГородБанка)));
			ДанныеПечати.Вставить("БИКБанкаПолучателя", СокрЛП(Шапка.БИКБанкаДляРасчетов));
			ДанныеПечати.Вставить("СчетБанкаПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанкаДляРасчетов));
			ДанныеПечати.Вставить("СчетПолучателяПредставление", СокрЛП(Шапка.КоррСчетБанка));
		КонецЕсли;	
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(
			Шапка, ?(ИмяМакета = "Счет", 
			НСтр("ru = 'Счет на оплату'"),
			НСтр("ru = 'Заказ покупателя'")));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("Поставщик", Строка(Шапка.Организация) + " " + КонтактнаяИнформация.ЮридическийАдрес);
		
		ПредставлениеВДокументах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.Ответственный, "ПредставлениеВДокументах");
		ПредставлениеПоставщика = ?(ЗначениеЗаполнено(ПредставлениеВДокументах), ПредставлениеВДокументах, Шапка.Ответственный) ; // исполнитель
		
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		ДанныеПечати.Вставить("Получатель", Шапка.Контрагент );
		
		ИННКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.Контрагент, "ИНН");
		Если ЗначениеЗаполнено(ИННКонтрагент) Тогда
			ПредставлениеПолучателя = СтрШаблон(НСтр("ru = '%1, ИНН %2'"), Шапка.ПредставлениеКонтрагента, ИННКонтрагент); ; // получатель услуг организация
		Иначе
			ПредставлениеПолучателя = СтрШаблон(НСтр("ru = '%1'"), Шапка.ПредставлениеКонтрагента); ; // получатель услуг организация
		КонецЕсли;
		ДанныеПечати.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
		
		ТаблицаТовары = Шапка.Товары.Выгрузить();
		ДанныеПечати.Вставить("Всего", ТаблицаТовары.Итог("Сумма"));
		ДанныеПечати.Вставить("ВсегоНДС", ТаблицаТовары.Итог("СуммаНДС"));
		
		ДанныеПечати.Вставить("ИтоговаяСумма", ДанныеПечати.Всего + ?(Шапка.СуммаВключаетНДС, 0, ДанныеПечати.ВсегоНДС));
		
		// определение валюты
		ДанныеПечати.Вставить("СуммаПрописью", "");
		ВалютаДокумента = Шапка.ВалютаДокумента;
		ВалютаДокумента = ?(ЗначениеЗаполнено(ВалютаДокумента), ВалютаДокумента, Справочники.Валюты.НайтиПоКоду("643")); 
		Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ДанныеПечати.Вставить("СуммаПрописью", 
				РаботаСКурсамиВалют.СформироватьСуммуПрописью(ДанныеПечати.ИтоговаяСумма, ВалютаДокумента));
		КонецЕсли;
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
		СтрШаблон(
			НСтр("ru = 'Всего наименований %1, на сумму %2'"),
			Формат(ТаблицаТовары.Количество(), "ЧН=0; ЧГ=0"),
		ДанныеПечати.СуммаПрописью));
		ДанныеПечати.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'")));
		
		ДанныеПечати.Вставить("ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(Шапка.Директор)));
		ДанныеПечати.Вставить("ФИОБухгалтера", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(Шапка.ГлавныйБухгалтер)));
		
		МассивОбластейМакета = Новый Массив;
		
		Если ИмяМакета = "Счет" И ВыводитьПлатежныеРеквизиты Тогда
			МассивОбластейМакета.Добавить("ЗаголовокСчета");
		КонецЕсли;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("Поставщик");
		МассивОбластейМакета.Добавить("Покупатель");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");
		МассивОбластейМакета.Добавить("Итого");
		МассивОбластейМакета.Добавить("ИтогоНДС");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить(?(ИмяМакета = "Счет", "ПодвалСчета", "ПодвалЗаказа"));
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			Иначе
				Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//      ** Имя            - Строка - Уникальное имя общего реквизита.
//      ** Представление  - Строка - Представление общего реквизита.
//      ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//      ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//      ** Имя            - Строка - Уникальное имя вложения.
//      ** Представление  - Строка - Представление варианта.
//      ** ТипФайла       - Строка - Тип вложения: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
//@skip-warning
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
//@skip-warning
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
//@skip-warning
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
//@skip-warning
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//  КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//  Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
//@skip-warning
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

//////////////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ПЕЧАТНЫХ ФОРМ

Функция ПолучитьОписаниеАктаОбОказанииУслуг() Экспорт
	
	ТипОрганизацияКонтрагент = Новый Массив();
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Пользователи"));
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Организации"));
	
	ТипДокументы = Новый Массив();
	ТипДокументы.Добавить(Тип("ДокументСсылка.АктыВыполненныхРабот"));
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Документ",	 				Новый ОписаниеТипов(ТипДокументы));
	Таблица.Колонки.Добавить("ДатаДляПолученияСведений",	ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерДокумента",          	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаДокумента",           	ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерИсправления",        	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаИсправления",         	ОписаниеДаты);
	Таблица.Колонки.Добавить("ГосударственныйКонтракт",		Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("ДокументОснование"			);
	
	Таблица.Колонки.Добавить("Поставщик",         			Новый ОписаниеТипов(ТипОрганизацияКонтрагент));  // исполнитель
	Таблица.Колонки.Добавить("Получатель",       			Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("ПредставлениеПолучатель",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ПредставлениеДоговора",		Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("Организация",      			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Таблица.Колонки.Добавить("Валюта",          	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВалютаКод",       	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВалютаНаименование",  Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("СуммаВключаетНДС", 	Новый ОписаниеТипов("Булево"));
	
	Таблица.Колонки.Добавить("Руководитель",            			Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("РуководительФИО",         			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительСтруктураФИО",			Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаРуководителяНаОсновании",           	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЗаРуководителяНаОснованииНаименование",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжностьНаименование",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжность",            	Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("ПредставительЗаказчика",            	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЗаЗаказчикаНаОсновании",            	Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("ТаблицаДокумента");
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыАктаОбОказанииУслуг() Экспорт
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТабличнаяЧасть",				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НомерСтроки",					ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Таблица.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("ЗадачаСсылка.ЗадачиПользователя"));
	Таблица.Колонки.Добавить("НоменклатураКод",				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НоменклатураНаименование",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Количество",					ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименование",Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Цена",						ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("Сумма",						ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаБезНДС",					ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаНДС",					ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СтавкаНДС", 					Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("СуммаСНДС",					ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("ПолучательУслуг",			Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Таблица.Колонки.Добавить("ДатаНачала", 					Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаВыполнения", 					Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;
	
КонецФункции

Функция КонтактнаяИнформацияДляСчета(Организация, Дата)
	
	Сведения = СведенияКонтактнойИнформации();
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, 
		УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("ЮрАдресОрганизации"), Дата, Ложь);
	Для Каждого СтрокаТаблицыКИ Из ТаблицаКИ Цикл
		
		// Определяем нижний уровень населенного пункта в адресе.
		ГородНаселенныйПункт = "";
		Если СтрокаТаблицыКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
			СтруктураПолейАдреса = РаботаСАдресами.СведенияОбАдресе(СтрокаТаблицыКИ.Значение, ДополнительныеПараметры);
			Если СтруктураПолейАдреса.Свойство("Город") 
				И ЗначениеЗаполнено(СтруктураПолейАдреса.Город) Тогда
				ГородНаселенныйПункт = СтруктураПолейАдреса.Город;
				
			ИначеЕсли СтруктураПолейАдреса.Свойство("НаселенныйПункт") 
				И ЗначениеЗаполнено(СтруктураПолейАдреса.НаселенныйПункт) Тогда
				ГородНаселенныйПункт = СтруктураПолейАдреса.НаселенныйПункт;
				
			ИначеЕсли СтруктураПолейАдреса.Свойство("КодРегиона")
				И СтруктураПолейАдреса.Свойство("Регион")
				И (СтруктураПолейАдреса.КодРегиона =  "77" // Москва
				ИЛИ СтруктураПолейАдреса.КодРегиона = "78" // Санкт-Петербург
				ИЛИ СтруктураПолейАдреса.КодРегиона = "92" // Севастополь и Байконур
				ИЛИ СтруктураПолейАдреса.КодРегиона = "99") Тогда
				// Города федерального значения и приравненные к ним.
					ГородНаселенныйПункт = СтруктураПолейАдреса.Регион;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицыКИ.Вид =  УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("ЮрАдресОрганизации") Тогда
			Сведения.ЮридическийАдрес = СтрокаТаблицыКИ.Представление;
			Сведения.ГородПоЮридическомуАдресу = ГородНаселенныйПункт;
			Сведения.ЮридическийАдрес = СтрокаТаблицыКИ.Представление;
			Сведения.ЗначенияПолейЮридическийАдрес = СтрокаТаблицыКИ.Значение;
			Сведения.ГородПоЮридическомуАдресу = ГородНаселенныйПункт;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сведения;
КонецФункции

Функция СведенияКонтактнойИнформации()
	Сведения = Новый Структура;
	Сведения.Вставить("ЮридическийАдрес", "");
	Сведения.Вставить("ГородПоЮридическомуАдресу", "");
	Сведения.Вставить("ЮридическийАдрес", "");
	Сведения.Вставить("ЗначенияПолейЮридическийАдрес", "");
	Сведения.Вставить("ГородПоЮридическомуАдресу", "");
	
	Возврат Сведения;
КонецФункции

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

#КонецОбласти

#КонецЕсли


