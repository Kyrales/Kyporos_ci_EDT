
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// это новый фиксируем в реквизите формы
		ЭтоНовый = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоНовый Тогда
		Объект.Дата = КонецДня(Объект.Дата);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("Изменение_ФактическиеТрудозатратыЗадачи", , Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаполнитьРаботыПоЗадачи(Команда)
	
	ЗаполнитьРаботыПоЗадачиСервер();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаботыПоЗадачиСервер()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзаиморасчетыСОрганизациямиОстатки.Задача КАК Задача,
	               |	ВзаиморасчетыСОрганизациямиОстатки.Исполнитель КАК Исполнитель,
	               |	ВзаиморасчетыСОрганизациямиОстатки.ФактическаяТрудоемкостьОстаток КАК Трудоемкость,
	               |	ВзаиморасчетыСОрганизациямиОстатки.ФактическаяТрудоемкостьОстаток * ВзаиморасчетыСОрганизациямиОстатки.Задача.Проект.СтоимостьЧаса КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСОрганизациями.Остатки(
	               |			&ДатаСреза,
	               |			Организация = &Организация
	               |				И (Задача.Проект В ИЕРАРХИИ (&Проект)
	               |					ИЛИ &Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))) КАК ВзаиморасчетыСОрганизациямиОстатки
	               |ГДЕ
	               |	НЕ ВзаиморасчетыСОрганизациямиОстатки.Задача.ПометкаУдаления
	               |	И НЕ ВзаиморасчетыСОрганизациямиОстатки.Задача.ОтмененаЗадача
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВзаиморасчетыСОрганизациямиОстатки.Задача.ДатаВыполнения";
	
	
	Граница = Новый Граница(Объект.Дата, ВидГраницы.Включая);
	МоментВремениНаДату = Граница.Значение;
	Запрос.УстановитьПараметр("ДатаСреза", МоментВремениНаДату + 1);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	
	Результат = Запрос.Выполнить();
	ТаблицаСписокЗадач = Результат.Выгрузить();
	
	Объект.СписокЗадач.Загрузить(ТаблицаСписокЗадач);
	
	Объект.СуммаОплаты = Объект.СписокЗадач.Итог("Сумма");

КонецПроцедуры // ЗаполнитьРаботыПоЗадачиСервер()

&НаКлиенте
Процедура СписокЗадачЗадачаПриИзменении(Элемент)
	
	РассчитатьТекущуюСтроку(Элементы.СписокЗадач.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Объект.ДатаСтатуса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Объект.Оплачено = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусАктаВыполненныхРабот.Оплачен");
	
	ИзменениеСтатусаОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоПриИзменении(Элемент)
	
	ИзменениеСтатусаОплаты();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменениеСтатусаОплаты()

	Если Объект.Оплачено Тогда
		
		Объект.ДатаОплаты = ОбщегоНазначенияКлиент.ДатаСеанса();
		Объект.СуммаОплаты = Объект.СписокЗадач.Итог("Сумма");
		
		Объект.ДатаСтатуса = Объект.ДатаОплаты;
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусАктаВыполненныхРабот.Оплачен");
		
	Иначе
		
		Объект.ДатаОплаты = '00010101';
		Объект.ДругаяСуммаСогласована = Ложь;
		
		Объект.ДатаСтатуса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусАктаВыполненныхРабот.Оплачен") Тогда
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусАктаВыполненныхРабот.ОжидаетОплаты");
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ИзменениеОплачено()

&НаКлиенте
Процедура СписокЗадачТрудоемкостьПриИзменении(Элемент)
	
	РассчитатьТекущуюСтроку(Элементы.СписокЗадач.ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьТекущуюСтроку(ТекущиеДанные, ИзмененаТрудоемкость = Ложь)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначенияКупоросВызовСервера.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Задача , "Исполнитель, Трудоемкость, Проект.СтоимостьЧаса");
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РеквизитыЗадачи, , "Трудоемкость");
	
	Если ИзмененаТрудоемкость Тогда
	
		ТекущиеДанные.Сумма = ТекущиеДанные.Трудоемкость * РеквизитыЗадачи.ПроектСтоимостьЧаса;
		
	Иначе	
		
		ТекущиеДанные.Трудоемкость = РеквизитыЗадачи.Трудоемкость;
		ТекущиеДанные.Сумма = РеквизитыЗадачи.Трудоемкость * РеквизитыЗадачи.ПроектСтоимостьЧаса;
		
	КонецЕсли;

КонецПроцедуры // РассчитатьТекущуюСтроку()

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры 

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры 

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти