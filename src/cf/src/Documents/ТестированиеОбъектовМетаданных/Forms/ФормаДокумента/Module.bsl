
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УстановитьИнформационныйБлок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("Обновить_СписокОбъектовМетаданных"); // в случае изменения флагов тестирования обновление списка объектов метаданных
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаконченаПроверкаЭтапов" Тогда
		// в параметре адрес временного хранилища
		
		ПолучитьИзВременногоХранилищаТаблицуЭтапов(Параметр.ЭтапыПроверкиАдрес);
		ПолучитьИзВременногоХранилищаТаблицуЭтапыМетаданных(Параметр.ТаблицаОбъектовМетаданныхАдрес);
		
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаЭтаповПроверки;
		
		УстановитьИнформационныйБлок();
		
		Модифицированность = Истина; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СценарийТестированияПриИзменении(Элемент)
	
	ЗаполнитьОбъектыНаПроверки();
	
	ЗаполнитьТабличнуюЧастьЭтаповПроверки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыНаПроверке

&НаКлиенте
Процедура ОбъектыНаПроверкеПриИзменении(Элемент)
	
	ЗаполнитьТабличнуюЧастьЭтаповПроверки(Истина);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьНеПротестированныеОбъекты(Команда)
	
	ПолучитьНеПротестированныеОбъектыМетаданных();	
	
	ЗаполнитьТабличнуюЧастьЭтаповПроверки();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьМастерПроверки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВременногоХранилища", ПоместитьЭтапыПроверкиВоВременноеХранилище());
	ПараметрыФормы.Вставить("Конфигурация", Объект.Конфигурация);
	ПараметрыФормы.Вставить("СценарийТестирования", Объект.СценарийТестирования);
	ПараметрыФормы.Вставить("ОбъектыМетаданныхАдресХранилища", ПоместитьЭтапыПроверкиМетаданныхВоВременноеХранилище() );
	
	ОткрытьФорму("Документ.ТестированиеОбъектовМетаданных.Форма.ФормаМастераПроверки", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыПроверки(Команда)
	
	ЗаполнитьТабличнуюЧастьЭтаповПроверки();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭтапыПроверки(Команда)
	
	ЗаполнитьТабличнуюЧастьЭтаповПроверки(Истина);
	 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры 

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


//////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьИнформационныйБлок() 
	
	Всего = 0; 
	Принято = 0; 
	НеПринято = 0;
	Для каждого стр Из Объект.ЭтапыПроверки Цикл
		
		Всего = Всего + 1;
		
		Если стр.РезультатЭтапа = Перечисления.РезультатЭтапаПроверки.Принято Тогда
			Принято = Принято + 1;
		КонецЕсли;	
		Если стр.РезультатЭтапа = Перечисления.РезультатЭтапаПроверки.НеПринято Тогда
			НеПринято = НеПринято + 1;	
		КонецЕсли;
	
	КонецЦикла;
	
	Объект.СтатистикаЭтаповПроверки = СтрШаблон(НСтр("ru = '   Всего: %1  Принято: %2  Не принято: %3'"), 
			Формат(Всего, "ЧН="), Формат(Принято, "ЧН="), Формат(НеПринято, "ЧН="));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьЭтаповПроверки(ТолькоОбновитьТабличнуюЧасть = Ложь) 
	
	Если Объект.СценарийТестирования.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОбъектыНаПроверке.Количество() = 0 Тогда
		Объект.ЭтапыПроверки.Очистить();
		Объект.ЭтапыПроверкиМетаданных.Очистить();
		Возврат;
	КонецЕсли;
	
	Если ТолькоОбновитьТабличнуюЧасть Тогда
		
		ТолькоОбновлениеЭтаповПроверки();

		// Выход из процедуры, т.к. выбран параметр ТолькоОбновитьТабличнуюЧасть = Истина.
		Возврат;
	
	КонецЕсли;
	
	Объект.ЭтапыПроверки.Очистить();
	Объект.ЭтапыПроверкиМетаданных.Очистить();
	
	Для каждого Стр Из Объект.СценарийТестирования.ЭтапыПроверки Цикл
		
		ДанныеЭтапаПроверки = Объект.ЭтапыПроверки.Добавить();
		ДанныеЭтапаПроверки.ЭтапПроверки = Стр.ЭтапПроверки;
		
		// заполнить этапы проверки метаданных
		Для каждого ТекСтрокаОМ Из Объект.ОбъектыНаПроверке Цикл
			
			ДанныеЭтапаПроверкиОМ = Объект.ЭтапыПроверкиМетаданных.Добавить();
			ДанныеЭтапаПроверкиОМ.ЭтапПроверки = Стр.ЭтапПроверки;
			ДанныеЭтапаПроверкиОМ.ОбъектМетаданных = ТекСтрокаОМ.ОбъектМетаданных;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ТолькоОбновлениеЭтаповПроверки()
	
	// очистка "левых" этапов проверки метаданных
	КолСтрокИсходное = Объект.ЭтапыПроверкиМетаданных.Количество();
	индекс = 1; 
	сч = 0;
	Пока индекс <= КолСтрокИсходное Цикл
		
		ПараметрыПоиска = Новый Структура("ОбъектМетаданных", Объект.ЭтапыПроверкиМетаданных[сч].ОбъектМетаданных);
		СтрокиОбъектыНаПроверке = Объект.ОбъектыНаПроверке.НайтиСтроки(ПараметрыПоиска);
		
		Если Не ЗначениеЗаполнено(СтрокиОбъектыНаПроверке) Тогда
			Объект.ЭтапыПроверкиМетаданных.Удалить(Объект.ЭтапыПроверкиМетаданных[сч]);    
		Иначе
			сч = сч + 1;    
		КонецЕсли;
		
		индекс = индекс + 1;
		
	КонецЦикла;
	
	// обновление данных
	Для каждого ТекСтрока Из Объект.ОбъектыНаПроверке Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтрокиОМ = Объект.ЭтапыПроверкиМетаданных.НайтиСтроки(Новый Структура("ОбъектМетаданных", ТекСтрока.ОбъектМетаданных));
		
		Если НайденныеСтрокиОМ.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрЭтапыПроверки Из Объект.СценарийТестирования.ЭтапыПроверки Цикл
			
			ДанныеЭтапаПроверкиОМ = Объект.ЭтапыПроверкиМетаданных.Добавить();
			ДанныеЭтапаПроверкиОМ.ЭтапПроверки = СтрЭтапыПроверки.ЭтапПроверки;
			ДанныеЭтапаПроверкиОМ.ОбъектМетаданных = ТекСтрока.ОбъектМетаданных;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьОбъектыНаПроверки()
	
	Если Не ЗначениеЗаполнено(Объект.СценарийТестирования) Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СценарииТестированияОбъектовОбъектыНаПроверке.ОбъектМетаданных КАК ОбъектМетаданных
	|ИЗ
	|	Справочник.СценарииТестированияОбъектов.ОбъектыНаПроверке КАК СценарииТестированияОбъектовОбъектыНаПроверке
	|ГДЕ
	|	СценарииТестированияОбъектовОбъектыНаПроверке.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.СценарийТестирования);
	
	Результат = Запрос.Выполнить();
	ТаблицаОбъектМетаданных = Результат.Выгрузить();
	
	Объект.ОбъектыНаПроверке.Очистить();
	
	Объект.ОбъектыНаПроверке.Загрузить(ТаблицаОбъектМетаданных);

КонецПроцедуры // ЗаполнитьОбъектыНаПроверки()

&НаСервере
Функция ПоместитьЭтапыПроверкиВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыПроверки.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьЭтапыПроверкиМетаданныхВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыПроверкиМетаданных.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПолучитьИзВременногоХранилищаТаблицуЭтапов(АдресВременногоХранилища) 
	
	Объект.ЭтапыПроверки.Очистить();
	
	Объект.ЭтапыПроверки.Загрузить(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьИзВременногоХранилищаТаблицуЭтапыМетаданных(АдресВременногоХранилища) 
	
	Объект.ЭтапыПроверкиМетаданных.Очистить();
	
	Объект.ЭтапыПроверкиМетаданных.Загрузить(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
		
КонецПроцедуры

// Процедура загружает в список не протестированные актуальные объекты метаданных для текущей конфигурации
//
&НаСервере
Процедура ПолучитьНеПротестированныеОбъектыМетаданных()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ОбъектыМетаданныхКонфигураций.Ссылка КАК ОбъектМетаданных,
	                |	ОбъектыМетаданныхКонфигураций.ОбъектПротестирован КАК ОбъектПротестирован,
	                |	ОбъектыМетаданныхКонфигураций.ТипОбъектаМетаданных КАК ТипОбъектаМетаданных
	                |ИЗ
	                |	Справочник.ОбъектыМетаданныхКонфигураций КАК ОбъектыМетаданныхКонфигураций
	                |ГДЕ
	                |	НЕ ОбъектыМетаданныхКонфигураций.ОбъектПротестирован
	                |	И ОбъектыМетаданныхКонфигураций.Владелец = &Конфигурация
	                |	И ОбъектыМетаданныхКонфигураций.Актуальность
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ОбъектыМетаданныхКонфигураций.ТипОбъектаМетаданных.Наименование,
	                |	ОбъектыМетаданныхКонфигураций.Наименование";
	 
	 Запрос.УстановитьПараметр("Конфигурация", Объект.Конфигурация);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выгрузить();
	 
	 Объект.ОбъектыНаПроверке.Очистить();
	 
	 Объект.ОбъектыНаПроверке.Загрузить(Выборка);
	
КонецПроцедуры

#КонецОбласти

