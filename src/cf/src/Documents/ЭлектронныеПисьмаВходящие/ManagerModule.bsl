
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Основная процедура загрузки входящих электронных писем
//
// Параметры:
//  УчетнаяЗаписьВходящие  - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - см. справку по настройке
//
Процедура ЗагрузитьВходящиеПисьмаПоУчетнойЗаписи(УчетнаяЗаписьВходящие) Экспорт

	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Колонки", "ПочтовоеСообщение, Вложения");
	
	ТаблицаВходящихСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьВходящие, ПараметрыЗагрузки);
	
	ЗагрузкаПочтовыхСообщений(ТаблицаВходящихСообщений, УчетнаяЗаписьВходящие);

КонецПроцедуры

// Загрузка почтовых сообщений в транзакции на основе массива почтовых сообщений. 
// При ошибке фиксация в журнале событий.
//
// Параметры:
//  МассивВходящихСообщений  - Массив - массив содержащий объекты типа ИнтернетПочтовоеСообщение  
//  СсылкаНаУчетнуюЗапись  - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - см. справку по настройке
//
Процедура ЗагрузкаПочтовыхСообщений(ТаблицаВходящихСообщений, СсылкаНаУчетнуюЗапись) Экспорт
	
	НачатьТранзакцию();
	
    Попытка
        
		КоличествоЗагружаемыхСообщений = ТаблицаВходящихСообщений.Количество();
        СоздатьДокументыВходящееПисьмоПоПолученнымСообщениям(ТаблицаВходящихСообщений, КоличествоЗагружаемыхСообщений, СсылкаНаУчетнуюЗапись);
        ЗафиксироватьТранзакцию();
		
    Исключение
        
        ОтменитьТранзакцию();	
		
		ТекстОшибки = НСтр("ru = 'Ошибка при загрузке электронного письма:'"); 
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Администрирование.Загрузка входящих электронных писем", 
				ТекстОшибки, 
				УровеньЖурналаРегистрации.Ошибка,
				Истина);
		
    КонецПопытки;

КонецПроцедуры

// Основная процедура обработки входящих электронных писем
Процедура ОбработатьВходящееПисьмо(ВыборкаДокумента) Экспорт
	
	// разбор темы: задача или сообщение
	РезультатРазбораТемы = РезультатРазбораТемыПисьмаДляФормированияСообщения(ВыборкаДокумента.Тема);
	
	Если ЗначениеЗаполнено(РезультатРазбораТемы.ЗадачаОснование) Тогда
		// формирование сообщения обсуждения
		СсылкаНаОбъект = СоздатьНовоеСообщениеОбсуждения(ВыборкаДокумента, РезультатРазбораТемы);
	Иначе
		// Формирование задачи
		СсылкаНаОбъект = СоздатьНовуюЗадачу(ВыборкаДокумента);	
	КонецЕсли;
	
	// Установка флага обработки
	ОбъектДокумент = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
	ОбъектДокумент.Заблокировать();
	ОбъектДокумент.Обработано = Истина;
	ОбъектДокумент.ОбъектОбработкиUID = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
	ОбъектДокумент.Записать();
	
КонецПроцедуры

// Входящий документ по UID
//
// Параметры:
//  СтрокаUID	 - Строка - Строковый УИД 36 символов
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//  * ДокументНайден - Булево
//  * ВходящееЭлектронноеПисьмо - ДокументСсылка.ЭлектронныеПисьмаВходящие
//  * ТекстПисьма - Строка
//  * СтруктураКартинокПисьма - Структура - см. Документы.ЭлектронныеПисьмаВходящие.ПодготовитьТекстПисьмаИСтруктуруКартинок()
//
Функция ВходящийДокументПоUID(СтрокаUID) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("ДокументНайден", Ложь);
	РезультатПоиска.Вставить("ВходящееЭлектронноеПисьмо", Документы.ЭлектронныеПисьмаВходящие.ПустаяСсылка()); 
	РезультатПоиска.Вставить("ТекстПисьма", "");
	РезультатПоиска.Вставить("СтруктураКартинокПисьма", Неопределено);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗагрузкуВходящихЭлектронныхПисем") Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЭлектронныеПисьмаВходящие.Ссылка КАК ВходящееЭлектронноеПисьмо,
	               |	ЭлектронныеПисьмаВходящие.ТекстHTML КАК ТекстHTML,
	               |	ЭлектронныеПисьмаВходящие.Текст КАК Текст,
	               |	ЭлектронныеПисьмаВходящие.СтруктураКартинок КАК СтруктураКартинок,
	               |	ЭлектронныеПисьмаВходящие.ТипТекста КАК ТипТекста,
	               |	ИСТИНА КАК ДокументНайден
	               |ИЗ
	               |	Документ.ЭлектронныеПисьмаВходящие КАК ЭлектронныеПисьмаВходящие
	               |ГДЕ
	               |	ЭлектронныеПисьмаВходящие.ОбъектОбработкиUID = &ОбъектОбработкиUID
	               |	И НЕ ЭлектронныеПисьмаВходящие.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ОбъектОбработкиUID", СтрокаUID);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(РезультатПоиска, Выборка, "ДокументНайден, ВходящееЭлектронноеПисьмо");
		
		Документы.ЭлектронныеПисьмаВходящие.ПодготовитьТекстПисьмаИСтруктуруКартинок(Выборка, РезультатПоиска.ТекстПисьма, РезультатПоиска.СтруктураКартинокПисьма);
		
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции // ВходящийДокументПоUID()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОчиститьНедопустимыеСимволыXML(Текст)   Экспорт
	
	Позиция = НайтиНедопустимыеСимволыXML(Текст);
	Пока Позиция > 0 Цикл
		
		Текст = Лев(Текст, Позиция - 1) + " " + Сред(Текст, Позиция + 1);
		Позиция = НайтиНедопустимыеСимволыXML(Текст);
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьТелоПисьма(ПочтовоеСообщение) Экспорт
	
	текстВозврата = "";
	
	Для каждого текст Из ПочтовоеСообщение.Тексты Цикл
		
		Если Текст.ТипТекста	= ТипТекстаПочтовогоСообщения.HTML Тогда
			
			ТекстДобавления = текст.Текст;
			
			текстВозврата = текстВозврата + " " + СокрЛП(ВернутьТекстПисьмаВТекстовомФормате(ТекстДобавления));			
			
		ИначеЕсли Текст.ТипТекста	= ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			
			текстВозврата 	=  текстВозврата + " "  + СокрЛП(текст.текст);		
			
			// Очистка символа 13. Через СтрЗаменить не отрабатывает.
			ТекстДок = Новый ТекстовыйДокумент;
			ТекстДок.УстановитьТекст(текстВозврата);
			Для Сч = 1 По ТекстДок.КоличествоСтрок() Цикл
				Если ТекстДок.ПолучитьСтроку(Сч) = "" Тогда
					ТекстДок.УдалитьСтроку(Сч);
				КонецЕсли;
			КонецЦикла;	
			текстВозврата = ТекстДок.ПолучитьТекст();
			
		ИначеЕсли Текст.ТипТекста	= ТипТекстаПочтовогоСообщения.РазмеченныйТекст Тогда			
			
			текстВозврата =  текстВозврата + " " + Текст.Текст;
			
		Иначе
			
			// Нет обработки.	
			
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат СокрЛП(текстВозврата);
	
КонецФункции

// Функция возвращает по переданному тексту в формате HTML строку
//  в формате обычного текста
//
// Параметры:
//  ТекстПисьма	 - Строка - строка текста в формате HTML
// 
// Возвращаемое значение:
//  Строка - в формате обычного текста
//
Функция ВернутьТекстПисьмаВТекстовомФормате(ТекстПисьма) Экспорт

	
    Текст = ТекстПисьма;
    
    Чтение      = Новый ЧтениеHTML;
    Чтение.УстановитьСтроку(ТекстПисьма);
    Построитель = Новый ПостроительDOM;
    Док         = Построитель.Прочитать(Чтение);
    
    ТекстовоеСодержание = "";
	ПолучитьТекст(Док.ДочерниеУзлы, ТекстовоеСодержание);
	
    Если Не ПустаяСтрока(ТекстовоеСодержание) Тогда
        
        Возврат СокрЛП(ТекстовоеСодержание);
        
    КонецЕсли;
	
	// найдем начала тела HTML документа
	НачалоТела = СтрНайти(ВРЕГ(Текст), "<BODY");
	Если НачалоТела > 0 Тогда
		Текст = Прав(Текст, СтрДлина(Текст) - НачалоТела + 1);
	КонецЕсли;
	
	// уберем определение стилей
	КонецСтиля = СтрНайти(ВРЕГ(Текст), "</STYLE>");
	Пока КонецСтиля > 0 Цикл
		Текст = Прав(Текст, СтрДлина(Текст) - (КонецСтиля + 7));
		КонецСтиля = СтрНайти(ВРЕГ(Текст), "</STYLE>");
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, "<br>", "");
	Текст = СтрЗаменить(Текст, "<BR>", "");

	Текст = СтрЗаменить(Текст, "</td>", Символы.ПС);
	Текст = СтрЗаменить(Текст, "</TD>", Символы.ПС);
	Текст = СтрЗаменить(Текст, "</th>", Символы.ПС);
	Текст = СтрЗаменить(Текст, "</TH>", Символы.ПС);
	Текст = СтрЗаменить(Текст, "</tr>", Символы.ПС);
	Текст = СтрЗаменить(Текст, "</TH>", Символы.ПС);
	Текст = СтрЗаменить(Текст, "</p>", Символы.ПС);
	Текст = СтрЗаменить(Текст, "</P>", Символы.ПС);
	Текст = СтрЗаменить(Текст, "</div>", Символы.ПС);
	Текст = СтрЗаменить(Текст, "</DIV>", Символы.ПС);
	
	ПозицияКонцаТэга = СтрНайти(Текст, ">");
	
	// пробежимся по всем тэгам
	Пока ПозицияКонцаТэга > 0 Цикл
		
		КонецТэга = ПозицияКонцаТэга;
		
		НачалоТэга = СтрНайти(Текст, "<");
		
		ДлинаТэга = КонецТэга - НачалоТэга + 1; 
		
		Тэг  = Сред(Текст, НачалоТэга, ДлинаТэга);
		                       
		Пока СтрЧислоВхождений(Тэг, "<") > 1 Цикл
			НачалоВложенногоТэга = СтрНайти(Прав(Тэг, СтрДлина(Тэг) - 1), "<") + 1;
			Тэг = Прав(Тэг, СтрДлина(Тэг) - НачалоВложенногоТэга + 1);
		КонецЦикла;
		
		Текст = СтрЗаменить(Текст, Тэг, "");
		
		ПозицияКонцаТэга = СтрНайти(Текст, ">");
		
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, "&nbsp;", " ");
 	Текст = СтрЗаменить(Текст, "&lt;", "<");
 	Текст = СтрЗаменить(Текст, "&gt;", ">");
	Текст = СтрЗаменить(Текст, "&quot;", """"); // Двойные кавычки
	Текст = СтрЗаменить(Текст, "&apos;", "'"); // Одиночная кавычка
	Текст = СтрЗаменить(Текст, "&laquo;", "<<"); // Левые кавычки-елочки
	Текст = СтрЗаменить(Текст, "&raquo;", ">>"); // Правые кавычки-елочки
	Текст = СтрЗаменить(Текст, "&lsaquo;", "<"); // Левая одиночная угловая кавычка
	Текст = СтрЗаменить(Текст, "&rsaquo;", ">"); // Правая одиночная угловая кавычка
	Текст = СтрЗаменить(Текст, "&rsquo;", "’"); // Апостроф
	Текст = СтрЗаменить(Текст, "&bdquo;", """"); // Левые кавычки-лапки
	Текст = СтрЗаменить(Текст, "&ldquo;", """"); // Правые кавычки-лапки
	Текст = СтрЗаменить(Текст, "&rdquo;", """"); // Правые английские кавычки
	Текст = СтрЗаменить(Текст, "&lsquo;", "'"); // Левая одиночная кавычка
	Текст = СтрЗаменить(Текст, "&rsquo;", "'"); // Правая одиночная кавычка
	Текст = СтрЗаменить(Текст, "&sbquo;", "'"); // Одиночная low-9 кавычка
	
	Текст = СтрЗаменить(Текст, "&thinsp;", " "); // короткий пробел
	Текст = СтрЗаменить(Текст, "&#8201;", " "); // короткий пробел
	
	Текст = СтрЗаменить(Текст, "&nbsp;", " "); // неразрывный пробел
	Текст = СтрЗаменить(Текст, "&#160;", " "); // неразрывный пробел
	
	Текст = СтрЗаменить(Текст, "&#8209;", "-"); // неразрывный дефис
	
	Текст = СтрЗаменить(Текст, "&#ndash;", "-"); // короткое тире
	Текст = СтрЗаменить(Текст, "&#8211;", "-"); // короткое тире
	
	Текст = СтрЗаменить(Текст, "&#mdash;", "-"); // длинное тире
	Текст = СтрЗаменить(Текст, "&#8212;", "-"); // длинное тире
	
	Текст = СтрЗаменить(Текст, "&#minus;", "-"); // длинное тире
	Текст = СтрЗаменить(Текст, "&#8722;", "-"); // длинное тире

	СтрокаТекста = "";
	
	Для Сч = 1 По СтрЧислоСтрок(Текст) Цикл
		
		СтрокаТекста = СтрокаТекста + СокрЛ(СтрПолучитьСтроку(Текст, Сч)) + Символы.ПС;
	
	КонецЦикла;
	
	Возврат СокрЛП(СтрокаТекста);
	
КонецФункции

// Функция получения пользователя по электронному адресу
//
// Параметры:
//  ЭлектронныйАдрес - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - пользователь по электронному адресу, если не найден то пустая ссылка
//
Функция ПользовательПоЭлектронномуАдресу(ЭлектронныйАдрес) Экспорт
	
	Запрос = Новый Запрос;
	// BSLLS:RefOveruse-off
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	               |ГДЕ
	               |	ПользователиКонтактнаяИнформация.Вид = &Вид
	               |	И ПользователиКонтактнаяИнформация.АдресЭП = &АдресЭП
	               |	И НЕ ПользователиКонтактнаяИнформация.Ссылка.ПометкаУдаления";
	
	// BSLLS:RefOveruse-on
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("АдресЭП", ЭлектронныйАдрес);
	
	Выборка	= Запрос.Выполнить().Выбрать();
	
	Результат	= Справочники.Пользователи.ПустаяСсылка();
	// если была найдена хотя бы одна запись
	Пока Выборка.Следующий() Цикл
	
		Результат	= Выборка.Ссылка;
        
	КонецЦикла; 
	
	Возврат	Результат;
	
КонецФункции

// Процедура - Подготовить текст письма и структуру картинок
//
// Параметры:
//  ТекущийОбъект		 - ДокументОбъект.ЭлектронныеПисьмаВходящие 
//  ТекстПисьма			 - Строка 
//  СтруктураКартинок	 - ХранилищеЗначения - содержит структуру, где ключом является нормализованное имя картинка, 
//												а значением структура: ТекстДокумента, СтруктураКартинок 
//
Процедура ПодготовитьТекстПисьмаИСтруктуруКартинок(ТекущийОбъект, ТекстПисьма, СтруктураКартинок) Экспорт
	
	Если ТекущийОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML 
			Или ТекущийОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			
		ЕстьОбрамлениеHTML = Обрамлено(ТекущийОбъект.ТекстHTML); 
		
		Если ЕстьОбрамлениеHTML Тогда
		
	        ТекстПисьма = ТекущийОбъект.ТекстHTML;
			
		Иначе
			
			ТекстПисьма = ОбрамитьHTML(ТекущийОбъект.ТекстHTML);
		
		КонецЕсли;	
        
    Иначе
        
        ТекстПисьма = ОбрамитьHTML(ТекущийОбъект.Текст);
        
    КонецЕсли;
    
    СтруктураКартинок = ТекущийОбъект.СтруктураКартинок.Получить();
    Если СтруктураКартинок = Неопределено Тогда
        
        СтруктураКартинок = Новый Структура;
        
    КонецЕсли;

КонецПроцедуры

// Возвращает строкой список получателей из таб. части
//
// Параметры:
//  ТабЧасть - ТабличнаяЧасть - см. Документы.ЭлектронныеПисьмаВходящие: ПолучателиПисьма, ПолучателиКопий, ПолучателиСлепыхКопий
// 
// Возвращаемое значение:
//  Строка - список получателей через разделитель ;
//
Функция ПолучитьСтрокойСписокПолучателейИзТабЧасти(ТабЧасть) Экспорт

    Строка = "";
    
    Разделитель = "; ";
    
    Для каждого СтрокаТабЧасть Из ТабЧасть Цикл
        
        Если ПустаяСтрока(Строка) Тогда
        
        	ТекРазделитель = "";
            
        Иначе
            
            ТекРазделитель = Разделитель;
        
        КонецЕсли;
        
        Если Не ЗначениеЗаполнено(СтрокаТабЧасть.Контакт) Тогда
                        
            Представление = СтрокаТабЧасть.Адрес;
            
        Иначе
            
            Представление = Строка(СтрокаТабЧасть.Контакт);
            
        КонецЕсли;
        
    	Строка = Строка + ТекРазделитель + Представление;
    
    КонецЦикла;
    
    Возврат Строка;
    

КонецФункции // ПолучитьСписокПолучателейИзТабЧасти(ТабЧасть)()

#Область ПолучениеПолучателейИКопий

Функция ПолучитьМассивПолучателейКопии(ПочтовоеСообщение) Экспорт
	
	МассивПолучателей = ПолучитьМассивПолучателей(ПочтовоеСообщение);
	Массив = Новый Массив;
	Для каждого ПочтовыйАдрес Из ПочтовоеСообщение.Копии Цикл
        
        Если МассивПолучателей.Найти( ПочтовыйАдрес.Адрес ) = Неопределено Тогда
            Массив.Добавить(ПочтовыйАдрес.Адрес);
            
        КонецЕсли;
    КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьМассивПолучателей(ПочтовоеСообщение)   Экспорт
	
	Массив = Новый Массив;
	Для каждого ПочтовыйАдрес Из ПочтовоеСообщение.Получатели Цикл
		
		Массив.Добавить(ПочтовыйАдрес.Адрес);                
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////////////////////////////
// Процедуры для программного интерфейса

Процедура СоздатьДокументыВходящееПисьмоПоПолученнымСообщениям(ПолученныеСообщенияКоллекция, КоличествоЗагружаемыхСообщений, СсылкаНаУчетнуюЗапись) 

     КоличествоПройденных = 0;                                                                    
	 Для каждого ПолученноеСообщение Из ПолученныеСообщенияКоллекция Цикл
         
		Если Не ЕстьЭлектронноеПисьмоВходящееПоИдентификатору(ПолученноеСообщение.ПочтовоеСообщение.Идентификатор[0]) Тогда
			
			СоздатьДокументВходящееЭлектронноеПисьмо(ПолученноеСообщение, СсылкаНаУчетнуюЗапись);
		
		КонецЕсли;
        
        КоличествоПройденных = КоличествоПройденных + 1 ;
        
		Если КоличествоПройденных >= КоличествоЗагружаемыхСообщений 
			И КоличествоЗагружаемыхСообщений > 0 Тогда
        	Прервать;
        КонецЕсли;
        
     КонецЦикла;

КонецПроцедуры

Процедура СоздатьДокументВходящееЭлектронноеПисьмо(ПолученноеСообщение,  СсылкаНаУчетнуюЗапись)
	
    Если Ложь Тогда
    
    	ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
    
    КонецЕсли;
	
	ПочтовоеСообщение = ПолученноеСообщение.ПочтовоеСообщение;
	
    СтруктураДляПредставленияHTML           = ПолучитьСтруктуруДляПредставленияHTML(ПочтовоеСообщение);
    НовыйДокумент                           = Документы.ЭлектронныеПисьмаВходящие.СоздатьДокумент();
    НовыйДокумент.Важность                  = ПолучитьВажность(ПочтовоеСообщение.Важность);
    НовыйДокумент.ВнутреннийЗаголовок       = ПочтовоеСообщение.Заголовок;
    НовыйДокумент.Дата                      = ТекущаяДатаСеанса();
    НовыйДокумент.ДатаОтправления           = ПочтовоеСообщение.ДатаОтправления;
    НовыйДокумент.ДатаПолучения             = ПочтовоеСообщение.ДатаПолучения;
    НовыйДокумент.ЕстьВложения              = ПочтовоеСообщение.Вложения.Количество() > 0;
    НовыйДокумент.ИдентификаторНаСервере    = ПочтовоеСообщение.Идентификатор[0];
    НовыйДокумент.Кодировка                 = ПочтовоеСообщение.Кодировка;
    НовыйДокумент.Обработано                = Ложь;
    НовыйДокумент.ОтправительАдрес          = ПочтовоеСообщение.Отправитель.Адрес;
    НовыйДокумент.ОтправительКонтакт        = ПользовательПоЭлектронномуАдресу(ПочтовоеСообщение.Отправитель.Адрес);
    НовыйДокумент.ОтправительПредставление  = ?(ЗначениеЗаполнено(НовыйДокумент.ОтправительКонтакт), 
		Строка(НовыйДокумент.ОтправительКонтакт), 
		ПочтовоеСообщение.Отправитель.ОтображаемоеИмя);
    НовыйДокумент.ПочтовоеСообщениеОригинал = Новый ХранилищеЗначения(ПочтовоеСообщение);
    НовыйДокумент.Размер                    = ПочтовоеСообщение.Размер;
    НовыйДокумент.СтруктураКартинок         = Новый ХранилищеЗначения(СтруктураДляПредставленияHTML.СтруктураКартинок);
    НовыйДокумент.Текст                     = ОчиститьНедопустимыеСимволыXML(ПолучитьТелоПисьма(ПочтовоеСообщение));
    НовыйДокумент.ТекстHTML                 = СтруктураДляПредставленияHTML.ТекстДокумента;
    НовыйДокумент.Тема                      = ПочтовоеСообщение.Тема;
    НовыйДокумент.ТипТекста                 = ПолучитьТипТекста(ПочтовоеСообщение);
    НовыйДокумент.УведомитьОДоставке        = ПочтовоеСообщение.УведомитьОДоставке;
    НовыйДокумент.УведомитьОПрочтении       = ПочтовоеСообщение.УведомитьОПрочтении;
    НовыйДокумент.ЧерезOutlook              = Ложь;
    НовыйДокумент.УчетнаяЗапись             = СсылкаНаУчетнуюЗапись;
    
    ЗаполнитьПолучателейИКопии(ПочтовоеСообщение, НовыйДокумент);
    
    НовыйДокумент.Записать();
    
    ЗаписатьВложенияПочтовогоСообщения(ПолученноеСообщение, НовыйДокумент.Ссылка);
    
КонецПроцедуры

Функция СоздатьНовуюЗадачу(ВыборкаДокумента)

	ОбъектЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();	
	
	ОбъектЗадача.ДатаНачала = ТекущаяДатаСеанса();
	
	ОбъектЗадача.Проект = Справочники.Проекты.БезПроекта;
	ОбъектЗадача.Наименование = ВыборкаДокумента.Тема;
	ОбъектЗадача.Описание = ВыборкаДокумента.Текст;
	ОбъектЗадача.Важность = ВыборкаДокумента.Важность;
	
	ПараметрыЗаполненияИмениПользователя = Новый Структура;
	ПараметрыЗаполненияИмениПользователя.Вставить("Наименование", ВыборкаДокумента.ОтправительПредставление);
	ПараметрыЗаполненияИмениПользователя.Вставить("Email", ВыборкаДокумента.ОтправительАдрес);
	ПараметрыЗаполненияИмениПользователя.Вставить("Комментарий", НСтр("ru = '#Создан при обработке входящих электронных писем'"));
	
	ИмяПользователя = Справочники.ИменаПользователей.НайтиСоздатьИмяПользователя(ПараметрыЗаполненияИмениПользователя);
	Инициатор = ПользовательПоЭлектронномуАдресу(ИмяПользователя.Email);
	
	Если ЗначениеЗаполнено(Инициатор) Тогда
		// Без инициатора, если нет в системе.
		ОбъектЗадача.Инициатор  = Инициатор;
		ОбъектЗадача.ПолучательУслуг = Инициатор;
		ДанныеПоИсполнителю = ИсполнительИПроектИзОтветственногоЗаПроект(Инициатор);
		ОбъектЗадача.Исполнитель = ДанныеПоИсполнителю.Исполнитель;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектЗадача.Исполнитель) Тогда
		// Установка роли Координатор выполнения задач
		ОбъектЗадача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения;
	КонецЕсли;
	
	// Заполнить Рабочую группу задачи из получателей копий
	Для каждого ТекПолучательКопии Из ВыборкаДокумента.Ссылка.ПолучателиКопий Цикл
		Если Не ЗначениеЗаполнено(ТекПолучательКопии.Контакт) Тогда
			Продолжить;	
		КонецЕсли;
		НовСогласование = ОбъектЗадача.РабочаяГруппа.Добавить();
		НовСогласование.Пользователь = ТекПолучательКопии.Контакт;
	КонецЦикла;
	
	ОбъектЗадача.Записать();
	
	// Установка состояния в Зарегистрирована.
	РегистрыСведений.ТекущиеСостоянияЗадач.ОбновитьТекущееСостояниеЗадачи(ОбъектЗадача.Ссылка, Справочники.СостоянияЗадач.Зарегистрирована);
	
	// Заполнение вложений
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВыборкаДокумента.Ссылка, МассивФайлов);
	СкопироватьПрисоединенныеФайлы(ОбъектЗадача.Ссылка, МассивФайлов);		
	
	
	// Фиксация события задачи
	Комментарий = СтрШаблон(НСтр("ru = 'Отправлен: %1 (%2). Дата отправки письма: %3'"),
		ВыборкаДокумента.ОтправительПредставление, ВыборкаДокумента.ОтправительАдрес, ВыборкаДокумента.ДатаОтправления);
	ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
		ОбъектЗадача.Ссылка, 
		Перечисления.ВидыСобытийЗадач.ЗарегистрированоПоЭлектроннойПочте, 
		Комментарий);
		
	Возврат ОбъектЗадача.Ссылка;

КонецФункции // СоздатьНовуюЗадачу()

// Возвращает новое сообщение обсуждения
//
// Параметры:
//  ВыборкаДокумента  - ВыборкаЗапроса - все данные документа ЭлектронныеПисьмаВходящие 
//  ПараметрыСообщения  - Структура - структура свойств:
//		* ЗадачаОснование - ЗадачаСсылка.ЗадачиПользователя
//		* СообщениеОснование - СправочникСсылка.СообщенияОбсуждений
//
// Возвращаемое значение:
//   СправочникСсылка.СообщенияОбсуждений - новое сообщение обсуждения
//
Функция СоздатьНовоеСообщениеОбсуждения(ВыборкаДокумента, ПараметрыСообщения)
	
	// Идентификация автора электронного письма
	ПараметрыЗаполненияИмениПользователя = Новый Структура;
	ПараметрыЗаполненияИмениПользователя.Вставить("Наименование", ВыборкаДокумента.ОтправительПредставление);
	ПараметрыЗаполненияИмениПользователя.Вставить("Email", ВыборкаДокумента.ОтправительАдрес);
	ПараметрыЗаполненияИмениПользователя.Вставить("Комментарий", НСтр("ru = '#Создан при обработке входящих электронных писем'"));
	
	ИмяПользователя = Справочники.ИменаПользователей.НайтиСоздатьИмяПользователя(ПараметрыЗаполненияИмениПользователя);
	Инициатор = ПользовательПоЭлектронномуАдресу(ИмяПользователя.Email);
	Если Не ЗначениеЗаполнено(Инициатор) Тогда
	 	РаботаСоСтруктуройКаталоговAD.СоздатьНовогоПользователяИБ(ИмяПользователя,,, Инициатор);
	КонецЕсли;
	
	ПервоеСообщениеТемы = Ложь;	
	Если Не ЗначениеЗаполнено(ПараметрыСообщения.СообщениеОснование) Тогда
		// поиск темы документа
		ТемаПоПредмету = РаботаСОбсуждениями.НайтиТемуПоПредмету(ПараметрыСообщения.ЗадачаОснование);
		ЕстьТемаПоПредмету = ЗначениеЗаполнено(ТемаПоПредмету);
		
		Если Не ЕстьТемаПоПредмету Тогда
			// Формирование новой темы обсуждения.
			РеквизитыТемы = Новый Структура;
			РеквизитыТемы.Вставить("ДатаСоздания", ВыборкаДокумента.ДатаОтправления);
			РеквизитыТемы.Вставить("Документ", ПараметрыСообщения.ЗадачаОснование);
			РеквизитыТемы.Вставить("Наименование", ""); // будет заполнено автоматически на основании документа
			РеквизитыТемы.Вставить("Папка", Справочники.ПапкиФорума.ТемыДокументов);
			
			ТемаДокументаСсылка = Справочники.ТемыОбсуждений.СоздатьНовуюТему(РеквизитыТемы, Инициатор);
			ПервоеСообщениеТемы = Истина;
		Иначе
			ТемаДокументаСсылка = ТемаПоПредмету;
		КонецЕсли;
	Иначе
		ТемаДокументаСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСообщения.СообщениеОснование, "ВладелецСообщения");
	КонецЕсли;	
	
	// Создание нового сообщения обсуждения.
	ОбъектСообщение = Справочники.СообщенияОбсуждений.СоздатьЭлемент();
	
	ОбъектСообщение.Родитель = ПараметрыСообщения.СообщениеОснование;
	ОбъектСообщение.Автор = Инициатор;
	ОбъектСообщение.ВладелецСообщения = ТемаДокументаСсылка;
	ОбъектСообщение.ТекстСообщения = ВыборкаДокумента.Текст;
	ОбъектСообщение.ПервоеСообщениеТемы = ПервоеСообщениеТемы;
	ОбъектСообщение.ДополнительныеСвойства.Вставить("ФормироватьУведомлениеПоЭлектроннойПочте", Ложь);
	ОбъектСообщение.ДополнительныеСвойства.Вставить("НеМенятьАвтораТемы", Истина);	
	ОбъектСообщение.Записать();
	
	// Заполнение вложений.
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВыборкаДокумента.Ссылка, МассивФайлов);
	СкопироватьПрисоединенныеФайлы(ОбъектСообщение.Ссылка, МассивФайлов);		
	
	// Перезапись сообщения для отправки уведомлений.
	ОбъектСообщение.ОтправитьПоПочтеРабочейГруппе = Истина;
	ОбъектСообщение.ОтправитьПоПочтеИсполнителю = Истина;
	ОбъектСообщение.ОтправитьНаТелеграм = Истина;
	ОбъектСообщение.ДополнительныеСвойства.Вставить("ФормироватьУведомлениеПоЭлектроннойПочте", Истина);
	ОбъектСообщение.ДополнительныеСвойства.Вставить("НеМенятьАвтораТемы", Истина);	
	ОбъектСообщение.Записать();
	
	Возврат ОбъектСообщение.Ссылка;
	
КонецФункции // СоздатьНовоеСообщениеОбсуждения()

//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ОбрамитьHTML(Знач Текст, Стиль = "")
	
	ТекстВозврата = "<HTML><HEAD>
		|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
		|<META content=""MSHTML 6.00.2900.6148"" name=GENERATOR>"
		+ Стиль 
		+ "</HEAD><BODY>" + Текст + "</BODY></HTML>";
		
	Возврат ТекстВозврата;
	
КонецФункции

Функция Обрамлено(Знач Текст)
	
	врТекст = ВРег(Текст);
		
	Возврат ЭтоОсновнойКонтейнерHTML(врТекст);
		
КонецФункции

Функция ПолучитьВажность(Важность)

	Если Важность = ВажностьИнтернетПочтовогоСообщения.Высокая
		Или Важность = ВажностьИнтернетПочтовогоСообщения.Наивысшая Тогда
    
    	Возврат Перечисления.ВариантыВажностиЗадачи.Высокая;
        
	ИначеЕсли Важность = ВажностьИнтернетПочтовогоСообщения.Низкая 
		Или Важность = ВажностьИнтернетПочтовогоСообщения.Наименьшая Тогда        
    
    	Возврат Перечисления.ВариантыВажностиЗадачи.Низкая;        
        
    Иначе
        
        Возврат Перечисления.ВариантыВажностиЗадачи.Обычная;
        
    КонецЕсли;
        

КонецФункции 

Функция ПолучитьТипТекста(ПочтовоеСообщение)

    Если Ложь Тогда
    
    	ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
    
    КонецЕсли;
    
    ЕстьПростойТекст    = Ложь;
    ЕстьRTF             = Ложь;
    
	Для каждого Текст Из ПочтовоеСообщение.Тексты Цикл
    
    	Если  Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
        
        	Возврат Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
            
        ИначеЕсли Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда 
            
            ЕстьПростойТекст = Истина;
            
        ИначеЕсли Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст Тогда 
            
            ЕстьRTF = Истина;
			
		Иначе
			
			// Нет обработки
			
        КонецЕсли;
    
    КонецЦикла;

    Если ЕстьПростойТекст Тогда
    
    	Возврат Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
        
    ИначеЕсли ЕстьRTF Тогда
        
        Возврат Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст;       
        
    Иначе
        
        Возврат Неопределено;
    
    КонецЕсли;
    
КонецФункции

Функция ПолучитьСтруктуруДляПредставленияHTML(ИнтернетПисьмо)
	
	ХТМЛ_Текст    = "";
	Простой_Текст = "";
	Прочий_Текст  = "";
	ПростойТекст  = "";
	
	СтруктураФорматированногоДокумента = Новый Структура("ТекстДокумента, СтруктураКартинок");
	
	Для каждого ТекстПочтовогоСообщения Из ИнтернетПисьмо.Тексты Цикл
		Если ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			ХТМЛ_Текст = ТекстПочтовогоСообщения.Текст;
		ИначеЕсли ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			Простой_Текст = ТекстПочтовогоСообщения.Текст;
		Иначе
			Прочий_Текст = ТекстПочтовогоСообщения.Текст;
		КонецЕсли; 
	КонецЦикла;
	
	СтруктураКартинок = Новый Структура;
	
	Если ЗначениеЗаполнено(ХТМЛ_Текст) Тогда
		
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.УстановитьСтроку(ХТМЛ_Текст);
		
		ПостроительDOM  = Новый ПостроительDOM;
		ДокументHTML    = ПостроительDOM.Прочитать(ЧтениеHTML);
		ТекстHTML       = ХТМЛ_Текст;
        
        СтруктураКартинок = Новый Структура;
        
		Для а = 0 По ДокументHTML.Картинки.Количество() - 1 Цикл
			
			ИсточникКартинки = ДокументHTML.Картинки[а].Источник;
			Для Каждого Вложение Из ИнтернетПисьмо.Вложения Цикл
				
				Если Вложение.Идентификатор <> Сред(ИсточникКартинки, 5) Тогда
					Продолжить;
				КонецЕсли;
				
				ИсходноеИмяКартинки = Сред(ИсточникКартинки, 5);
				НормализованноеИмяКартинки = "a"  + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
				
				ТекстHTML = СтрЗаменить(ТекстHTML, "cid:" + ИсходноеИмяКартинки, НормализованноеИмяКартинки);
				
				ПараметрыКартинки = Новый Структура;
				ПараметрыКартинки.Вставить("Расширение", ПолучитьРасширениеПоТипу(Вложение.ТипСодержимого));
				ПараметрыКартинки.Вставить("Картинка", Новый Картинка(Вложение.Данные));
				
				СтруктураКартинок.Вставить(НормализованноеИмяКартинки, ПараметрыКартинки);                    
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
    
    СтруктураФорматированногоДокумента.СтруктураКартинок = СтруктураКартинок;
	СтруктураФорматированногоДокумента.ТекстДокумента = ТекстHTML;
	
	Возврат СтруктураФорматированногоДокумента;
	
КонецФункции

Функция ПолучитьРасширениеПоТипу(ТипСодержимого)

    Если ТипСодержимого = "image/x-icon" Тогда
    
    	Возврат "ICO";
        
    ИначеЕсли  ТипСодержимого = "image/gif" Тогда
        
        Возврат "gif";
        
    ИначеЕсли  ТипСодержимого = "image/jpeg" Тогда
        
        Возврат "jpeg";
        
    ИначеЕсли  ТипСодержимого = "image/png" Тогда
        
        Возврат "png";
        
    ИначеЕсли  ТипСодержимого = "image/bmp" Тогда
        
        Возврат "bmp";        
        
    Иначе
        
        Возврат "jpg";
        
    КонецЕсли;	

КонецФункции // ()

Процедура ЗаписатьВложенияПочтовогоСообщения(ПолученноеСообщение, НовыйДокументСсылка, ДобавлятьОригиналПочтовогоСообщения = Ложь)
	
	ПочтовоеСообщение = ПолученноеСообщение.ПочтовоеСообщение;
	
	Для Каждого Вложение Из ПолученноеСообщение.Вложения Цикл
		
		АдресЗагруженногоФайла = ПоместитьВоВременноеХранилище(Вложение.Значение);
		
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Вложение.Ключ);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", НовыйДокументСсылка);
		ПараметрыФайла.Вставить("Автор", Неопределено);
		ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураИмениФайла.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураИмениФайла.Расширение));
		ПараметрыФайла.Вставить("ВремяИзменения", МестноеВремя(ПочтовоеСообщение.ДатаПолучения, ЧасовойПоясСеанса()));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ПочтовоеСообщение.ДатаПолучения);
		
		НовыйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресЗагруженногоФайла);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьПрисоединенныеФайлы(ПриемникВладелецФайла, МассивФайловИсточник)

	Для каждого ТекПрисоединенныйФайл Из МассивФайловИсточник Цикл
	
		АдресЗагруженногоФайла = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(ТекПрисоединенныйФайл));
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", ПриемникВладелецФайла);
		ПараметрыФайла.Вставить("Автор", Неопределено);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ТекПрисоединенныйФайл.Наименование);
		ПараметрыФайла.Вставить("РасширениеБезТочки", ТекПрисоединенныйФайл.Расширение);
		ПараметрыФайла.Вставить("ВремяИзменения", ТекПрисоединенныйФайл.ДатаМодификацииУниверсальная);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекПрисоединенныйФайл.ДатаМодификацииУниверсальная);
		
		НовыйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресЗагруженногоФайла);
	
	КонецЦикла;	

КонецПроцедуры

Процедура ПолучитьТекст(ДочерниеУзлы, Текст)
	
	Если ДочерниеУзлы.Количество() > 0 Тогда  
		
		Для Каждого Узел Из ДочерниеУзлы Цикл 
			
			ОбработкаУзлаТекста(Узел, Текст);
			
		КонецЦикла;
		
	Иначе
		
		Текст = Текст + Символы.ПС;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУзлаТекста(Узел, Текст)

	Дочерние = Узел.ДочерниеУзлы;
	
	Если Дочерние.Количество() = 0 Тогда 
		Если значениеЗаполнено(Узел.ТекстовоеСодержимое) 
			И Не ТипЗнч(Узел) = Тип("КомментарийDOM") Тогда
			Текст = Текст + Узел.ТекстовоеСодержимое + " ";
		КонецЕсли;
	Иначе
		Если НЕ Узел.ИмяУзла =  "style" Тогда
			ПолучитьТекст(Дочерние, Текст);
		КонецЕсли;
	КонецЕсли;
	
	Если  ЭтоПереносСтрокиHTML(Узел.ИмяУзла) Тогда 
		
		ДобавочныйТекст = ?(СокрЛП(Текст) = "", "", Символы.ПС);
		// чтобы в начале письма не было лишних пустых строк
		Текст = Текст + ДобавочныйТекст; 
		
	КонецЕсли;

КонецПроцедуры


Функция ЭтоПереносСтрокиHTML(ИмяУзла)

	ЭтоПеренос = ИмяУзла = "p"
				Или ИмяУзла = "br"  
				Или ИмяУзла = "caption" 
				Или ИмяУзла = "tr" 
				Или ИмяУзла = "li"  
				Или ИмяУзла = "div";
				
	Возврат ЭтоПеренос;

КонецФункции

Функция ЭтоОсновнойКонтейнерHTML(врТекст)

	ЭтоКонтейнер = СтрНайти(врТекст, "<BODY>") > 0
			Или СтрНайти(врТекст, "</BODY>") > 0
			Или СтрНайти(врТекст, "<HEAD>") > 0
			Или СтрНайти(врТекст, "</HEAD>") > 0;
	
	Возврат ЭтоКонтейнер;

КонецФункции // ЭтоОсновнойКонтейнерHTML()

Функция ЕстьЭлектронноеПисьмоВходящееПоИдентификатору(Идентификатор)

	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	НайденныйДокумент = Документы.ЭлектронныеПисьмаВходящие.НайтиПоРеквизиту("ИдентификаторНаСервере", Идентификатор);
	
	Возврат ЗначениеЗаполнено(НайденныйДокумент);
	
КонецФункции // ЕстьЭлектронноеПисьмоВходящееПоИдентификатору()

// Возвращает исполнителя и проект, исходя из ответственных за проект, где было максимальное кол-во задач указанным инициатором
//
// Параметры:
//  Инициатор  - СправочникСсылка.Пользователи
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Структура  - содержит свойства:
//		* Проект - СправочникСсылка.Проекты
//		* Исполнитель - СправочникСсылка.Пользователи
//
Функция ИсполнительИПроектИзОтветственногоЗаПроект(Инициатор)
	
	РезультатПоИсполнителю = Новый Структура;
	РезультатПоИсполнителю.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	РезультатПоИсполнителю.Вставить("Исполнитель", Справочники.Пользователи.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроектыПользователиПроекта.Ссылка КАК Проект,
	               |	ПроектыПользователиПроекта.Пользователь КАК Инициатор,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачиПользователя.Ссылка) КАК КоличествоЗадач,
	               |	МИНИМУМ(ПроектыПользователиПроекта.Ссылка.ОтветственныйЗаПроект) КАК ОтветственныйЗаПроект
	               |ПОМЕСТИТЬ КолВоЗадачВходящихВРабочуюГруппуПроекта
	               |ИЗ
	               |	Справочник.Проекты.ПользователиПроекта КАК ПроектыПользователиПроекта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачиПользователя КАК ЗадачиПользователя
	               |		ПО ПроектыПользователиПроекта.Пользователь = ЗадачиПользователя.Инициатор
	               |			И ПроектыПользователиПроекта.Ссылка = ЗадачиПользователя.Проект
	               |ГДЕ
	               |	ПроектыПользователиПроекта.Пользователь = &Инициатор
	               |	И ПроектыПользователиПроекта.Ссылка.Актуальность
	               |	И НЕ ПроектыПользователиПроекта.Ссылка.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПроектыПользователиПроекта.Пользователь,
	               |	ПроектыПользователиПроекта.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КолВоЗадачВходящихВРабочуюГруппуПроекта.Проект КАК Проект,
	               |	КолВоЗадачВходящихВРабочуюГруппуПроекта.Инициатор КАК Инициатор,
	               |	КолВоЗадачВходящихВРабочуюГруппуПроекта.КоличествоЗадач КАК КоличествоЗадач,
	               |	КолВоЗадачВходящихВРабочуюГруппуПроекта.ОтветственныйЗаПроект КАК ОтветственныйЗаПроект
	               |ИЗ
	               |	КолВоЗадачВходящихВРабочуюГруппуПроекта КАК КолВоЗадачВходящихВРабочуюГруппуПроекта
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КоличествоЗадач УБЫВ";
	
	Запрос.УстановитьПараметр("Инициатор", Инициатор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		РезультатПоИсполнителю.Проект = Выборка.Проект;
		РезультатПоИсполнителю.Исполнитель = Выборка.ОтветственныйЗаПроект;
		
		Возврат РезультатПоИсполнителю;
		
	КонецЕсли;
	
	Возврат РезультатПоИсполнителю;

КонецФункции // ИсполнительИПроектИзОтветственногоЗаПроект()

Функция РезультатРазбораТемыПисьмаДляФормированияСообщения(ТекстОбработки)
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ЗадачаОснование", Задачи.ЗадачиПользователя.ПустаяСсылка());
	СтруктураРезультата.Вставить("СообщениеОснование", Справочники.СообщенияОбсуждений.ПустаяСсылка());
	
	ОбрабатываемыйТекст = ТекстОбработки;
	
	ПараметрИдентификатор = "Обр.Запрос№";  // АПК:1036 Специальная тема 
	
	НомерНачала = СтрНайти(ОбрабатываемыйТекст, ПараметрИдентификатор);
	
	Если НомерНачала = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	ОбрабатываемыйТекст = Сред(ОбрабатываемыйТекст, НомерНачала + СтрДлина(ПараметрИдентификатор), СтрДлина(ОбрабатываемыйТекст));  
	
	КодЗапроса = СокрЛП(ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ОбрабатываемыйТекст, "#"));
	КодСообщения = СокрЛП(ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ОбрабатываемыйТекст, " "));
	
	// Задача пользователя
	Если Не ЗначениеЗаполнено(КодЗапроса) Тогда
		Возврат СтруктураРезультата;	
	КонецЕсли;
	
	НайденнаяЗадача = Задачи.ЗадачиПользователя.НайтиПоНомеру(КодЗапроса);
	СтруктураРезультата.ЗадачаОснование = НайденнаяЗадача;
	
	// Сообщение обсуждения
	Если Не ЗначениеЗаполнено(КодСообщения) Тогда
		Возврат СтруктураРезультата;	
	КонецЕсли;
	
	КодСообщения = ?(СтрДлина(КодСообщения) > 11, Лев(КодСообщения, 11), КодСообщения);
	
	Если Не ОбщегоНазначенияКлиентСервер.ЭтоЧисло(КодСообщения) Тогда
		Возврат СтруктураРезультата;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщенияОбсуждений.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
	               |ГДЕ
	               |	СообщенияОбсуждений.Код = &КодСообщения
	               |	И СообщенияОбсуждений.ВладелецСообщения.Документ = &Задача";
	
	Запрос.УстановитьПараметр("Задача", НайденнаяЗадача);
	Запрос.УстановитьПараметр("КодСообщения", КодСообщения);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	    СтруктураРезультата.СообщениеОснование = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции 

#Область РаботаСПолучателями

Процедура ЗаполнитьПолучателейИКопии(ПочтовоеСообщение, НовыйДокумент)

    Если Ложь Тогда
    
    	НовыйДокумент = Документы.ЭлектронныеПисьмаВходящие.СоздатьДокумент();
    
    КонецЕсли;
    
    СписокПолучателей               = ПолучитьСписокПолучателей(ПочтовоеСообщение);
    СписокПолучателейКопии          = ПолучитьСписокПолучателейКопии(ПочтовоеСообщение);
    СписокПолучателейСлепыхКопий    = ПолучитьСписокПолучателейСлепыхКопий(ПочтовоеСообщение) ;
    
    ОбщийМассив = ПолучитьОбщийМассивПолучателей(СписокПолучателей,
                                                    СписокПолучателейКопии,
                                                    СписокПолучателейСлепыхКопий);
    
    Выборка = ПолучитьВыборкуПоМассивуАдресов(ОбщийМассив);
    
    Пока Выборка.Следующий() Цикл
        
        ДобавитьВТабЧастьПисьмаДляЗаполненияПолучателей(НовыйДокумент, Выборка, СписокПолучателей, СписокПолучателейКопии, СписокПолучателейСлепыхКопий);
        
    КонецЦикла;
    
    ДобавитьКогоНетВБазе(НовыйДокумент, СписокПолучателей, СписокПолучателейКопии, СписокПолучателейСлепыхКопий);
    
КонецПроцедуры

Функция ПолучитьСписокПолучателейКопии(ПочтовоеСообщение) 
	
	МассивПолучателей = ПолучитьМассивПолучателей(ПочтовоеСообщение);
	Список = Новый СписокЗначений;
	Для каждого ПочтовыйАдрес Из ПочтовоеСообщение.Копии Цикл
        
        Если МассивПолучателей.Найти( ПочтовыйАдрес.Адрес ) = Неопределено Тогда
            
            Список.Добавить(ПочтовыйАдрес.Адрес, ПочтовыйАдрес.ОтображаемоеИмя);
            
        КонецЕсли;
    КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция ПолучитьСписокПолучателей(ПочтовоеСообщение)
	
	Список = Новый СписокЗначений;
	Для каждого ПочтовыйАдрес Из ПочтовоеСообщение.Получатели Цикл
		
		Список.Добавить(ПочтовыйАдрес.Адрес, ПочтовыйАдрес.ОтображаемоеИмя);                
		
	КонецЦикла;
	
	Возврат Список ;
	
КонецФункции

Функция ПолучитьСписокПолучателейСлепыхКопий(ПочтовоеСообщение)
	
    МассивПолучателей = ПолучитьМассивПолучателей(ПочтовоеСообщение);
    МассивПолучателейКопий = ПолучитьМассивПолучателейКопии(ПочтовоеСообщение);
    
	Список = Новый СписокЗначений;
	Для каждого ПочтовыйАдрес Из ПочтовоеСообщение.СлепыеКопии Цикл
		
        Если МассивПолучателей.Найти(ПочтовыйАдрес.Адрес) = Неопределено Тогда
            
            Если МассивПолучателейКопий.Найти(ПочтовыйАдрес.Адрес) = Неопределено Тогда
                
		        Список.Добавить(ПочтовыйАдрес.Адрес, ПочтовыйАдрес.ОтображаемоеИмя);
		
            КонецЕсли;
            
        КонецЕсли;
        
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Процедура ДобавитьСписокВМассив(МассивПриемник, Список)

	Для каждого ЭлементИсточника Из Список Цикл
    
    	МассивПриемник.Добавить(ЭлементИсточника.Значение);
    
    КонецЦикла;

КонецПроцедуры

Функция ПолучитьОбщийМассивПолучателей(СписокПолучателей, СписокПолучателейКопии, СписокПолучателейСлепыхКопий)

	Массив = Новый Массив;
    
    ДобавитьСписокВМассив(Массив, СписокПолучателей);
    ДобавитьСписокВМассив(Массив, СписокПолучателейКопии);
    ДобавитьСписокВМассив(Массив, СписокПолучателейСлепыхКопий);
    
    Возврат Массив;
    
КонецФункции // ()

Процедура ДобавитьВТабЧастьПисьмаДляЗаполненияПолучателей(НовыйДокумент, 
                                                            Выборка, 
                                                            СписокПолучателей, 
                                                            СписокПолучателейКопии, 
                                                            СписокПолучателейСлепыхКопий)
    
    КоллекцияДобавления  = Неопределено;
    
    НайденныйЭлемент = СписокПолучателей.НайтиПоЗначению(Выборка.Адрес) ;
    
    Если НайденныйЭлемент <> Неопределено Тогда
        
        КоллекцияДобавления = НовыйДокумент.ПолучателиПисьма;
        Представление       = НайденныйЭлемент.Представление;
        СписокПолучателей.Удалить(НайденныйЭлемент);
        
    Иначе
               
        НайденныйЭлемент = СписокПолучателейКопии.НайтиПоЗначению(Выборка.Адрес) ;
        Если НайденныйЭлемент  <> Неопределено Тогда
            
            КоллекцияДобавления = НовыйДокумент.ПолучателиКопий;    
            Представление       = НайденныйЭлемент.Представление;
            СписокПолучателейКопии.Удалить(НайденныйЭлемент);
            
        Иначе
            
            НайденныйЭлемент = СписокПолучателейСлепыхКопий.НайтиПоЗначению(Выборка.Адрес) ;
            Если НайденныйЭлемент <> Неопределено Тогда
                
                КоллекцияДобавления = НовыйДокумент.ПолучателиСлепыхКопий;                     
                Представление       = НайденныйЭлемент.Представление;
                СписокПолучателейСлепыхКопий.Удалить(НайденныйЭлемент);                
                
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;

    Если КоллекцияДобавления = Неопределено Тогда
    
    	Возврат;
    
    КонецЕсли;
    
    НоваяСтрока = КоллекцияДобавления.Добавить();
    НоваяСтрока.Адрес           = Выборка.Адрес ;
    НоваяСтрока.Контакт         = Выборка.Ссылка ;
    НоваяСтрока.Представление   = Представление ;
        
КонецПроцедуры // ()

Процедура ДобавитьВКоллекцию(Коллекция, Список)

	Для каждого ЭлементСписка Из Список Цикл
    
    	НоваяСтрока = Коллекция.Добавить();
        НоваяСтрока.Адрес = ЭлементСписка.Значение;
        НоваяСтрока.Представление = ЭлементСписка.Представление;
    
    КонецЦикла;

КонецПроцедуры

Процедура ДобавитьКогоНетВБазе(НовыйДокумент, СписокПолучателей, СписокПолучателейКопии, СписокПолучателейСлепыхКопий)

    Если Ложь Тогда
    
    	НовыйДокумент = Документы.ЭлектронныеПисьмаВходящие.СоздатьДокумент();
    
    КонецЕсли;
    
	ДобавитьВКоллекцию(НовыйДокумент.ПолучателиПисьма, СписокПолучателей);
    ДобавитьВКоллекцию(НовыйДокумент.ПолучателиКопий, СписокПолучателейКопии);
    ДобавитьВКоллекцию(НовыйДокумент.ПолучателиСлепыхКопий, СписокПолучателейСлепыхКопий);

КонецПроцедуры

Функция ПолучитьВыборкуПоМассивуАдресов(МассивАдресов)

    Запрос = Новый Запрос;
	// BSLLS:RefOveruse-off
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка,
	               |	ПользователиКонтактнаяИнформация.АдресЭП КАК Адрес
	               |ИЗ
	               |	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	               |ГДЕ
	               |	ПользователиКонтактнаяИнформация.Вид = &Вид
	               |	И ПользователиКонтактнаяИнформация.АдресЭП В(&ЭлектроннаяПочта)
	               |	И НЕ ПользователиКонтактнаяИнформация.Ссылка.ПометкаУдаления";
				   
    // BSLLS:RefOveruse-on
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
    Запрос.УстановитьПараметр("ЭлектроннаяПочта", МассивАдресов);

    РезультатЗапроса = Запрос.Выполнить();

    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

    Возврат ВыборкаДетальныеЗаписи;
    
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

