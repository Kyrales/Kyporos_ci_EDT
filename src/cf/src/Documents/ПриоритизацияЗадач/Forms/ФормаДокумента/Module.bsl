
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов	
	
	ПорядокСортировки = НаборПолейДляСортировки();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Свойство("НомерСтрокиДляПозиционирования") Тогда
		// Позиционируемся на необходимой строке, если был передан параметр для позиционирования. 
		
		НомерСтрокиДляПозиционирования = Параметры.НомерСтрокиДляПозиционирования;
		
		Элементы.СписокЗадач.ТекущаяСтрока = Объект.СписокЗадач[НомерСтрокиДляПозиционирования - 1].ПолучитьИдентификатор();
		
	КонецЕсли;
	
	ИспользуютсяКонфигурационныеЕдиницы = ПолучитьФункциональнуюОпцию("ИспользоватьКонфигурационныеЕдиницы");
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ТолькоПросмотр Тогда
		
		Если Не Пользователи.ЭтоПолноправныйПользователь() 
			И ( Объект.ПриоритизацияЗавершена
				Или Объект.Дата <= НачалоМесяца(ТекущаяДатаСеанса())) Тогда
			
			ТолькоПросмотр = Истина;
			Элементы.ФормаВключитьВозможностьИзменения.Доступность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДополнительныеСведенияОЗадачах();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НаборПолейДляСортировки = НаборПолейДляСортировки();
	ЭлементыКУдалению = Новый Массив;
	
	Для каждого ЭлементСписка Из ПорядокСортировки Цикл
		
		Если НаборПолейДляСортировки.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
			
			ЭлементыКУдалению.Добавить(ЭлементСписка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ЭлементСписка Из ЭлементыКУдалению Цикл
		
		ПорядокСортировки.Удалить(ЭлементСписка);
		
	КонецЦикла;
	
	ОбновитьПредставлениеПолейСортировки(ЭтотОбъект);
	ЗаполнитьДополнительныеСведенияОЗадачах(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	УстановитьОтборыТаблицыЗамены();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОтметитьПовторяющиесяЗадачи(ТекущийОбъект.СписокЗадач);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗадач.Задача КАК Задача,
	|	ТаблицаЗадач.ПриоритетВыполнения КАК ПриоритетВыполнения
	|ПОМЕСТИТЬ ВТ_ТаблицаЗадач
	|ИЗ
	|	&ТаблицаЗадач КАК ТаблицаЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПользователя.Ссылка КАК Задача,
	|	ВТ_ТаблицаЗадач.ПриоритетВыполнения КАК ПриоритетВыполнения
	|ИЗ
	|	ВТ_ТаблицаЗадач КАК ВТ_ТаблицаЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|		ПО ВТ_ТаблицаЗадач.Задача = ЗадачиПользователя.Ссылка
	|			И ВТ_ТаблицаЗадач.ПриоритетВыполнения <> ЗадачиПользователя.ПриоритетВыполнения";
	
	Запрос.УстановитьПараметр("ТаблицаЗадач", Объект.СписокЗадач.Выгрузить(, "Задача, ПриоритетВыполнения"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
		ЗадачаОбъект.Заблокировать(); // Выполнить блокировку объекта от изменения другими режимами.
		ЗадачаОбъект.ПриоритетВыполнения = Выборка.ПриоритетВыполнения;
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьОтборыТаблицыЗамены();
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДополнительныеСведенияОЗадачах();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства	
	
	Если ИмяСобытия = "Справочник.ЗаменыЗадачПоПриоритизации.Изменение" 
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		
		УстановитьОтборыТаблицыЗамены();
		
		ЗаполнитьДополнительныеСведенияОЗадачах();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпринтПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Спринт) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Дата = ОбщегоНазначенияКупоросВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Спринт, "ДатаНачала");

КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ПриИзмененииПроекта();
	
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();	 
	// Конец СтандартныеПодсистемы.Свойства	
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьВложенныеПроектыПриИзменении(Элемент)
	
	ПриИзмененииПроекта();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНераспределенныеЗадачиПриИзменении(Элемент)
	
	ЗаполнитьДополнительныеСведенияОЗадачах(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.Дата = НачалоМесяца(ДобавитьМесяц(Объект.Дата, Направление));
	ПриИзмененииДатыДокумента();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.Дата = НачалоМесяца(Объект.Дата);
	ПриИзмененииДатыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСортировкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ПорядокСортировки", ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПорядокСортировки));
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПорядкаСортировки", ЭтотОбъект);
	ОткрытьФорму("Документ.ПриоритизацияЗадач.Форма.НастройкаПорядкаСортировки", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПорядкаСортировки(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПорядокСортировки = Результат;
	ОбновитьПредставлениеПолейСортировки(ЭтотОбъект);
	
КонецПроцедуры

// Вспомогательные функции

&НаКлиенте
Процедура ПриИзмененииДатыДокумента()
	
	Объект.Исполнители.Очистить();
	ОбновитьИсполнителейПоПроектуНаСервере();
	ОбновитьОстатокВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПроекта()
	
	Объект.СписокЗадач.Очистить();
	Объект.Исполнители.Очистить();
	РаспределеноВремени = 0;
	ОбновитьИсполнителейПоПроектуНаСервере();
	ОбновитьОстатокВремени();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьВозможностьИзменения(Команда)
	
	ТолькоПросмотр = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗадач

//////////////////////////////////////////////////////////////////////////////////////////
// ГРУППА "СтраницаСписокЗадач"

// Команды

// - Заполнение задач

&НаКлиенте
Процедура ЗаполнитьЗадачиПоПроекту(Команда)
	
	Если Объект.СписокЗадач.Количество() = 0 Тогда
		
		ЗаполнитьЗадачиПоПроектуНаСервере(Ложь);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗадачиПоПроектуПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Список задач будет перезаполнен. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыеЗадачиПоПроекту(Команда)
	
	ЗаполнитьЗадачиПоПроектуНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗадачиПоПроектуПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьЗадачиПоПроектуНаСервере(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирование списка задач по проекту
//
// Параметры:
//  ТолькоНовые	 - Булево	 - если Истина, то будет только добавление новых задач в конец списка
//
&НаСервере
Процедура ЗаполнитьЗадачиПоПроектуНаСервере(ТолькоНовые)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриоритизацияЗадачСписокЗадач.Задача КАК Задача,
	|	ПриоритизацияЗадачСписокЗадач.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ВТ_ЗадачиПредыдущейПриоритизации
	|ИЗ
	|	Документ.ПриоритизацияЗадач.СписокЗадач КАК ПриоритизацияЗадачСписокЗадач
	|ГДЕ
	|	ПриоритизацияЗадачСписокЗадач.Ссылка.Дата = &ПрошлыйМесяц
	|	И ПриоритизацияЗадачСписокЗадач.Задача.Проект = &Проект
	|	И НЕ ПриоритизацияЗадачСписокЗадач.Ссылка.ПометкаУдаления
	|	И &ЗаполнятьКомментарийИзПрошлойПриоритизации
	|	И НЕ ПриоритизацияЗадачСписокЗадач.Ссылка.СлужебнаяПриоритизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка КАК Задача,
	|	ЗадачиПользователя.ОстатокТрудозатрат КАК Трудозатраты,
	|	ЗадачиПользователя.ТрудозатратыПланНаСпринт КАК ТрудозатратыПланНаСпринт,
	|	ЕСТЬNULL(ВТ_ЗадачиПредыдущейПриоритизации.Комментарий, """") КАК Комментарий
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияЗадач КАК ТекущиеСостоянияЗадач
	|		ПО ЗадачиПользователя.Ссылка = ТекущиеСостоянияЗадач.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадачиПредыдущейПриоритизации КАК ВТ_ЗадачиПредыдущейПриоритизации
	|		ПО ЗадачиПользователя.Ссылка = ВТ_ЗадачиПредыдущейПриоритизации.Задача
	|ГДЕ
	|	ЗадачиПользователя.Проект = &Проект
	|	И ЕСТЬNULL(ТекущиеСостоянияЗадач.Состояние, ЗНАЧЕНИЕ(Справочник.СостоянияЗадач.Зарегистрирована)) В (&СостоянияДляПланирования)
	|	И (ЗадачиПользователя.ТрудозатратыПлановые = 0
	|			ИЛИ &УчитыватьЗадачиСДокументомОценки)
	|	И НЕ ЕСТЬNULL(ТекущиеСостоянияЗадач.СтатусОбработки, ЗНАЧЕНИЕ(Справочник.СтатусыОбработкиЗадач.ПустаяСсылка)) В (&ИсключаемыеСтатусы)
	|	И ЗадачиПользователя.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.ТипыЗадач.Разработка)";
	
	Если Объект.УчитыватьВложенныеПроекты Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &Проект", "В ИЕРАРХИИ (&Проект)");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Запрос.УстановитьПараметр("УчитыватьЗадачиСДокументомОценки", УчитыватьЗадачиСДокументомОценки);
	Запрос.УстановитьПараметр("ИсключаемыеСтатусы", ИсключаемыеСтатусы.ВыгрузитьЗначения());
	ПрошлыйМесяц = НачалоМесяца(ДобавитьМесяц(Объект.Дата, -1));
	Запрос.УстановитьПараметр("ПрошлыйМесяц", ПрошлыйМесяц);
	Запрос.УстановитьПараметр("ЗаполнятьКомментарийИзПрошлойПриоритизации", ЗаполнятьКомментарийИзПрошлойПриоритизации);
	
	СостоянияДляПланирования = Новый Массив;
	СостоянияДляПланирования.Добавить(Справочники.СостоянияЗадач.Зарегистрирована);
	СостоянияДляПланирования.Добавить(Справочники.СостоянияЗадач.ВРаботе);
	СостоянияДляПланирования.Добавить(Справочники.СостоянияЗадач.НаУточнении);
	СостоянияДляПланирования.Добавить(Справочники.СостоянияЗадач.Приостановлена);
	СостоянияДляПланирования.Добавить(Справочники.СостоянияЗадач.Согласование);
	СостоянияДляПланирования.Добавить(Справочники.СостоянияЗадач.ФормированиеТехническогоРешения);
	Запрос.УстановитьПараметр("СостоянияДляПланирования", СостоянияДляПланирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	
	Если ТолькоНовые Тогда
		
		ТаблицаЗадач = Объект.СписокЗадач.Выгрузить(, "Задача");
		ТаблицаЗадач.Индексы.Добавить("Задача");
		
		Для каждого СтрокаТаблицы Из Выгрузка Цикл
			
			Если ТаблицаЗадач.Найти(СтрокаТаблицы.Задача, "Задача") <> Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			НоваяСтрока = Объект.СписокЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			// Обновляем все трудозатраты.
			НоваяСтрока.Трудозатраты = 
				ПланированиеЗадачСервер.СкорректироватьТрудозатратыПоПлануНаСпринт(СтрокаТаблицы.Трудозатраты, СтрокаТаблицы.ТрудозатратыПланНаСпринт);
			
		КонецЦикла;
		
	Иначе
		
		// Обновить комментарий доп.вставкой периода.
		Если ЗаполнятьКомментарийИзПрошлойПриоритизации Тогда
			
			ОбновитьКомментарийИзПрошлойПриоритизации(Выгрузка, ПрошлыйМесяц);
			
		КонецЕсли;
		
		Объект.СписокЗадач.Загрузить(Выгрузка);
		
		// Обновляем все трудозатраты.
		ОбновитьТрудозатратыВЗадачахНаСервере();
		
	КонецЕсли;
	
	ЗаполнитьДополнительныеСведенияОЗадачах(Истина);
	
	Если Не ТолькоНовые Тогда
		
		СортироватьСогласноНастройкамНаСервере();
		
	КонецЕсли;
	
	ОтметитьПовторяющиесяЗадачи(Объект.СписокЗадач);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьКомментарийИзПрошлойПриоритизации(Выгрузка, ПрошлыйМесяц)

	Для каждого ТекСтрокаВыгрузки Из Выгрузка Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрокаВыгрузки.Комментарий) Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоКомментария = ">>[";
		Если Сред(ТекСтрокаВыгрузки.Комментарий, 1, 3) = НачалоКомментария Тогда
			// Не было новых комментариев.
			Продолжить;	
		КонецЕсли;	
		
		ВставкаВКомментарий = СтрШаблон(НСтр("ru = '>>[%1]
			|'"), Формат(ПрошлыйМесяц, "ДФ='MMMM yyyy'")); 
		ТекСтрокаВыгрузки.Комментарий = ВставкаВКомментарий + ТекСтрокаВыгрузки.Комментарий;
		
	КонецЦикла;

КонецПроцедуры 


&НаКлиенте
Процедура ДобавитьЗадачуПоНомеруСсылке(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЗадачуПоНомеруСсылкеПродолжение", ЭтотОбъект);
	Подсказка = НСтр("ru = 'Введите внешний номер задачи, идентификатор или ссылку.'");
	ПоказатьВводСтроки(ОписаниеОповещения, , Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуПоНомеруСсылкеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		РезультатДобавления = ДобавитьЗадачуПоНомеруСсылкеНаСервере(Результат);
		ПоказатьПредупреждение(, РезультатДобавления.РезультатТекст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЗадачуПоНомеруСсылкеНаСервере(ИдентификаторЗадачи)
	
	РезультатДобавления = ПланированиеЗадачСервер.ДобавитьЗадачуПоНомеруСсылкеВТаблицу(Объект, "СписокЗадач", ИдентификаторЗадачи);
	
	Если РезультатДобавления.ЗадачаДобавлена Тогда
		
		Элементы.СписокЗадач.ТекущаяСтрока = РезультатДобавления.ИдентификаторСтрокиЗадачи;

		ЗаполнитьДополнительныеСведенияОЗадачах(, Истина);
		
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТрудозатратыВЗадачах(Команда)
	
	Если Объект.СписокЗадач.Количество() = 0 Тогда
		
		Возврат;
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьТрудозатратыВЗадачахПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Трудозатраты по всем задачам будут обновлены. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТрудозатратыВЗадачахПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОбновитьТрудозатратыВЗадачахНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТрудозатратыВЗадачахНаСервере(Задача = Неопределено)
	
	ТаблицаДанных = Объект.СписокЗадач.Выгрузить();
	ПланированиеЗадачСервер.ОбновитьТрудозатратыВЗадачах(ТаблицаДанных, Задача);
	Объект.СписокЗадач.Загрузить(ТаблицаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТрудозатратыПоЗадаче(Команда)
	
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда

		ОбновитьТрудозатратыВЗадачахНаСервере(ТекущиеДанные.Задача);
		
		// Спозиционироваться на задаче, в которой обновлены трудозараты.
		СпозиционироватьсяНаЗадачеВСписке(ТекущиеДанные.Задача);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПризнакРучногоИзменения(Команда)
	
	Для каждого СтрокаТаблицы Из Объект.СписокЗадач Цикл
		
		СтрокаТаблицы.РучноеИзменение = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

// - Перемещение задач

&НаКлиенте
Процедура ПереместитьЗадачуНаУказаннуюПозицию(Команда)
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.СписокЗадач.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПозицииПеремещения", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВводЧисла(ОписаниеОповещения, Элементы.СписокЗадач.ТекущиеДанные.НомерСтроки, НСтр("ru = 'Позиция, на которую необходимо переместить строку'"), 3, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПозицииПеремещения(НомерСтроки, ДополнительныеПараметры) Экспорт
	
	Если НомерСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПереместитьЗадачуНаПозицию(ДополнительныеПараметры.ИдентификаторСтроки, НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЗадачуВКонецРаспределенных(Команда)
	
	ТекущаяСтрока = Элементы.СписокЗадач.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоЗадач = Объект.СписокЗадач.Количество();
	НоваяПозиция = 0;
	ТекущийНомерСтроки = Элементы.СписокЗадач.ТекущиеДанные.НомерСтроки;
	
	Для сч = 1 По КоличествоЗадач Цикл
		
		СтрокаТаблицы = Объект.СписокЗадач[КоличествоЗадач - сч];
		
		Если СтрокаТаблицы.Распределена
			И Не СтрокаТаблицы.УчитыватьТолькоВремяНаОценку
			И ТекущийНомерСтроки <> СтрокаТаблицы.НомерСтроки Тогда
			
			НоваяПозиция = СтрокаТаблицы.НомерСтроки;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийНомерСтроки = НоваяПозиция Тогда
		// Текущая задача и есть последняя распределенная.
		Возврат;
	КонецЕсли;
	
	Если Элементы.СписокЗадач.ТекущиеДанные.НомерСтроки > НоваяПозиция Тогда
		
		НоваяПозиция = НоваяПозиция + 1;
		
	КонецЕсли;
	
	ПереместитьЗадачуНаПозицию(ТекущаяСтрока, НоваяПозиция);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЗадачуНаПозицию(ИдентификаторСтроки, НомерСтроки)
	
	НомерСтроки = Макс(НомерСтроки, 1);
	НомерСтроки = Мин(НомерСтроки, Объект.СписокЗадач.Количество());
	
	СтрокаТаблицы = Объект.СписокЗадач.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИндексСтроки = Объект.СписокЗадач.Индекс(СтрокаТаблицы);
	Объект.СписокЗадач.Сдвинуть(ИндексСтроки, НомерСтроки - СтрокаТаблицы.НомерСтроки);
	
КонецПроцедуры

// - Распределение

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки(Истина);
	РаспределеноВремени = Объект.СписокЗадач.Итог("Трудозатраты");
	ОбновитьОстатокВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	РаспределеноВремени = 0;
	ОбновитьОстатокВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажки(НовоеЗначение)
	
	Для каждого СтрокаТаблицы Из Объект.СписокЗадач Цикл
		
		СтрокаТаблицы.Распределена = НовоеЗначение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьАвтоматически(Команда)
	
	ОстатокДляРаспределения = Объект.Исполнители.Итог("ОстатокВремени");
	РаспределеноВремени = 0;
	
	Для каждого СтрокаТаблицы Из Объект.СписокЗадач Цикл
		
		Если ОстатокДляРаспределения <= 0 Тогда
			
			СтрокаТаблицы.Распределена = Ложь;
			
		Иначе
			
			СтрокаТаблицы.Распределена = Истина;
			ОстатокДляРаспределения = ОстатокДляРаспределения - СтрокаТаблицы.Трудозатраты;
			РаспределеноВремени = РаспределеноВремени + СтрокаТаблицы.Трудозатраты;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьОстатокВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьРаспределенныеВНачало(Команда)
	
	Объект.СписокЗадач.Сортировать("Распределена Убыв, НомерСтроки");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСогласноНастройкам(Команда)
	
	СортироватьСогласноНастройкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СортироватьСогласноНастройкамНаСервере()
	
	ПоляСортировки = "Распределена Убыв";
	
	Для каждого ЭлементСписка Из ПорядокСортировки Цикл
		
		ПоляСортировки = ПоляСортировки + ", " + ЭлементСписка.Значение;
		
		Если ЭлементСписка.Пометка Тогда
			
			ПоляСортировки = ПоляСортировки + " Убыв";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоляСортировки = ПоляСортировки + ", НомерСтроки";
	
	Объект.СписокЗадач.Сортировать(ПоляСортировки);
	
КонецПроцедуры

// - ОткрытьЗадачуВоВнешнейСистеме

&НаКлиенте
Процедура ОткрытьЗадачуВоВнешнейСистеме(Команда)
	
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ТекущиеДанные.ВнешняяСсылка);
		
	КонецЕсли;
		
КонецПроцедуры

// - Выгрузка в Excel

&НаКлиенте
Процедура ВыгрузитьЗадачиВExcel(Команда)
	
	ВыгрузитьЗадачиВExcelНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗадачиВСуществующийФайл(Команда)
	
	ВыгрузитьЗадачиВExcelНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗадачиВExcelНаКлиенте(ВСуществующийФайл = Ложь)
	
	Если Модифицированность Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Перед выгрузкой необходимо сохранить документ.'"));
		Возврат;
		
	КонецЕсли;
	
	ПредставлениеПроекта = ПредставлениеПроекта(Объект.Проект);
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.Фильтр = "Файл приоритизации|*.xlsx";
	ИмяФайла = НСтр("ru = '%1 %2.xlsx'");
	ИмяФайла = СтрШаблон(ИмяФайла, Формат(Объект.Дата, "ДФ=yyyy-MM-dd;"), ПредставлениеПроекта);
	ВыборФайла.ПолноеИмяФайла = ИмяФайла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВСуществующийФайл", ВСуществующийФайл);
	ДополнительныеПараметры.Вставить("ИмяСтраницы", ПредставлениеПроекта);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗадачиВExcelПослеВыбораФайла", ЭтотОбъект, ДополнительныеПараметры);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОписаниеОповещения, ВыборФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗадачиВExcelПослеВыбораФайла(ПолноеИмяФайла, ДополнительныеПараметры) Экспорт
	
#Если Не ВебКлиент Тогда
	
	Если ПолноеИмяФайла = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяФайла = ПолноеИмяФайла[0];
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx");   // АПК:441 Не проверять имя файла после его использования 
	ОписаниеФайла = ВыгрузитьЗадачиВExcelНаСервере();
	ПолучитьФайлыИзХранилища(ОписаниеФайла.АдресВХранилище, ИмяВременногоФайла);
	
	ВыгрузкаЗавершенаУспешно = Истина;
	
	Если Не ДополнительныеПараметры.ВСуществующийФайл Тогда
		
		ПереместитьФайл(ИмяВременногоФайла, ИмяФайла);
		
	КонецЕсли;
	
	// Обработаем файл через Excel.
	Если ОбрабатыватьФайлВыгрузкиВExcel Тогда
		
		ВыгрузкаЗавершенаУспешно = ОбработатьФайлВыгрузкиВExcel(ИмяФайла, 
			ОписаниеФайла.КоличествоЗадач, 
			ОписаниеФайла.СписокСсылок, 
			ИмяВременногоФайла, 
			ДополнительныеПараметры);
		
	КонецЕсли;
	
	Если ВыгрузкаЗавершенаУспешно Тогда
		
		ФайловаяСистемаКлиент.ОткрытьФайл(ИмяФайла);
		
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьЗадачиВExcelНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриоритизацияЗадачСписокЗадач.Задача КАК Задача,
	|	ПриоритизацияЗадачСписокЗадач.НомерСтроки КАК НомерСтроки,
	|	ПриоритизацияЗадачСписокЗадач.Задача.Наименование КАК Наименование,
	|	ПриоритизацияЗадачСписокЗадач.Задача.Описание КАК Описание,
	|	ПриоритизацияЗадачСписокЗадач.Трудозатраты КАК Трудозатраты,
	|	ПриоритизацияЗадачСписокЗадач.Задача.ВнешняяСсылка КАК ВнешняяСсылка,
	|	ВЫБОР
	|		КОГДА ПриоритизацияЗадачСписокЗадач.Задача.ВнешнийНомер = """"
	|			ТОГДА ПриоритизацияЗадачСписокЗадач.Задача.Номер
	|		ИНАЧЕ ПриоритизацияЗадачСписокЗадач.Задача.ВнешнийНомер
	|	КОНЕЦ КАК НомерЗапроса,
	|	ПриоритизацияЗадачСписокЗадач.Задача.Номер КАК НомерЗадачи,
	|	ПриоритизацияЗадачСписокЗадач.Задача.ПриоритетВыполнения КАК ПриоритетВыполнения,
	|	ПриоритизацияЗадачСписокЗадач.Распределена КАК Распределена,
	|	ПриоритизацияЗадачСписокЗадач.Задача.ПолучательУслуг КАК ПолучательУслуг,
	|	ПриоритизацияЗадачСписокЗадач.Задача.ПолучательУслуг.Организация КАК Организация,
	|	ПриоритизацияЗадачСписокЗадач.Комментарий КАК Комментарий,
	|	ПриоритизацияЗадачСписокЗадач.УчитыватьТолькоВремяНаОценку КАК УчитыватьТолькоВремяНаОценку,
	|	ПриоритизацияЗадачСписокЗадач.Задача.КонфигурационнаяЕдиница КАК КонфигурационнаяЕдиница
	|ИЗ
	|	Документ.ПриоритизацияЗадач.СписокЗадач КАК ПриоритизацияЗадачСписокЗадач
	|ГДЕ
	|	ПриоритизацияЗадачСписокЗадач.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Макет = Документы.ПриоритизацияЗадач.ПолучитьМакет("СписокЗадач");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// ШАПКА
	ШапкаМакета = ?(ИспользуютсяКонфигурационныеЕдиницы, "ШапкаСКЕ", "Шапка");
	ОбластьШапка = Макет.ПолучитьОбласть(ШапкаМакета);
	
	ОбластьШапка.Параметры.ДоступноВремени = Объект.Исполнители.Итог("ОстатокВремени");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	// ТАБЛИЦА
	СписокСсылок = Новый Соответствие;

	СтрокаМакета = ?(ИспользуютсяКонфигурационныеЕдиницы, "СтрокаСКЕ", "Строка");
	ОбластьСтрока = Макет.ПолучитьОбласть(СтрокаМакета);
	
	СписокЗадач = Объект.СписокЗадач.Выгрузить(, "Задача, ДатаПервойПриоритизации");
	СписокЗадач.Индексы.Добавить("Задача");
	
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ОбластьСтрока.Параметры.Распределена = ?(Выборка.Распределена, "Да", "");	// для экселя необходимо явно задавать строку
		
		// Выделим цветом новые задачи.
		НайденнаяСтрока = СписокЗадач.Найти(Выборка.Задача, "Задача");
		ОбластьЯчейки = ОбластьСтрока.Область(1, 5);
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.ДатаПервойПриоритизации) Тогда
			
			ОбластьЯчейки.ЦветФона = Новый Цвет;
			
		Иначе
			
			ОбластьЯчейки.ЦветФона = WebЦвета.БледноЗеленый;
			
		КонецЕсли;
		
		// Выделим цветом задачи, по которым будет выполняться только оценка.
		ОбластьЯчейки = ОбластьСтрока.Область(1, 10);
		
		Если Выборка.УчитыватьТолькоВремяНаОценку Тогда
			
			ОбластьЯчейки.ЦветФона = WebЦвета.Желтый;
			
		Иначе
			
			ОбластьЯчейки.ЦветФона = Новый Цвет;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		ВнешняяСсылка = Выборка.ВнешняяСсылка;
		Если Не ЗначениеЗаполнено(ВнешняяСсылка) Тогда
			ВнешняяСсылка = РаботаСЗадачамиВызовСервера.ВнешняяСсылкаНаОбъект(Выборка.Задача);
		КонецЕсли;
		
		СписокСсылок.Вставить(ТабличныйДокумент.ВысотаТаблицы, ВнешняяСсылка);
		
	КонецЦикла;
	
	// ПОДВАЛ
	ПодвалМакета = ?(ИспользуютсяКонфигурационныеЕдиницы, "ПодвалСКЕ", "Подвал");
	ОбластьПодвал = Макет.ПолучитьОбласть(ПодвалМакета);
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	// ЗАПИСЬ В ФАЙЛ
	ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
	ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	
	// Поместим файл в хранилище.
	АдресВХранилище = ПоместитьФайлыВХранилище(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("АдресВХранилище", АдресВХранилище);
	ОписаниеФайла.Вставить("КоличествоЗадач", Выборка.Количество());
	ОписаниеФайла.Вставить("СписокСсылок", СписокСсылок);
	
	Возврат ОписаниеФайла;
	
КонецФункции

&НаКлиенте
Функция ОбработатьФайлВыгрузкиВExcel(ИмяФайла, КоличествоЗадач, СписокСсылок, ИмяВременногоФайла, ДополнительныеПараметры)
	
	MyExcel = РаботаСExcelКлиент.УстановитьСвязь(ИмяФайла);
	
	Если MyExcel = Неопределено Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось запустить Excel'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	MyExcel_Источник = Неопределено;
	
	Если ДополнительныеПараметры.ВСуществующийФайл Тогда
		
		MyExcel_Источник = РаботаСExcelКлиент.УстановитьСвязь(ИмяВременногоФайла);
		
		Если MyExcel_Источник = Неопределено Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось запустить Excel'"));
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		ОбработатьФайлВыгрузкиВExcel_ВыполнитьДействия(MyExcel, КоличествоЗадач, СписокСсылок, MyExcel_Источник, ДополнительныеПараметры);
		Возврат Истина;
		
	Исключение
	    
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		РаботаСExcelКлиент.РазорватьСвязь(MyExcel);
		РаботаСExcelКлиент.РазорватьСвязь(MyExcel_Источник);
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьФайлВыгрузкиВExcel_ВыполнитьДействия(MyExcel, КоличествоЗадач, СписокСсылок, MyExcel_Источник, ДополнительныеПараметры)
	
	Если ИспользуютсяКонфигурационныеЕдиницы Тогда
		КолВоКолонокТаблицы = 15;
	Иначе
		КолВоКолонокТаблицы = 14;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВСуществующийФайл Тогда
		
		ExcelФайл = MyExcel["ExcelФайл"];
		КоличествоЛистов = ExcelФайл.Sheets.Count();
		ПоследнийЛист = ExcelФайл.Sheets(КоличествоЛистов);
		WorkSheet = ExcelФайл.Sheets.Add();
		КоличествоЛистов = КоличествоЛистов + 1;
		MyExcel.Вставить("WS" + КоличествоЛистов, WorkSheet);
		
	    MyExcel_Источник["WS1"].Cells.Select();
	    MyExcel_Источник["Excel"].Selection.Copy();
		WorkSheet.Select();
		MyExcel["Excel"].ActiveSheet.Paste();
		
		Для сч = 1 По КолВоКолонокТаблицы Цикл
			
			WorkSheet.Columns(сч).ColumnWidth = MyExcel_Источник["WS1"].Columns(сч).ColumnWidth;
			
		КонецЦикла;
		
		Для сч = 1 По 4 Цикл
			
			WorkSheet.Rows(сч).RowHeight = MyExcel_Источник["WS1"].Rows(сч).RowHeight;
			
		КонецЦикла;
		
	Иначе
		
		WorkSheet = MyExcel["WS1"];
		
	КонецЕсли;
	
	ПерваяСтрока = 5;
	ПоследняяСтрока = КоличествоЗадач + ПерваяСтрока - 1;
	КолонкаСоСсылкой = 3;
		
	Для каждого ОписаниеСсылки Из СписокСсылок Цикл
		
		сч = ОписаниеСсылки.Ключ;
		
		WorkSheet.Rows(сч).RowHeight = 50;
		
		// Разблокировка колонок доступных для изменения.
		WorkSheet.Cells(сч, 11).Locked = Ложь;
		WorkSheet.Cells(сч, 12).Locked = Ложь;
		WorkSheet.Cells(сч, 13).Locked = Ложь;
		
		ФормулаСуммыСтроки = ?(ИспользуютсяКонфигурационныеЕдиницы, "=IF(RC[-3] = """",0,RC[-6])", "=IF(RC[-2] = """",0,RC[-5])");
		WorkSheet.Cells(сч, КолВоКолонокТаблицы).FormulaR1C1 = ФормулаСуммыСтроки;
		
		Если СтрНайти(ОписаниеСсылки.Значение, "https://") <> 0 Тогда
			
			Ячейка = WorkSheet.Cells(сч, КолонкаСоСсылкой);
			WorkSheet.Hyperlinks.Add(Ячейка, ОписаниеСсылки.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	WorkSheet.Columns(4).Hidden = True;
	
	WorkSheet.Cells(2, КолВоКолонокТаблицы).FormulaR1C1 = СтрШаблон("=SUM(R[3]C:R[%1]C)", ПоследняяСтрока - 2);
	WorkSheet.Cells(2, КолВоКолонокТаблицы).Font.Bold = True;
	
	// установка автофильтра шапки
	WorkSheet.Range("B4:M4").Select();
	MyExcel["Excel"].Selection.AutoFilter();
	
	Если ФиксироватьКолонкиСлеваПриВыгрузке Тогда
		
		WorkSheet.Range("F5").Select();
		
	Иначе
		
		WorkSheet.Range("A5").Select();
		
	КонецЕсли;
	
	MyExcel["Excel"].ActiveWindow.FreezePanes = True;
	
	WorkSheet.Protect(, Истина, Истина, Истина, , , , , , , , , , , Истина);
	WorkSheet.Name = НСтр("ru = 'Задачи'");
	
	MyExcel["Excel"].ActiveWindow.TabRatio = 0.5;
	
	РаботаСExcelКлиент.СохранитьФайл(MyExcel);
	РаботаСExcelКлиент.РазорватьСвязь(MyExcel);
	РаботаСExcelКлиент.РазорватьСвязь(MyExcel_Источник);
	
КонецПроцедуры

// - Загрузка из Excel

&НаКлиенте
Процедура ЗагрузитьЗадачиИзExcel(Команда)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Фильтр = "Файл приоритизации|*.xlsx";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьЗадачиИзExcelПослеВыбораФайла", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОписаниеОповещения, ВыборФайла);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗадачиИзExcelПослеВыбораФайла(ПолноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если ПолноеИмяФайла = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяФайла = ПолноеИмяФайла[0];
	MyExcel = РаботаСExcelКлиент.УстановитьСвязь(ИмяФайла);
	
	Если MyExcel = Неопределено Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось запустить Excel'"));
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		НомерЛиста = Неопределено;
		КоличествоЛистов = MyExcel["ExcelФайл"].Sheets.Count();
		
		Если КоличествоЛистов = 1 Тогда
			
			НомерЛиста = 0;
			
		Иначе
			
			СписокЛистов = Новый СписокЗначений;
			ПредставлениеПроекта = ПредставлениеПроекта(Объект.Проект);
			
			Для сч = 1 По КоличествоЛистов Цикл
				
				WorkSheet = MyExcel["ExcelФайл"].Sheets(сч);
				СписокЛистов.Добавить(сч, WorkSheet.Name);
				
				Если WorkSheet.Name = ПредставлениеПроекта Тогда
					
					НомерЛиста = сч;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		РаботаСExcelКлиент.РазорватьСвязь(MyExcel);
		
	Исключение
	    
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		РаботаСExcelКлиент.РазорватьСвязь(MyExcel);
		
		Возврат;
		
	КонецПопытки;
	
	Если НомерЛиста = Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("СписокЛистов", СписокЛистов);
		
		ДополнительныеПараметры = Новый Структура("ИмяФайла", ИмяФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьЗадачиИзExcelПослеВыбораНомераЛиста", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.ПриоритизацияЗадач.Форма.ВыборЛистаКниги", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
		
	Иначе
		
		ЗагрузитьЗадачиИзExcelПоНомеруЛиста(ИмяФайла, НомерЛиста);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗадачиИзExcelПослеВыбораНомераЛиста(НомерЛиста, ДополнительныеПараметры) Экспорт
	
	Если НомерЛиста = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьЗадачиИзExcelПоНомеруЛиста(ДополнительныеПараметры.ИмяФайла, НомерЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗадачиИзExcelПоНомеруЛиста(ИмяФайла, НомерЛиста)
	
#Если Не ВебКлиент Тогда
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx");
	КопироватьФайл(ИмяФайла, ИмяВременногоФайла);
	
	Если НомерЛиста <> 0 Тогда
		
		MyExcel = РаботаСExcelКлиент.УстановитьСвязь(ИмяВременногоФайла);
		
		Если MyExcel = Неопределено Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось запустить Excel'"));
			Возврат;
			
		КонецЕсли;
		
		Попытка
			
			ЛистыДляУдаления = Новый Массив;
			КоличествоЛистов = MyExcel["ExcelФайл"].Sheets.Count();
			
			Для сч = 1 По КоличествоЛистов Цикл
				
				Если сч <> НомерЛиста Тогда
					
					WorkSheet = MyExcel["ExcelФайл"].Sheets(сч);
					ЛистыДляУдаления.Добавить(WorkSheet);
					
				КонецЕсли;
				
			КонецЦикла;
			
			MyExcel["Excel"].DisplayAlerts = Ложь;
			
			Для каждого WorkSheet Из ЛистыДляУдаления Цикл
				
				WorkSheet.Delete();
				
			КонецЦикла;
			
			// Вариант с выбором листа: WorkSheet = MyExcel["ExcelФайл"].Sheets(НомерЛиста);
			// 							WorkSheet.Move(MyExcel["ExcelФайл"].Sheets(1));
			
			РаботаСExcelКлиент.СохранитьФайл(MyExcel);
			РаботаСExcelКлиент.РазорватьСвязь(MyExcel);
			
		Исключение
	    	
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			РаботаСExcelКлиент.РазорватьСвязь(MyExcel);
			
		КонецПопытки;
		
	КонецЕсли;
	
	АдресВХранилище = ПоместитьФайлыВХранилище(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	ЗагрузитьЗадачиИзExcelНаСервере(АдресВХранилище);
	
	ФайлНаДиске = Новый Файл(ИмяФайла);
	Объект.ДатаФайла = ФайлНаДиске.ПолучитьВремяИзменения();
	Объект.ДатаЗагрузкиИзФайла = ОбщегоНазначенияКлиент.ДатаСеанса();
	Объект.ИмяФайла = ИмяФайла;
	
#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗадачиИзExcelНаСервере(АдресВХранилище)
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
	ПолучитьФайлыИзХранилища(АдресВХранилище, ИмяФайла);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	ПерваяСтрока = 4;
	ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы - 1;
	
	ОбластьПриоритет = ТабличныйДокумент.Область(ПерваяСтрока, 11, ПерваяСтрока, 11);
	ОбластьПриоритет.Текст = "Приоритет"; // АПК:1297 Не требуется локализация 
	
	ОбластьВыполнять = ТабличныйДокумент.Область(ПерваяСтрока, 12, ПерваяСтрока, 12);
	ОбластьВыполнять.Текст = "ВыполнятьВТекущемПериоде"; // АПК:1297 Не требуется локализация
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область(ПерваяСтрока, , ПоследняяСтрока));
	Построитель.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	Построитель.ЗаполнитьНастройки();
	Построитель.Выполнить();
	ТаблицаЗадач = Построитель.Результат.Выгрузить();	
	
	Для каждого СтрокаТаблицы Из ТаблицаЗадач Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерЗадачи) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("НомерЗадачи", СтрокаТаблицы.НомерЗадачи);
		НайденныеСтроки = Объект.СписокЗадач.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'В документе не найдена задача с номером %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТаблицы.НомерЗадачи);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВыполнятьВТекущемПериоде)
			И НРег(СтрокаТаблицы.ВыполнятьВТекущемПериоде) <> "нет" Тогда
			
			НовоеЗначение = Истина;
			
		Иначе
			
			НовоеЗначение = Ложь;
			
		КонецЕсли;
		
		ИзменитьЗначениеВСтроке(НайденныеСтроки[0], "Распределена", НовоеЗначение);
		
		ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
		Приоритет = ТипЧисло.ПривестиЗначение(СтрокаТаблицы.Приоритет);
		Приоритет = Мин(Приоритет, 5);
		Приоритет = Макс(Приоритет, 0);
		
		Если Приоритет = 0 Тогда
			
			Приоритет = 3;
			
		КонецЕсли;
		
		ИзменитьЗначениеВСтроке(НайденныеСтроки[0], "ПриоритетВыполнения", Приоритет);
		ИзменитьЗначениеВСтроке(НайденныеСтроки[0], "Комментарий", СтрокаТаблицы.Комментарий, СохранятьКомментарийПриЗагрузке);
		
	КонецЦикла;
	
	Если ВыполнятьСортировкуПриЗагрузкеИзExcel Тогда
		
		СортироватьСогласноНастройкамНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗначениеВСтроке(СтрокаТаблицы, ИмяПоля, НовоеЗначение, СохранятьНепустое = Ложь)
	
	Если СтрокаТаблицы[ИмяПоля] <> НовоеЗначение Тогда
		
		Если ЗначениеЗаполнено(НовоеЗначение)
			Или Не СохранятьНепустое Тогда
			
			СтрокаТаблицы.РучноеИзменение = Истина;
			СтрокаТаблицы[ИмяПоля] = НовоеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// - Обработки

&НаКлиенте
Процедура ПредложитьЗаменуЗадачи(Команда)
	
	ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить(
		"ЗначенияЗаполнения",
		Новый Структура("ДокументОснование", Объект.Ссылка));
		
	// Формирование списка выбранных задач на замену.
	ЗаполнитьСписокЗадачНаЗамену(ПараметрыФормы);
		
	ОткрытьФорму(
		"Справочник.ЗаменыЗадачПоПриоритизации.ФормаОбъекта",
		ПараметрыФормы,
		Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЗадачНаЗамену(ПараметрыФормы)
	
	ПараметрыОтбора = Новый Структура("ОтметкаНаЗамену", Истина);
	ТаблицаОтобранныхНаЗаменуЗадач = Объект.СписокЗадач.Выгрузить(ПараметрыОтбора, "Распределена, Задача, Трудозатраты, УчитыватьТолькоВремяНаОценку");
	
	Если ТаблицаОтобранныхНаЗаменуЗадач.Количество() > 0 Тогда
		
		АдресТаблицаОтобранныхНаЗаменуЗадач = ПоместитьВоВременноеХранилище(ТаблицаОтобранныхНаЗаменуЗадач);
		
		ПараметрыФормы.Вставить("АдресТаблицаОтобранныхНаЗаменуЗадач", АдресТаблицаОтобранныхНаЗаменуЗадач);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РегулировкаИсполнителей(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	СформироватьТаблицуИсполнителейЗадач(ПараметрыФормы);
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("РегулировкаИсполнителейПослеВыбораНастроек", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ПриоритизацияЗадач.Форма.РегулировкаИсполнителей", 
		ПараметрыФормы, 
		ЭтотОбъект,,,, 
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РегулировкаИсполнителейПослеВыбораНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СписокИсполнителейДляРегулировки = ПолучитьИзВременногоХранилища(Результат.АдресСписокОтмеченныхИсполнителей); 
	
	ЗаполнитьЗадачиПослеРегулировкиИсполнителей(Результат.ТипОбработки, Результат.АдресСписокОтмеченныхИсполнителей);

КонецПроцедуры 

&НаСервере
Процедура СформироватьТаблицуИсполнителейЗадач(ПараметрыФормы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриоритизацияЗадачСписокЗадач.Задача.Исполнитель КАК Исполнитель,
	               |	ПриоритизацияЗадачСписокЗадач.Задача.Исполнитель.Наименование КАК ИсполнительНаименование,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПриоритизацияЗадачСписокЗадач.Задача) КАК КолВоЗадач,
	               |	СУММА(ПриоритизацияЗадачСписокЗадач.Трудозатраты) КАК Трудозатраты,
	               |	СУММА(ВЫБОР
	               |			КОГДА ПриоритизацияЗадачСписокЗадач.Распределена
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК КолВоРаспределено,
	               |	СУММА(ВЫБОР
	               |			КОГДА ПриоритизацияЗадачСписокЗадач.УчитыватьТолькоВремяНаОценку
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК КолВоНаОценку,
	               |	СУММА(ВЫБОР
	               |			КОГДА ПриоритизацияЗадачСписокЗадач.Повторяется
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК КолВоПовторяется
	               |ИЗ
	               |	Документ.ПриоритизацияЗадач.СписокЗадач КАК ПриоритизацияЗадачСписокЗадач
	               |ГДЕ
	               |	ПриоритизацияЗадачСписокЗадач.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПриоритизацияЗадачСписокЗадач.Задача.Исполнитель,
	               |	ПриоритизацияЗадачСписокЗадач.Задача.Исполнитель.Наименование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИсполнительНаименование";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	ТаблицаСгруппированныхДанных = Результат.Выгрузить();
	
	Если ТаблицаСгруппированныхДанных.Количество() > 0 Тогда
		
		АдресТаблицаТаблицаСгруппированныхДанных = ПоместитьВоВременноеХранилище(ТаблицаСгруппированныхДанных);
		
		ПараметрыФормы.Вставить("АдресТаблицаСгруппированныхДанных", АдресТаблицаТаблицаСгруппированныхДанных);
	
	КонецЕсли;

КонецПроцедуры 

// Заполнить задачи после регулировки исполнителей
//
// Параметры:
//  ТипОбработки						 - Строка - Варианты: УдалитьЗадачиПоИсполнителю, УдалитьТолькоПовторяемые, УдалитьНеВходящихВКомандуСпринта 
//  АдресСписокОтмеченныхИсполнителей	 - Строка - Адрес массива исполнителей
//
&НаСервере
Процедура ЗаполнитьЗадачиПослеРегулировкиИсполнителей(ТипОбработки, АдресСписокОтмеченныхИсполнителей)
	
	СписокИсполнителейДляРегулировки = ПолучитьИзВременногоХранилища(АдресСписокОтмеченныхИсполнителей);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриоритизацияЗадачСписокЗадач.Ссылка КАК Ссылка,
	               |	ПриоритизацияЗадачСписокЗадач.НомерСтроки КАК НомерСтроки,
	               |	ПриоритизацияЗадачСписокЗадач.Задача КАК Задача,
	               |	ПриоритизацияЗадачСписокЗадач.Распределена КАК Распределена,
	               |	ПриоритизацияЗадачСписокЗадач.Трудозатраты КАК Трудозатраты,
	               |	ПриоритизацияЗадачСписокЗадач.ДатаДобавления КАК ДатаДобавления,
	               |	ПриоритизацияЗадачСписокЗадач.Комментарий КАК Комментарий,
	               |	ПриоритизацияЗадачСписокЗадач.РучноеИзменение КАК РучноеИзменение,
	               |	ПриоритизацияЗадачСписокЗадач.УчитыватьТолькоВремяНаОценку КАК УчитыватьТолькоВремяНаОценку,
	               |	ПриоритизацияЗадачСписокЗадач.Повторяется КАК Повторяется
	               |ИЗ
	               |	Документ.ПриоритизацияЗадач.СписокЗадач КАК ПриоритизацияЗадачСписокЗадач
	               |ГДЕ
	               |	ПриоритизацияЗадачСписокЗадач.Ссылка = &Ссылка
	               |	И НЕ(ПриоритизацияЗадачСписокЗадач.Задача.Исполнитель В (&СписокИсполнителейДляРегулировки)
	               |				И &ТипОбработки)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПриоритизацияЗадачСписокЗадач.НомерСтроки";
	
	Если ТипОбработки = "УдалитьТолькоПовторяемые" Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипОбработки", "ПриоритизацияЗадачСписокЗадач.Повторяется");	
		
	ИначеЕсли ТипОбработки = "УдалитьНеВходящихВКомандуСпринта" Тогда	
		
		КомандаСпринтаСостав = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Спринт, "КомандаСпринта.Состав");
		СписокИсполнителейДляРегулировки = КомандаСпринтаСостав.Выгрузить().ВыгрузитьКолонку("Пользователь");	
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ(ПриоритизацияЗадачСписокЗадач.Задача.Исполнитель", "(ПриоритизацияЗадачСписокЗадач.Задача.Исполнитель");	
		
	Иначе
		
		// ТипОбработки: УдалитьЗадачиПоИсполнителю
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("СписокИсполнителейДляРегулировки", СписокИсполнителейДляРегулировки);
	Запрос.УстановитьПараметр("ТипОбработки", Истина);
	
	Результат = Запрос.Выполнить();
	ТаблицаДанных = Результат.Выгрузить();
	
	Объект.СписокЗадач.Загрузить(ТаблицаДанных);
	
КонецПроцедуры 

// Табличное поле

&НаКлиенте
Процедура СписокЗадачПриИзменении(Элемент)
	
	ЗаполнитьДополнительныеСведенияОЗадачах();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПослеУдаления(Элемент)
	
	ЗаполнитьДополнительныеСведенияОЗадачах();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	
	Если Поле = Элементы.СписокЗадачСтатусОбработки Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.СтатусОбработки);
		
	ИначеЕсли Поле = Элементы.СписокЗадачЗадачаВнешнийНомер Тогда
		
		СтандартнаяОбработка = Ложь;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ТекущиеДанные.ВнешняяСсылка);
		
	Иначе
		
		// Не требуется обработка.
		
	КонецЕсли;
	
	ИмяПоля = Сред(Поле.Имя, 18);
	ПутьКРеквизиту = "";
	
	Если ИмяПоля = "ПолучательУслуг"
		Или ИмяПоля = "Исполнитель" Тогда
		
		ПутьКРеквизиту = ИмяПоля;
		
	ИначеЕсли ИмяПоля = "ПолучательУслугОрганизация" Тогда
		
		ПутьКРеквизиту = "ПолучательУслуг.Организация";
		
	Иначе
		
		// Не требуется обработка.	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьКРеквизиту) Тогда
		
		ЗначениеПоля = ОбщегоНазначенияКупоросВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Задача, ПутьКРеквизиту);
		
	ИначеЕсли Поле = Элементы.СписокЗадачЗадача Тогда
		
		ЗначениеПоля = ТекущиеДанные.Задача;
		
	Иначе
		
		// Не требуется обработка.	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ЗначениеПоля);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элементы.СписокЗадач.ТекущиеДанные.ДатаДобавления = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	КонецЕсли;
	
КонецПроцедуры

// Колонки табличного поля

&НаКлиенте
Процедура СписокЗадачУчитыватьТолькоВремяНаОценкуПриИзменении(Элемент)
	
	ЗадачаДляОбработки = Элементы.СписокЗадач.ТекущиеДанные.Задача;
	
	ОбновитьТрудозатратыВЗадачахНаСервере(Элементы.СписокЗадач.ТекущиеДанные.Задача);
	
	СпозиционироватьсяНаЗадачеВСписке(ЗадачаДляОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачЗадачаПриИзменении(Элемент)
	
	ЗадачаДляОбработки = Элементы.СписокЗадач.ТекущиеДанные.Задача;
	
	ОбновитьТрудозатратыВЗадачахНаСервере(Элементы.СписокЗадач.ТекущиеДанные.Задача);
	
	СпозиционироватьсяНаЗадачеВСписке(ЗадачаДляОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РедактированиеКомментарияСтроки", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(ОповещениеОЗакрытии, 
		Элемент.ТекстРедактирования, 
		НСтр("ru = 'Редактирование комментария к задаче'"));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеКомментарияСтроки(ТекстВозврата, ДополнительныеПараметры) Экспорт
	
	СтарыйКомментарийСтроки = Элементы.СписокЗадач.ТекущиеДанные.Комментарий;
	
	Если ЗначениеЗаполнено(ТекстВозврата) 
		И СтарыйКомментарийСтроки <> ТекстВозврата Тогда
		Элементы.СписокЗадач.ТекущиеДанные.Комментарий = ТекстВозврата;
		Модифицированность = Истина;
	Иначе
		Элементы.СписокЗадач.ТекущиеДанные.Комментарий = СтарыйКомментарийСтроки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

//////////////////////////////////////////////////////////////////////////////////////////
// ГРУППА "СтраницаИсполнители"

// Команды

// - ОбновитьИсполнителейПоПроекту

&НаКлиенте
Процедура ОбновитьИсполнителейПоПроекту(Команда)
	
	ОбновитьИсполнителейПоПроектуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсполнителейПоПроектуНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланРабочегоВремениПоДням.Исполнитель КАК Исполнитель,
	|	ПланРабочегоВремениПоДням.День КАК День,
	|	ПланРабочегоВремениПоДням.Выделено КАК ВыделеноВсегоНаДень,
	|	ПланРабочегоВремениСводный.ПроцентВремени КАК ПроцентВремени,
	|	ВЫБОР
	|		КОГДА ПланРабочегоВремениСводный.ПроцентВремени = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПланРабочегоВремениПоДням.Выделено * ПланРабочегоВремениСводный.ПроцентВремени / 100
	|	КОНЕЦ КАК Выделено
	|ПОМЕСТИТЬ ВТ_ПланыПоДнямДетализация
	|ИЗ
	|	РегистрСведений.ПланРабочегоВремениПоДням КАК ПланРабочегоВремениПоДням
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланРабочегоВремениСводный КАК ПланРабочегоВремениСводный
	|		ПО (ПланРабочегоВремениПоДням.Исполнитель = ПланРабочегоВремениСводный.Исполнитель)
	|		И (ПланРабочегоВремениПоДням.Месяц = ПланРабочегоВремениСводный.Месяц)
	|ГДЕ
	|	ПланРабочегоВремениПоДням.День МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПланРабочегоВремениСводный.Проект = &Проект
	|	И ПланРабочегоВремениСводный.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.ТипыЗадач.Разработка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПланыПоДнямДетализация.Исполнитель КАК Исполнитель,
	|	СУММА(ВТ_ПланыПоДнямДетализация.Выделено) КАК Выделено
	|ПОМЕСТИТЬ ВТ_ПланыПоДнямСумма
	|ИЗ
	|	ВТ_ПланыПоДнямДетализация КАК ВТ_ПланыПоДнямДетализация
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПланыПоДнямДетализация.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Исполнитель КАК Исполнитель,
	|	ВложенныйЗапрос.ОстатокВремени КАК ОстатокВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Исполнитель КАК Исполнитель,
	|		СУММА(ВложенныйЗапрос.ОстатокВремени) КАК ОстатокВремени,
	|		МАКСИМУМ(ВложенныйЗапрос.ЕстьВремяПоПроекту) КАК ЕстьВремяПоПроекту
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_ПланыПоДням.Исполнитель КАК Исполнитель,
	|			ВЫРАЗИТЬ(ВТ_ПланыПоДням.Выделено КАК ЧИСЛО(5, 1)) КАК ОстатокВремени,
	|			ИСТИНА КАК ЕстьВремяПоПроекту
	|		ИЗ
	|			ВТ_ПланыПоДнямСумма КАК ВТ_ПланыПоДням
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ПланыПоЗадачам.Исполнитель,
	|			-ПланыПоЗадачам.Запланировано,
	|			ЛОЖЬ
	|		ИЗ
	|			РегистрСведений.ПланыПоЗадачам КАК ПланыПоЗадачам
	|		ГДЕ
	|			ПланыПоЗадачам.Задача.Проект = &Проект
	|			И ПланыПоЗадачам.Месяц МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И НЕ ПланыПоЗадачам.Задача.Выполнена) КАК ВложенныйЗапрос
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Исполнитель) КАК ВложенныйЗапрос";
	
	Если Объект.УчитыватьВложенныеПроекты Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &Проект", "В ИЕРАРХИИ (&Проект)");
		
	КонецЕсли;
	
	ДанныеСпринта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Спринт, "ДатаНачала, ДатаОкончания, ТипСпринта");
	
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Запрос.УстановитьПараметр("Месяц", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаНачала", ДанныеСпринта.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДанныеСпринта.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	Объект.Исполнители.Загрузить(Выгрузка);
	
	ОбновитьОстатокВремени();
	
КонецПроцедуры

// Табличное поле

&НаКлиенте
Процедура ИсполнителиПриИзменении(Элемент)
	
	ОбновитьОстатокВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	ОбновитьОстатокВремени();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаменыЗадач

//////////////////////////////////////////////////////////////////////////////////////////
// ГРУППА "СтраницаЗаменыЗадач"

// Табличное поле

&НаКлиенте
Процедура ЗаменыЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
		
		Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить(
				"ЗначенияЗаполнения",
				Новый Структура("ДокументОснование", Объект.Ссылка));
				
		ОткрытьФорму(
			"Справочник.ЗаменыЗадачПоПриоритизации.ФормаОбъекта",
			ПараметрыФормы,
			Объект.Ссылка, , , , , РежимОткрытияОкнаФормы.Независимый);
			
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательные функции

&НаКлиенте
Процедура УстановитьОтборыТаблицыЗамены()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаменыЗадач.Отбор,
		"ДокументОснование",
		Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.Равно);

КонецПроцедуры // УстановитьОтборыТаблицыЗамены()

&НаКлиенте
Процедура ВыполнитьЗаменуЗадачВОсновномСписке(Команда)
	
	ТекущиеДанные = Элементы.ЗаменыЗадач.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПредложитьОбновитьРаспределениеСпискаЗадач(Элементы.ЗаменыЗадач.ТекущаяСтрока, ТекущиеДанные.СтатусЗамены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьОбновитьРаспределениеСпискаЗадач(СсылкаНаЗамену, СтатусЗамены)

	Если СтатусЗамены <> ПредопределенноеЗначение("Перечисление.СтатусыЗаменыЗадач.ЗаменаСогласована") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьОбновитьРаспределениеСпискаЗадачПродолжение", ЭтотОбъект, СсылкаНаЗамену);
	ТекстВопрос = НСтр("ru = 'Перераспределить список задач на выполнение по результату согласованной замены?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопрос, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, НСтр("ru = 'Замена задач'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьОбновитьРаспределениеСпискаЗадачПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРаспределениеСпискаЗадачПоДаннымЗамены(ДополнительныеПараметры);

КонецПроцедуры

&НаСервере
Процедура ОбновитьРаспределениеСпискаЗадачПоДаннымЗамены(СсылкаНаЗамену)

	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЗаменыЗадачПоПриоритизации.Ссылка КАК Ссылка,
	                |	ЗаменыЗадачПоПриоритизации.Наименование КАК Наименование,
	                |	ЗаменыЗадачПоПриоритизации.ПричинаЗамены КАК ПричинаЗамены,
	                |	ЗаменыЗадачПоПриоритизации.СтатусЗамены КАК СтатусЗамены,
	                |	ЗаменыЗадачПоПриоритизации.ДатаСоздания КАК ДатаСоздания
	                |ИЗ
	                |	Справочник.ЗаменыЗадачПоПриоритизации КАК ЗаменыЗадачПоПриоритизации
	                |ГДЕ
	                |	ЗаменыЗадачПоПриоритизации.Ссылка = &СсылкаНаЗамену
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Ссылка КАК Ссылка,
	                |	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Задача КАК Задача,
	                |	ЛОЖЬ КАК Распределена
	                |ИЗ
	                |	Справочник.ЗаменыЗадачПоПриоритизации.СтарыеЗадачи КАК ЗаменыЗадачПоПриоритизацииСтарыеЗадачи
	                |ГДЕ
	                |	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Ссылка = &СсылкаНаЗамену
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Ссылка,
	                |	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Задача,
	                |	ИСТИНА
	                |ИЗ
	                |	Справочник.ЗаменыЗадачПоПриоритизации.НовыеЗадачи КАК ЗаменыЗадачПоПриоритизацииНовыеЗадачи
	                |ГДЕ
	                |	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Ссылка = &СсылкаНаЗамену";
	 
	 Запрос.УстановитьПараметр("СсылкаНаЗамену", СсылкаНаЗамену);
	 
	 Результат = Запрос.ВыполнитьПакет();
	 
	 РеквизитыЗамены = Результат[0].Выбрать();
	 РеквизитыЗамены.Следующий();
	 
	 Выборка = Результат[1].Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
		 
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Задача", Выборка.Задача);
		НайденныеЗадачи = Объект.СписокЗадач.НайтиСтроки(ПараметрыОтбора); 
		
		НетЗадачиВСписке = НайденныеЗадачи.Количество() = 0;
		
		Если НетЗадачиВСписке
			И Не Выборка.Распределена Тогда
			// Если задачи нет в списке найденных и она не должна выполняться в текущем периоде, то нет смысла ее фиксировать в общем списке задач.
			Продолжить;
		КонецЕсли;
		
		Если НетЗадачиВСписке Тогда
			СтрокаЗадачи = Неопределено;	
		Иначе
			СтрокаЗадачи = НайденныеЗадачи[0];
		КонецЕсли;
		
		Если Выборка.Распределена 
			И (НетЗадачиВСписке 
				Или СтрокаЗадачи.Распределена = Ложь) Тогда
			
			// Приоритетное выполнение в текущем периоде.  
			// Может еще быть не добавлена в общем списке задач, поэтому добавляем.
			
			Если НетЗадачиВСписке Тогда
				СтрокаЗадачи = Объект.СписокЗадач.Добавить();
				СтрокаЗадачи.Задача = Выборка.Задача;
				СтрокаЗадачи.ДатаДобавления = ТекущаяДатаСеанса();
				ДопТекстКСообщению = НСтр("ru = 'Добавлена и распределена'");
			Иначе
				ДопТекстКСообщению = НСтр("ru = 'Распределена'");
			КонецЕсли;
			
			СтрокаЗадачи.Распределена = Истина;
			СтрокаЗадачи.УчитыватьТолькоВремяНаОценку = Ложь;
			
			ТекстПричиныПереноса = СтрШаблон(НСтр("ru = 'Согласовано приоритетное выполнение в текущем периоде. 
                                                   |Замена: %1'"), РеквизитыЗамены.Наименование);
			
			СтрокаЗадачи.Комментарий = СтрШаблон(НСтр("ru = '%1
                                                       |%2'"), ТекстПричиныПереноса, СтрокаЗадачи.Комментарий);
			
			ОбновитьТрудозатратыВЗадачахНаСервере(Выборка.Задача);
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
			Элементы.СписокЗадач.ТекущаяСтрока = СтрокаЗадачи.ПолучитьИдентификатор();
			
			ТекстСообщения = СтрШаблон(НСтр("ru = '%2 ""%1"" в текущем периоде.'"), Выборка.Задача, ДопТекстКСообщению);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		ИначеЕсли Не Выборка.Распределена 
			И СтрокаЗадачи.Распределена = Истина Тогда
			
			// Перенос задачи на следующий период.
			СтрокаЗадачи.Распределена = Ложь;
			СтрокаЗадачи.УчитыватьТолькоВремяНаОценку = Ложь;
			
			ТекстПричиныПереноса = СтрШаблон(НСтр("ru = 'Согласован перенос на следующий период. 
                                                   |Замена: %1'"), РеквизитыЗамены.Наименование);
			
			СтрокаЗадачи.Комментарий = СтрШаблон(НСтр("ru = '%1
                                                       |%2'"), ТекстПричиныПереноса, СтрокаЗадачи.Комментарий);
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Снята из распределения ""%1"".'"), Выборка.Задача);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		Иначе
			// Не требуется обработка.
		КонецЕсли; 
		
	 КонецЦикла;
	
	 ЗаполнитьДополнительныеСведенияОЗадачах();
	 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьДополнительныеСведенияОЗадачах(ЭтоЗаполнениеЗадач = Ложь, ПринудительноеОбновление = Ложь)
	
	ЕстьНовыеЗадачи = Ложь;
	
	// Вычисление наличия новых задач.
	Для каждого СтрокаТаблицы Из Объект.СписокЗадач Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Задача)
			И СтрокаТаблицы.ЗадачаСведений <> СтрокаТаблицы.Задача Тогда
			
			ЕстьНовыеЗадачи = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьНовыеЗадачи
		И Не ПринудительноеОбновление Тогда
		
		ОбновитьОстатокВремени();
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриоритизацияЗадачСписокЗадач.Задача КАК Задача,
	|	МИНИМУМ(ПриоритизацияЗадачСписокЗадач.Ссылка.Дата) КАК ДатаПервойПриоритизации,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА НЕ ПриоритизацияЗадачСписокЗадач.Распределена
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|			КОГДА ПриоритизацияЗадачСписокЗадач.УчитыватьТолькоВремяНаОценку
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ПриоритизацияЗадачСписокЗадач.Ссылка.Дата
	|		КОНЕЦ) КАК ДатаПервогоРаспределения
	|ПОМЕСТИТЬ ВТ_ПервыеПриоритизации
	|ИЗ
	|	Документ.ПриоритизацияЗадач.СписокЗадач КАК ПриоритизацияЗадачСписокЗадач
	|ГДЕ
	|	ПриоритизацияЗадачСписокЗадач.Задача В(&СписокЗадач)
	|	И ПриоритизацияЗадачСписокЗадач.Ссылка <> &Ссылка
	|	И НЕ ПриоритизацияЗадачСписокЗадач.Ссылка.СлужебнаяПриоритизация
	|	И ПриоритизацияЗадачСписокЗадач.Ссылка.Дата < &ДатаТекущегоДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриоритизацияЗадачСписокЗадач.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритизацияЗадачСписокЗадач.Задача КАК Задача,
	|	ПриоритизацияЗадачСписокЗадач.НомерСтроки КАК ПорядокПрошлойПриоритизации,
	|	ИСТИНА КАК ЕстьВПриоритизацииПрошлогоМесяца
	|ПОМЕСТИТЬ ВТ_ЗадачиПрошлойПриоритизации
	|ИЗ
	|	Документ.ПриоритизацияЗадач.СписокЗадач КАК ПриоритизацияЗадачСписокЗадач
	|ГДЕ
	|	ПриоритизацияЗадачСписокЗадач.Задача В(&СписокЗадач)
	|	И ПриоритизацияЗадачСписокЗадач.Ссылка.Дата = &ПрошлыйМесяц
	|	И (ПриоритизацияЗадачСписокЗадач.Распределена
	|				И НЕ ПриоритизацияЗадачСписокЗадач.УчитыватьТолькоВремяНаОценку
	|			ИЛИ &УчитыватьНераспределенныеЗадачи)
	|	И НЕ ПриоритизацияЗадачСписокЗадач.Ссылка.ПометкаУдаления
	|	И НЕ ПриоритизацияЗадачСписокЗадач.Ссылка.СлужебнаяПриоритизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка КАК Задача,
	|	ТекущиеСостоянияЗадач.СтатусОбработки КАК СтатусОбработки,
	|	ЗадачиПользователя.ТрудозатратыНаОценку КАК ТрудозатратыНаОценку,
	|	ЗадачиПользователя.ТрудозатратыПредварительные КАК ТрудозатратыПредварительные,
	|	ЗадачиПользователя.ТрудозатратыПлановые КАК ТрудозатратыПлановые,
	|	ЗадачиПользователя.ТрудозатратыПланНаСпринт КАК ТрудозатратыПланНаСпринт,
	|	ЗадачиПользователя.ВнешняяСсылка КАК ВнешняяСсылка,
	|	ЗадачиПользователя.Номер КАК НомерЗадачи,
	|	ЗадачиПользователя.ПриоритетВыполнения КАК ПриоритетВыполнения,
	|	ЗадачиПользователя.СрокИсполнения КАК СрокИсполнения,
	|	ЕСТЬNULL(ВТ_ПервыеПриоритизации.ДатаПервойПриоритизации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервойПриоритизации,
	|	ЕСТЬNULL(ВТ_ПервыеПриоритизации.ДатаПервогоРаспределения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервогоРаспределения,
	|	ЕСТЬNULL(ВТ_ЗадачиПрошлойПриоритизации.ПорядокПрошлойПриоритизации, 999999) КАК ПорядокПрошлойПриоритизации,
	|	ЕСТЬNULL(ВТ_ЗадачиПрошлойПриоритизации.ЕстьВПриоритизацииПрошлогоМесяца, ЛОЖЬ) КАК ЕстьВПриоритизацииПрошлогоМесяца,
	|	ВЫБОР
	|		КОГДА ЗадачиПользователя.ПринятаКИсполнению
	|			ТОГДА ИСТИНА
	|		КОГДА ЗадачиПользователя.ПроцентЗавершения <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗадачаВРаботе,
	|	ЗадачиПользователя.Ссылка КАК ЗадачаСведений,
	|	ЗадачиПользователя.Исполнитель КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА ЗадачиПользователя.ТрудозатратыПланНаСпринт > 0
	|				И ЗадачиПользователя.ОстатокТрудозатрат > ЗадачиПользователя.ТрудозатратыПланНаСпринт
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОграничениеПоСпринтуТрудозатрат
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияЗадач КАК ТекущиеСостоянияЗадач
	|		ПО ЗадачиПользователя.Ссылка = ТекущиеСостоянияЗадач.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервыеПриоритизации КАК ВТ_ПервыеПриоритизации
	|		ПО ЗадачиПользователя.Ссылка = ВТ_ПервыеПриоритизации.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадачиПрошлойПриоритизации КАК ВТ_ЗадачиПрошлойПриоритизации
	|		ПО ЗадачиПользователя.Ссылка = ВТ_ЗадачиПрошлойПриоритизации.Задача
	|ГДЕ
	|	ЗадачиПользователя.Ссылка В(&СписокЗадач)";
	
	Запрос.УстановитьПараметр("СписокЗадач", Объект.СписокЗадач.Выгрузить().ВыгрузитьКолонку("Задача"));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаТекущегоДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("ПрошлыйМесяц", НачалоМесяца(ДобавитьМесяц(Объект.Дата, -1)));
	Запрос.УстановитьПараметр("УчитыватьНераспределенныеЗадачи", УчитыватьНераспределенныеЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДеталейЗадач = РезультатЗапроса.Выгрузить();
	ТаблицаДеталейЗадач.Индексы.Добавить("Задача");  // индекс для быстрого поиска по задаче в цикле
	
	ТрудозатратыНаОценку = 0;
	ТрудозатратыПредварительные = 0;
	ТрудозатратыПлановые = 0;
	
	КоличествоНовыхЗадач = 0;
	КоличествоРаспределено = 0;
	КоличествоНовыхПрошлойПриоритизации = 0;
	КоличествоЗадачСтаршеПолугода = 0;
	
	
	Для каждого СтрокаТаблицы Из Объект.СписокЗадач Цикл
		
		// Дозаполнение строк таблицы и обновление статистики по полям: Трудозатраты*, Количество*. 	
		ОбработкаСтрокиДополнительныхСведенийОЗадачах(СтрокаТаблицы, ТаблицаДеталейЗадач, ЭтоЗаполнениеЗадач);
		
	КонецЦикла;
	
	ОбновитьОстатокВремени();
	
	// Расчет количества замен задач по справочнику "ЗаменыЗадачПоПриоритизации".
	КоличествоЗамен = КоличествоЗадачНаЗамену(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаСтрокиДополнительныхСведенийОЗадачах(СтрокаТаблицы, ТаблицаДеталейЗадач, ЭтоЗаполнениеЗадач)
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Задача) Тогда
		СтрокаТаблицы.ЗадачаСведений = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Заполнение дополнительных полей.
	НайденнаяСтрока = ТаблицаДеталейЗадач.Найти(СтрокаТаблицы.Задача, "Задача");
	
	Если НайденнаяСтрока = Неопределено Тогда
		// Может быть, если СтрокаТаблицы.Задача битая ссылка.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НайденнаяСтрока);
	
	ТрудозатратыНаОценку = ТрудозатратыНаОценку + НайденнаяСтрока.ТрудозатратыНаОценку;
	ТрудозатратыПредварительные = ТрудозатратыПредварительные + НайденнаяСтрока.ТрудозатратыПредварительные;
	ТрудозатратыПлановые = ТрудозатратыПлановые + НайденнаяСтрока.ТрудозатратыПлановые;
	
	Если ЭтоЗаполнениеЗадач
		И АвтоматическиРаспределятьЗадачиПрошлойПриоритизации
		И НайденнаяСтрока.ЕстьВПриоритизацииПрошлогоМесяца Тогда
		
		СтрокаТаблицы.Распределена = Истина;
		
	КонецЕсли;
	
	// Заполнение статистики.
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаПервойПриоритизации) Тогда
		КоличествоНовыхЗадач = КоличествоНовыхЗадач + 1;
	КонецЕсли;
	
	Если СтрокаТаблицы.Распределена Тогда
		КоличествоРаспределено = КоличествоРаспределено + 1;
	КонецЕсли;
	
	ПрошлыйМесяц = ДобавитьМесяц(Объект.Дата, -1);
	Если ПрошлыйМесяц = СтрокаТаблицы.ДатаПервойПриоритизации Тогда
		КоличествоНовыхПрошлойПриоритизации = КоличествоНовыхПрошлойПриоритизации + 1;		
	КонецЕсли;
	
	КоличествоМесяцевПолгода = 6;
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаПервойПриоритизации) 
		И ОбщегоНазначенияКупоросСервер.РазностьДат(СтрокаТаблицы.ДатаПервойПриоритизации, ТекущаяДатаСеанса(), "Месяц") > КоличествоМесяцевПолгода Тогда
		КоличествоЗадачСтаршеПолугода = КоличествоЗадачСтаршеПолугода + 1;
	КонецЕсли;
	
КонецПроцедуры 


&НаСервере
Процедура ОбновитьОстатокВремени()
	
	РаспределеноВремени = 0;
	
	Для каждого СтрокаТаблицы Из Объект.Исполнители Цикл
		
		СтрокаТаблицы.ОстатокПослеРаспределения = СтрокаТаблицы.ОстатокВремени;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.СписокЗадач Цикл
		
		Если СтрокаТаблицы.Распределена Тогда
			
			РаспределеноВремени = РаспределеноВремени + СтрокаТаблицы.Трудозатраты;
			
			ПараметрыОтбора = Новый Структура("Исполнитель", СтрокаТаблицы.Исполнитель);
			НайденныеСтроки = Объект.Исполнители.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() <> 0 Тогда
				
				НайденныеСтроки[0].ОстатокПослеРаспределения = НайденныеСтроки[0].ОстатокПослеРаспределения - СтрокаТаблицы.Трудозатраты;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОстатокВремени = Объект.Исполнители.Итог("ОстатокВремени") - РаспределеноВремени;
	
КонецПроцедуры

// Функция возвращает количество задач на замену
//
// Параметры:
//  СсылкаНаОбъект	 - ДокументСсылка.ПриоритизацияЗадач
// 
// Возвращаемое значение:
//  Число - количество задач на замену 
//
&НаСервереБезКонтекста
Функция КоличествоЗадачНаЗамену(СсылкаНаОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаменыЗадачПоПриоритизации.Ссылка) КАК КоличествоЗаменЗадач
	               |ИЗ
	               |	Справочник.ЗаменыЗадачПоПриоритизации КАК ЗаменыЗадачПоПриоритизации
	               |ГДЕ
	               |	ЗаменыЗадачПоПриоритизации.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоЗамен = 0;
	
	Если Выборка.Следующий() Тогда
		КоличествоЗамен = Выборка.КоличествоЗаменЗадач;	
	КонецЕсли;
	
	Возврат КоличествоЗамен;

КонецФункции

&НаКлиенте
Функция НаборПолейДляСортировкиНаКлиенте() Экспорт
	
	Возврат НаборПолейДляСортировки();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаборПолейДляСортировки()
	
	НаборПолей = Новый СписокЗначений;
	НаборПолей.Добавить("ЗадачаВРаботе", НСтр("ru = 'Задача в работе'"), Истина);
	НаборПолей.Добавить("ПорядокПрошлойПриоритизации", НСтр("ru = 'Порядок прошлой приоритизации'"));
	НаборПолей.Добавить("ПриоритетВыполнения", НСтр("ru = 'Приоритет выполнения'"));
	НаборПолей.Добавить("СрокИсполнения", НСтр("ru = 'Срок исполнения'"));
	
	Возврат НаборПолей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоместитьФайлыВХранилище(ИмяФайла)
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьФайлыИзХранилища(АдресВХранилище, ИмяФайла)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяФайла);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПроекта(Проект)
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Строка(Проект));
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтметитьПовторяющиесяЗадачи(СписокЗадачДляОтметки)
	
	Если СписокЗадачДляОтметки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаЗадача = "Задача";
	
	СписокЗадач = СписокЗадачДляОтметки.Выгрузить(, КолонкаЗадача);	
	МассивЗадач = СписокЗадач.ВыгрузитьКолонку(КолонкаЗадача);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СписокЗадач.Задача КАК Задача.ЗадачиПользователя) КАК Задача
	|ПОМЕСТИТЬ ВТ_СписокЗадач
	|ИЗ
	|	&СписокЗадач КАК СписокЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПользователя.Задача.Наименование КАК Наименование,
	|	КОЛИЧЕСТВО(*) КАК Сч
	|ПОМЕСТИТЬ ВТ_Дубли
	|ИЗ
	|	ВТ_СписокЗадач КАК ЗадачиПользователя
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиПользователя.Задача.Наименование
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПользователя.Задача.ВнешнийНомер КАК ВнешнийНомер,
	|	КОЛИЧЕСТВО(*) КАК Сч
	|ПОМЕСТИТЬ ВТ_Дубли2
	|ИЗ
	|	ВТ_СписокЗадач КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.Задача.ВнешнийНомер <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиПользователя.Задача.ВнешнийНомер
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденныеДубли.Ссылка КАК Задача
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗадачиПользователя.Ссылка КАК Ссылка
	|	ИЗ
	|		ВТ_Дубли КАК ВТ_Дубли
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|			ПО ВТ_Дубли.Наименование = ЗадачиПользователя.Наименование
	|	ГДЕ
	|		ЗадачиПользователя.Ссылка В(&МассивЗадач)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗадачиПользователя.Ссылка
	|	ИЗ
	|		ВТ_Дубли2 КАК ВТ_Дубли2
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|			ПО ВТ_Дубли2.ВнешнийНомер = ЗадачиПользователя.ВнешнийНомер
	|	ГДЕ
	|		ЗадачиПользователя.Ссылка В(&МассивЗадач)) КАК НайденныеДубли";
	
	Запрос.УстановитьПараметр("СписокЗадач", СписокЗадач); // для поиска дублей внутри табличной части
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	Результат = Запрос.Выполнить();
	Выгрузка = Результат.Выгрузить();
	Выгрузка.Индексы.Добавить(КолонкаЗадача);
	
	Для каждого СтрокаТаблицы Из СписокЗадачДляОтметки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Задача) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКупоросКлиентСервер.УстановитьРеквизит(СтрокаТаблицы, "Повторяется", Ложь,, Истина);
		
		НайденнаяСтрока = Выгрузка.Найти(СтрокаТаблицы.Задача, КолонкаЗадача);
		
		Если Не ЗначениеЗаполнено(НайденнаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКупоросКлиентСервер.УстановитьРеквизит(СтрокаТаблицы, "Повторяется", Истина,, Истина);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура СпозиционироватьсяНаЗадачеВСписке(ЗадачаДляОбработки)

	ПараметрыОтбораСтроки = Новый Структура("Задача", ЗадачаДляОбработки);
	НайденныеСтроки = Объект.СписокЗадач.НайтиСтроки(ПараметрыОтбораСтроки);
	Элементы.СписокЗадач.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеПолейСортировки(Контекст)
	
	НаборПолейДляСортировки = НаборПолейДляСортировки();
	
	Для каждого ЭлементСписка Из Контекст.ПорядокСортировки Цикл
		
		ОписаниеПоля = НаборПолейДляСортировки.НайтиПоЗначению(ЭлементСписка.Значение);
		ЭлементСписка.Представление = ОписаниеПоля.Представление;
		
		Если ЭлементСписка.Пометка Тогда
			
			ЭлементСписка.Представление = ЭлементСписка.Представление + " Убыв";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

