
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Карточка согласования замены задач
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СогласованиеЗаменыЗадач";
	КомандаПечати.Представление = НСтр("ru = 'Карточка согласования замены задач'");
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Печать "Карточка согласования замены задач".
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "СогласованиеЗаменыЗадач");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = ПечатьКарточкиСогласованиеЗаменыЗадач(МассивОбъектов, ОбъектыПечати);
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Печать карточки согласования замены задач'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.ПриоритизацияЗадач.ПФ_MXL_СогласованиеЗаменыЗадач";
		
	КонецЕсли;		
		
	
КонецПроцедуры

// Печать карточки согласования замены задач (для дальнейшей вставки в текст электронного письма).
//
// Параметры:
//  МассивОбъектов - Массив - объекты, по которым требуется сформировать печатную форму;
//  ОбъектыПечати  - СписокЗначений - разметка табличных документов по печатаемым объектам:
//   * Значение      - ЛюбаяСсылка - печатаемый объект;
//   * Представление - Строка - имя области, соответствующее объекту.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьКарточкиСогласованиеЗаменыЗадач(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПриоритизацияЗадач.Ссылка КАК Ссылка,
	|	ПриоритизацияЗадач.Проект КАК Проект,
	|	ПриоритизацияЗадач.Номер КАК Номер,
	|	ПриоритизацияЗадач.Дата КАК Дата,
	|	ПриоритизацияЗадач.Проект.Наименование КАК Представление
	|ИЗ
	|	Документ.ПриоритизацияЗадач КАК ПриоритизацияЗадач
	|ГДЕ
	|	ПриоритизацияЗадач.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритизацияЗадач.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаменыЗадачПоПриоритизации.Ссылка КАК ЗаменаСсылка,
	|	ЗаменыЗадачПоПриоритизации.Наименование КАК ЗаменаСсылкаНаименование,
	|	ЗаменыЗадачПоПриоритизации.ДокументОснование КАК ДокументОснование,
	|	ЗаменыЗадачПоПриоритизации.ПричинаЗамены КАК ПричинаЗамены,
	|	ЗаменыЗадачПоПриоритизации.СтатусЗамены КАК СтатусЗамены,
	|	ЗаменыЗадачПоПриоритизации.ДатаСтатуса КАК ДатаСтатуса,
	|	ЗаменыЗадачПоПриоритизации.ДатаСоздания КАК ДатаСоздания,
	|	ЗаменыЗадачПоПриоритизации.Ответственный КАК Ответственный,
	|	ЗаменыЗадачПоПриоритизации.Комментарий КАК Комментарий,
	|	ЗаменыЗадачПоПриоритизации.ДокументОснование.Проект КАК Проект
	|ИЗ
	|	Справочник.ЗаменыЗадачПоПриоритизации КАК ЗаменыЗадачПоПриоритизации
	|ГДЕ
	|	ЗаменыЗадачПоПриоритизации.ДокументОснование В(&МассивОбъектов)
	|	И ЗаменыЗадачПоПриоритизации.СтатусЗамены = &СтатусыЗаменыЗадач
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Ссылка КАК Ссылка,
	|	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Задача КАК Задача,
	|	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Трудозатраты КАК План,
	|	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.УчитыватьТолькоВремяНаОценку КАК УчитыватьТолькоВремяНаОценку,
	|	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Задача.Номер КАК Номер,
	|	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Задача.ВнешнийНомер КАК ВнешнийНомер,
	|	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Задача.ВнешняяСсылка КАК ВнешняяСсылка,
	|	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Задача.Наименование КАК Наименование,
	|	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Задача.ПолучательУслуг КАК Инициатор,
	|	ЕСТЬNULL(ТекущиеСостоянияЗадач.СтатусОбработки, ""Зарегистрирована"") КАК СтатусОбработки
	|ИЗ
	|	Справочник.ЗаменыЗадачПоПриоритизации.СтарыеЗадачи КАК ЗаменыЗадачПоПриоритизацииСтарыеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияЗадач КАК ТекущиеСостоянияЗадач
	|		ПО ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Задача = ТекущиеСостоянияЗадач.Задача
	|ГДЕ
	|	ЗаменыЗадачПоПриоритизацииСтарыеЗадачи.Ссылка.ДокументОснование В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Ссылка КАК Ссылка,
	|	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Задача КАК Задача,
	|	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Трудозатраты КАК План,
	|	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.УчитыватьТолькоВремяНаОценку КАК УчитыватьТолькоВремяНаОценку,
	|	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Задача.Номер КАК Номер,
	|	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Задача.ВнешнийНомер КАК ВнешнийНомер,
	|	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Задача.ВнешняяСсылка КАК ВнешняяСсылка,
	|	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Задача.Наименование КАК Наименование,
	|	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Задача.ПолучательУслуг КАК Инициатор,
	|	ЕСТЬNULL(ТекущиеСостоянияЗадач.СтатусОбработки, ""Зарегистрирована"") КАК СтатусОбработки
	|ИЗ
	|	Справочник.ЗаменыЗадачПоПриоритизации.НовыеЗадачи КАК ЗаменыЗадачПоПриоритизацииНовыеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияЗадач КАК ТекущиеСостоянияЗадач
	|		ПО ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Задача = ТекущиеСостоянияЗадач.Задача
	|ГДЕ
	|	ЗаменыЗадачПоПриоритизацииНовыеЗадачи.Ссылка.ДокументОснование В(&МассивОбъектов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("СтатусыЗаменыЗадач", Перечисления.СтатусыЗаменыЗадач.НаСогласовании); // выводить только те которые на согласовании
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	СтрокиЗамен = Результат[1].Выгрузить();
	СтрокиСтарыхЗадач = Результат[2].Выгрузить();
	СтрокиНовыхЗадач  = Результат[3].Выгрузить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СогласованиеЗаменыЗадач";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриоритизацияЗадач.ПФ_MXL_СогласованиеЗаменыЗадач");
	
	// обход по документам
	Пока Выборка.Следующий() Цикл
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовка.Параметры, Выборка);
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("ТекстЗаголовка", СформироватьЗаголовокДокумента(Выборка, НСтр("ru = 'Приоритизация (согласование замены)'")));
		ДанныеПечати.Вставить("ДатаПечати", ТекущаяДатаСеанса());
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовка.Параметры, ДанныеПечати);		
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовка);
		
		СтрокиЗаменДляОбхода = СтрокиЗамен.НайтиСтроки(Новый Структура("ДокументОснование", Выборка.Ссылка));
		
		// обход по заменам
		Для каждого ТекСтрокаЗамены Из СтрокиЗаменДляОбхода Цикл
			
			СтрокиСтарыхЗадачДляОбхода = СтрокиСтарыхЗадач.Скопировать(Новый Структура("Ссылка", ТекСтрокаЗамены.ЗаменаСсылка));
			СтрокиНовыхЗадачДляОбхода = СтрокиНовыхЗадач.Скопировать(Новый Структура("Ссылка", ТекСтрокаЗамены.ЗаменаСсылка));
	
			// Вывод текста письма.
			ОбластьТекстаПисьма = Макет.ПолучитьОбласть("ТекстПисьма");
			
			ЗаполнитьЗначенияСвойств(ОбластьТекстаПисьма.Параметры, ТекСтрокаЗамены);		
			
			// Формирование сводных данных по задачам.
			
			// старые задачи
			Если СтрокиСтарыхЗадачДляОбхода.Количество() = 0 Тогда
				ТекстПереносЗадач = НСтр("ru = 'приоритетное выполнение задачи'");	
			ИначеЕсли СтрокиСтарыхЗадачДляОбхода.Количество() = 1 Тогда
				ТекстСтрокиЗадач = Справочники.ЗаменыЗадачПоПриоритизации.СформироватьСтрокуЗадачСписка(СтрокиСтарыхЗадачДляОбхода);
				ТекстПереносЗадач = СтрШаблон(НСтр("ru = 'перенос задачи (%1) на следующий период выполнения'"), ТекстСтрокиЗадач);	
			Иначе
				ТекстСтрокиЗадач = Справочники.ЗаменыЗадачПоПриоритизации.СформироватьСтрокуЗадачСписка(СтрокиСтарыхЗадачДляОбхода, Истина);
				ТекстПереносЗадач = СтрШаблон(НСтр("ru = 'перенос задач (%1)'"), ТекстСтрокиЗадач);	
			КонецЕсли;
			
			// новые задачи
			Если СтрокиНовыхЗадачДляОбхода.Количество() = 0 Тогда
				ТекстСтрокиНовыхЗадач = НСтр("ru = ''");
				ТекстНовыхЗадач = НСтр("ru = ''");	
			ИначеЕсли СтрокиНовыхЗадачДляОбхода.Количество() = 1 Тогда
				ТекстСтрокиНовыхЗадач = Справочники.ЗаменыЗадачПоПриоритизации.СформироватьСтрокуЗадачСписка(СтрокиНовыхЗадачДляОбхода);
				ТекстНовыхЗадач = СтрШаблон(НСтр("ru = 'Приоритетная новая задача: ""%1"".'"), ТекстСтрокиНовыхЗадач);	
			Иначе
				ТекстСтрокиНовыхЗадач = Справочники.ЗаменыЗадачПоПриоритизации.СформироватьСтрокуЗадачСписка(СтрокиНовыхЗадачДляОбхода);
				ТекстНовыхЗадач = СтрШаблон(НСтр("ru = 'Приоритетные новые задачи: ""%1"".'"), ТекстСтрокиНовыхЗадач);	
			КонецЕсли;
			
			ДопДанныеПечати = Новый Структура;
			ДопДанныеПечати.Вставить("ДеталиПереносаЗадач", ТекстПереносЗадач);
			ДопДанныеПечати.Вставить("НовыеЗадачиСКомментарием", ТекстНовыхЗадач);
			ДопДанныеПечати.Вставить("НовыеЗадачи", ТекстСтрокиНовыхЗадач);
			ЗаполнитьЗначенияСвойств(ОбластьТекстаПисьма.Параметры, ДопДанныеПечати);		
			
			ТабличныйДокумент.Вывести(ОбластьТекстаПисьма);
			
			// Вывод старых задач на перенос.
			ВыводСтрокЗадачЗамены(ТабличныйДокумент, Макет, СтрокиСтарыхЗадачДляОбхода, "Старые");
			
			// Вывод новых задач на перенос.
			ВыводСтрокЗадачЗамены(ТабличныйДокумент, Макет, СтрокиНовыхЗадачДляОбхода, "Новые");
		
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСписка";
		Параметры.Вставить("РежимВыбора", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыводСтрокЗадачЗамены(ТабличныйДокумент, Макет, СтрокиЗадачДляОбхода, ТипСтрок = "Старые")

	// Вывод старых задач на перенос.
	Если СтрокиЗадачДляОбхода.Количество() > 0 Тогда
		Если ТипСтрок = "Старые" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаПереносНаСледующийПериод");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаВыполнятьВТекущемПериоде");
		КонецЕсли;	
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаЗадач");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаЗадачи");
		
		НомерСтроки = 0;
		
		Для каждого ТекСтрокаЗадач Из СтрокиЗадачДляОбхода Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ДанныеДляПечатиСтроки = Новый Структура("ПорядковыйНомер, Номер, Наименование, Инициатор, План, УчитыватьТолькоВремяНаОценку, СтатусОбработки, ВнешняяСсылка");
			ЗаполнитьЗначенияСвойств(ДанныеДляПечатиСтроки, ТекСтрокаЗадач);		
			
			ДанныеДляПечатиСтроки.ПорядковыйНомер = НомерСтроки;
			ДанныеДляПечатиСтроки.Номер = ?(ЗначениеЗаполнено(ТекСтрокаЗадач.ВнешнийНомер), ТекСтрокаЗадач.ВнешнийНомер, ДанныеДляПечатиСтроки.Номер);
			
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеДляПечатиСтроки);		
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

#КонецОбласти



#КонецЕсли
