
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоПолноправныйПользовательЗадач = РаботаСЗадачами.ЭтоПолноправныйПользовательЗадач();	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ИспользоватьОценкуЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьОценкуЗадач");
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Элементы.СрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	Элементы.Дата.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(Список.УсловноеОформление);
	
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов	
	
	// РаботаСЗадачами.ИзбранныеПроекты
	ОбновитьКомандыСозданияПоИзбраннымПроектам(Истина);
	// Конец РаботаСЗадачами.ИзбранныеПроекты
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ПоказыватьВыполненные", ПоказыватьВыполненные);	
	УстановитьОтборСписка(Список, ПараметрыОтбора);	
	
	ПоказатьПанельДетализации();
	
	
	Если ИспользоватьОценкуЗадач Тогда
		
		ОткрытьСписокОценкиЗадач();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗадачаИсполнителя" Тогда
		
		ОбновитьСписокЗадачНаСервере();
		
		СписокПриАктивизацииСтроки(Истина);
		
		УстановитьДанныеПоДетализацииЗадачиКлиент();
		
		ОбновитьЗаголовокНадписиОценкиЗадач(КолВоЗадачНаОценкуТекущие, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		
		ОбновитьСписокЗадачНаСервере();
		УстановитьДанныеПоДетализацииЗадачиКлиент();
		
	ИначеЕсли ИмяСобытия = "Изменены_избранные_проекты" Тогда
		
		// РаботаСЗадачами.ИзбранныеПроекты
		ПараметрыОтбора = Новый Соответствие();
		ПараметрыОтбора.Вставить("Проект", Проект);
		
		УстановитьОтборСписка(Список, ПараметрыОтбора);
		
		ОбновитьКомандыСозданияПоИзбраннымПроектам();
		
		ОбновитьСписокЗадачНаСервере();		
		// Конец РаботаСЗадачами.ИзбранныеПроекты
		
	ИначеЕсли ИмяСобытия = "Изменено_СостояниеЗадачи" Тогда
		
		ОбновитьСписокЗадачНаСервере();
		
	ИначеЕсли ИмяСобытия = "Обновление_КоличествоЗадачБезОценки" Тогда
		
		// Обработка серверного обращения в РаботаСЗадачами.ПриОтправкеСерверногоОповещения()		
		
		ОбновитьЗаголовокНадписиОценкиЗадач(Параметр);
		
	Иначе
		
		// Без обработки.	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборСписка(Список, Настройки);
	
	СгруппироватьПоКолонкеНаСервере(Настройки["РежимГруппировки"]);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодСрокаИсполненияПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("ПериодСрокаИсполнения", ПериодСрокаИсполнения);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроектПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Проект", Проект);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнительПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Исполнитель", Исполнитель);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Состояние", Состояние);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВыполненныеПриИзменении(Элемент)
	
	УстановитьОтборНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПанельДетализацииПриИзменении(Элемент)
	
	ПоказатьПанельДетализации();
	 
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;	
	Если ТекущаяСтрока = ТекущаяЗадача Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадача = ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ПодключитьОбработчикОжидания("УстановитьДанныеПоДетализацииЗадачиКлиент", 0.2, Истина);
	Иначе
		ОчиститьДанныеПоДетализацииЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		
		Отказ = Истина;
		
		ЗначенияЗаполнения = Новый Структура;
		
		Если ЭтоПолноправныйПользовательЗадач 
			И Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			Если Элементы.Список.ТекущиеДанные.Свойство("Проект") Тогда
				ЗначенияЗаполнения.Вставить("Проект", Элементы.Список.ТекущиеДанные.Проект);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

		ОткрытьФорму("Задача.ЗадачиПользователя.Форма.ФормаЗадачи", ПараметрыФормы, Элемент);	

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

//////////////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ УПРАВЛЕНИЯ ЗАДАЧАМИ

// Инициализирует проект из имени команды и создает задачу по проекту
//
&НаКлиенте
Процедура СоздатьЗадачуПоПроекту(Команда)

	ТекКодПроекта = СтрЗаменить(Команда.Имя, "СоздатьЗадачуПоПроекту", "");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Код", ТекКодПроекта);
	НайденныеСтрокиИзбранных = ТаблицаИзбранныхПроектов.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтрокиИзбранных.Количество() > 0 Тогда
		ПроектВыбранный = НайденныеСтрокиИзбранных[0].Проект;
	Иначе
		ПроектВыбранный = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Проект", ПроектВыбранный);	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Задача.ЗадачиПользователя.Форма.ФормаЗадачи", ПараметрыФормы, Элементы.Список);	

КонецПроцедуры // СоздатьЗадачуПоПроекту()

&НаКлиенте
Процедура НастроитьСписокМоихИзбранныхПроектов(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаИзбранныхПроектов",,,,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадач(Команда)
	
	ОбновитьСписокЗадачНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачНаСервере()
	
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(Список);
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	// #НастройкиДоступностиПоСостояниюЗадачи
	Если Не РаботаСЗадачамиКлиент.ДоступРазрешенПоНастройкамДоступности(НастройкиДоступностиЭлементов, Команда.Имя) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Доступ запрещен по настройкам состояния доступности.'"));
		Возврат;
	КонецЕсли;
		
	БизнесПроцессыИЗадачиКлиент.ПринятьЗадачиКИсполнению(Элементы.Список.ВыделенныеСтроки);
	
	// #НастройкиДоступностиПоСостояниюЗадачи: обновление настроек доступности элементов формы
	УстановитьДанныеПоДетализацииЗадачиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	// #НастройкиДоступностиПоСостояниюЗадачи
	Если Не РаботаСЗадачамиКлиент.ДоступРазрешенПоНастройкамДоступности(НастройкиДоступностиЭлементов, Команда.Имя) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Доступ запрещен по настройкам состояния доступности.'"));
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачКИсполнению(Элементы.Список.ВыделенныеСтроки);
	
	// #НастройкиДоступностиПоСостояниюЗадачи: обновление настроек доступности элементов формы
	УстановитьДанныеПоДетализацииЗадачиКлиент();
	
КонецПроцедуры

// Объединение 2-4 выделенных задач с первой выбранной
// ограничение по объединению: не более 4х задач
//
&НаКлиенте
Процедура ОбъединитьЗадачи(Команда)
	
	Если Не ЭтоПолноправныйПользовательЗадач Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Объединять задачи может только полноправный пользователь задач.'"));
		Возврат;
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	Для каждого ТекСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
	     МассивЗадач.Добавить(ТекСтрока);
	КонецЦикла;
	
	Если МассивЗадач.Количество() < 2 
		Или МассивЗадач.Количество() > 4 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбъединитьЗадачиПродолжение", ЭтотОбъект);
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Объединить выделенные %1 задач(и)?'"), МассивЗадач.Количество());
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьЗадачиПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	Для каждого ТекСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
	     МассивЗадач.Добавить(ТекСтрока);
	КонецЦикла;
	
	// вызов процедуры объединения задач
	РаботаСЗадачамиВызовСервера.ОбъединитьЗадачи(МассивЗадач);
	
	Оповестить("Запись_ЗадачаИсполнителя");
	
КонецПроцедуры // ОбъединитьЗадачиПродолжение()


//////////////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ДЛЯ ГРУППИРОВКИ СПИСКА ЗАДАЧ

&НаКлиенте
Процедура СгруппироватьПоВажности(Команда)
	СгруппироватьПоКолонке("Важность");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	СгруппироватьПоКолонке("");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоАвтору(Команда)
	СгруппироватьПоКолонке("Автор");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПолучателюУслуг(Команда)
	СгруппироватьПоКолонке("ПолучательУслуг");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоИсполнителю(Команда)
	СгруппироватьПоКолонке("Исполнитель");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПроекту(Команда)
	СгруппироватьПоКолонке("Проект");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоСрокуИсполнения(Команда)
	СгруппироватьПоКолонке("СрокИсполнения");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоСостоянию(Команда)
	СгруппироватьПоКолонке("Состояние");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПанелиДетализации

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	// #НастройкиДоступностиПоСостояниюЗадачи
	Если Не РаботаСЗадачамиКлиент.ДоступРазрешенПоНастройкамДоступности(НастройкиДоступностиЭлементов, Команда.Имя) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Доступ запрещен по настройкам состояния доступности.'"));
		Возврат;
	КонецЕсли;

	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ДобавитьФайлы(ТекущаяСтрока, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	// #НастройкиДоступностиПоСостояниюЗадачи
	Если Не РаботаСЗадачамиКлиент.ДоступРазрешенПоНастройкамДоступности(НастройкиДоступностиЭлементов, Команда.Имя) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Доступ запрещен по настройкам состояния доступности.'"));
		Возврат;
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Результат = Истина Тогда
		
		КомпонентаПолученияКартинкиИзБуфера = ПараметрыПриложения["УчетЗадачПользователей.КомпонентаПолученияКартинкиИзБуфера"]; 
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			МассивИменФайлов = Новый Массив;
			МассивИменФайлов.Добавить(ПутьКФайлу);
				
			РаботаСФайламиСлужебныйКлиент.ДобавитьФайлыПеретаскиванием(ТекущаяСтрока, УникальныйИдентификатор, МассивИменФайлов);
			
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокФайловНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",  ТекущаяЗадача);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбсуждение(Команда)
	
	ПараметрыДанных = Новый Структура("Документ", ТекущаяЗадача);
	ОткрытьФорму("Справочник.ТемыОбсуждений.Форма.ФормаПросмотраТемы", 
				ПараметрыДанных, 
				ЭтаФорма, 
				УникальныйИдентификатор,
				ЭтаФорма.Окно);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокФайловПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокФайловПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	// #НастройкиДоступностиПоСостояниюЗадачи
	Если Не РаботаСЗадачамиКлиент.ДоступРазрешенПоНастройкамДоступности(НастройкиДоступностиЭлементов, "ДобавитьФайл") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Доступ запрещен по настройкам состояния доступности.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МассивИменФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
	   И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
		   И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
				
				Если ТипЗнч(Значение) = Тип("Файл") И Значение.ЭтоФайл() Тогда
					МассивИменФайлов.Добавить(Значение.ПолноеИмя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		// Нет обработки.

	КонецЕсли;
	
	Если МассивИменФайлов.Количество() > 0 Тогда
		
		РаботаСФайламиСлужебныйКлиент.ДобавитьФайлыПеретаскиванием(
			ТекущаяЗадача, УникальныйИдентификатор, МассивИменФайлов);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКоличествоФайловНажатие(Элемент)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	РаботаСЗадачамиКлиент.ПоказатьПрисоединенныеФайлы(ЭтотОбъект, ТекущаяСтрока);
	
КонецПроцедуры

// Процедура выполняемая по обработчику ожиданий. Обновляет детальную информацию в панели справа
&НаКлиенте
Процедура УстановитьДанныеПоДетализацииЗадачиКлиент() 
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ОчиститьДанныеПоДетализацииЗадачи();
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) <> Тип("ЗадачаСсылка.ЗадачиПользователя")  Тогда
		ОчиститьДанныеПоДетализацииЗадачи();
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = УстановитьДанныеПоДетализацииЗадачи(ТекущаяСтрока);	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанных,
			"ТекущийПроект,ТекущееНаименование,ТекущийПериодЗадачи,ТекущееОписание,ТекущийРезультат,ТекущийИнициатор,ТекущаяТрудоемкость,ТекущаяРабочаяГруппа");
	
	Если Не Элементы.ГруппаФайлы.Доступность Тогда
	    Элементы.ГруппаФайлы.Доступность = Истина;
	КонецЕсли;
	
	ТекстЗаголовкаКолВоФайлов = СтрШаблон(НСтр("ru = 'Всего файлов: %1'"), СтруктураДанных.КоличествоФайлов);
	Если ТекстЗаголовкаКолВоФайлов <> Элементы.ДекорацияКоличествоФайлов.Заголовок Тогда
		Элементы.ДекорацияКоличествоФайлов.Заголовок = ТекстЗаголовкаКолВоФайлов;
	КонецЕсли;
	
КонецПроцедуры

// Установка информации на панели детализации задачи справа
//
// Параметры:
//  Задача	 - ЗадачаСсылка.ЗадачиПользователя - задача 
// 
// Возвращаемое значение:
//  Структура - см. РаботаСЗадачами.ДанныеЗадачи(Задача) 
//
&НаСервере
Функция УстановитьДанныеПоДетализацииЗадачи(Задача) 
	
	// Получение данных по задаче и количество файлов/обсуждений.
	СтруктураДанныхЗадачи = РаботаСЗадачами.ДанныеЗадачи(Задача);
	
	// #НастройкиДоступностиПоСостояниюЗадачи
	ТаблицаНастроекИзВременногоХранилища = ПолучитьИзВременногоХранилища(СтруктураДанныхЗадачи.АдресТаблицыНастройкиДоступности);	
	НастройкиДоступностиЭлементов.Загрузить(ТаблицаНастроекИзВременногоХранилища);
	
	Возврат СтруктураДанныхЗадачи;	

КонецФункции

#КонецОбласти

#Область ОбработчикиОценкиЗадач

// Открывает список оценки задач для пользователей задач (исключения: полные права и контроль задач)
//
&НаКлиенте
Процедура ОткрытьСписокОценкиЗадач() 
	
	Если Не ИспользоватьОценкуЗадач Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗаголовокНадписиОценкиЗадач(КолВоЗадачНаОценкуТекущие, Истина);
	
	Если КолВоЗадачНаОценкуТекущие > 0 
		И (Не ЭтоПолноправныйПользовательЗадач) Тогда
	
		ОткрытьФорму("Задача.ЗадачиПользователя.Форма.ОценкаВыполненияЗадач",, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ожидания, для проверки наличия задач без оценок
//
&НаКлиенте
Процедура ОбновитьЗаголовокНадписиОценкиЗадач(КолВоЗадачНаОценкуНовые, АктуализироватьКолВоЗадач = Ложь)
	
	Если Не ИспользоватьОценкуЗадач Тогда
		Возврат;
	КонецЕсли;
	
	КолВоЗадачНаОценку = КолВоЗадачНаОценкуНовые; 
	
	Если АктуализироватьКолВоЗадач Тогда
		ЕстьЗадачиБезОценкиТекущегоПользователя(КолВоЗадачНаОценку);
	КонецЕсли;
	
	Если КолВоЗадачНаОценку = КолВоЗадачНаОценкуТекущие Тогда
		Возврат;	
	КонецЕсли;
	
	Если КолВоЗадачНаОценку > 0 Тогда
		ЗаголовокОценки = СтрШаблон(НСтр("ru = 'Оценить задачи: %1'"), КолВоЗадачНаОценку); 	
	КонецЕсли;
	
	// вывод надписи по количеству задач	
	Если ЗаголовокОценки <> Элементы.ОценкаВыполненныхЗадач.Заголовок 
		И КолВоЗадачНаОценку > 0 Тогда
		
		Элементы.ОценкаВыполненныхЗадач.Заголовок = СтрШаблон(НСтр("ru = 'Оценить задачи: %1'"), КолВоЗадачНаОценку);
		
	ИначеЕсли ЗаголовокОценки <> Элементы.ОценкаВыполненныхЗадач.Заголовок 
		И КолВоЗадачНаОценку = 0 Тогда
		
		Элементы.ОценкаВыполненныхЗадач.Заголовок = "";
		
	Иначе
		
		// Без обработки.
		
	КонецЕсли;
	
	КолВоЗадачНаОценкуТекущие = КолВоЗадачНаОценку;
	
КонецПроцедуры // ОбновитьЗаголовокНадписиОценкиЗадач()

&НаСервереБезКонтекста
Функция ЕстьЗадачиБезОценкиТекущегоПользователя(КолВоЗадачНаОценку = 0)
	
	Возврат РаботаСЗадачами.ЕстьЗадачиБезОценкиПользователя(Пользователи.ТекущийПользователь(), КолВоЗадачНаОценку);

КонецФункции // ЕстьЗадачиБезОценкиПользователя()

&НаКлиенте
Процедура ОценкаВыполненныхЗадачНажатие(Элемент)
	
	ОткрытьФорму("Задача.ЗадачиПользователя.Форма.ОценкаВыполненияЗадач",, ЭтаФорма,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодменюПоделиться

&НаКлиенте
Процедура ОтправитьПисьмоИнициатору(Команда)
	
	// #НастройкиДоступностиПоСостояниюЗадачи
	Если Не РаботаСЗадачамиКлиент.ДоступРазрешенПоНастройкамДоступности(НастройкиДоступностиЭлементов, Команда.Имя) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Доступ запрещен по настройкам состояния доступности.'"));
		Возврат;
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	Для каждого ТекСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
	     МассивЗадач.Добавить(ТекСтрока);
	КонецЦикла;
	
	ПараметрыУведомленияЗадач = Новый Структура;
	ПараметрыУведомленияЗадач.Вставить("ОтправитьИнициатору" , Истина);
	ПараметрыУведомленияЗадач.Вставить("ОтправитьИсполнителю", Ложь);
	ПараметрыУведомленияЗадач.Вставить("ОтправитьНаEvernote" , Ложь);
	ПараметрыУведомленияЗадач.Вставить("ДобавлятьВложение"   , Ложь);
	
	РаботаСЗадачамиВызовСервера.ОтправитьСообщениеПоЗадачамПользователям(МассивЗадач, ПараметрыУведомленияЗадач);
	
	ПоказатьОповещениеПользователя(
			НСтр("ru = 'Инициаторы и рабочая группа уведомлены.'"));

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоИнициаторуСВложением(Команда)
	
	// #НастройкиДоступностиПоСостояниюЗадачи
	Если Не РаботаСЗадачамиКлиент.ДоступРазрешенПоНастройкамДоступности(НастройкиДоступностиЭлементов, Команда.Имя) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Доступ запрещен по настройкам состояния доступности.'"));
		Возврат;
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	Для каждого ТекСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
	     МассивЗадач.Добавить(ТекСтрока);
	КонецЦикла;
	
	ПараметрыУведомленияЗадач = Новый Структура;
	ПараметрыУведомленияЗадач.Вставить("ОтправитьИнициатору" , Истина);
	ПараметрыУведомленияЗадач.Вставить("ОтправитьИсполнителю", Ложь);
	ПараметрыУведомленияЗадач.Вставить("ОтправитьНаEvernote" , Ложь);
	ПараметрыУведомленияЗадач.Вставить("ДобавлятьВложение"   , Истина);
	
	РаботаСЗадачамиВызовСервера.ОтправитьСообщениеПоЗадачамПользователям(МассивЗадач, ПараметрыУведомленияЗадач);
	
	ПоказатьОповещениеПользователя(
			НСтр("ru = 'Инициаторы и рабочая группа уведомлены.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоИсполнителю(Команда)
	
	// #НастройкиДоступностиПоСостояниюЗадачи
	Если Не РаботаСЗадачамиКлиент.ДоступРазрешенПоНастройкамДоступности(НастройкиДоступностиЭлементов, Команда.Имя) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Доступ запрещен по настройкам состояния доступности.'"));
		Возврат;
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	Для каждого ТекСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
	     МассивЗадач.Добавить(ТекСтрока);
	КонецЦикла;
	ПараметрыУведомленияЗадач = Новый Структура;
	ПараметрыУведомленияЗадач.Вставить("ОтправитьИнициатору" , Ложь);
	ПараметрыУведомленияЗадач.Вставить("ОтправитьИсполнителю", Истина);
	ПараметрыУведомленияЗадач.Вставить("ОтправитьНаEvernote" , Ложь);
	ПараметрыУведомленияЗадач.Вставить("ДобавлятьВложение"   , Истина);
	
	РаботаСЗадачамиВызовСервера.ОтправитьСообщениеПоЗадачамПользователям(МассивЗадач, ПараметрыУведомленияЗадач);
	
	ПоказатьОповещениеПользователя(
			НСтр("ru = 'Исполнитель уведомлен.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВEvernote(Команда)
	
	// #НастройкиДоступностиПоСостояниюЗадачи
	Если Не РаботаСЗадачамиКлиент.ДоступРазрешенПоНастройкамДоступности(НастройкиДоступностиЭлементов, Команда.Имя) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Доступ запрещен по настройкам состояния доступности.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьВEvernoteЗавершение", ЭтотОбъект);
	Если EmailEvernoteТекущегоПользователя() = "" Тогда
		ОткрытьФорму("ОбщаяФорма.НастройкаEvernoteПользователя",,,,,, 
			Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВEvernoteЗавершение(Результат, Параметры) Экспорт
	
	Если EmailEvernoteТекущегоПользователя() = "" Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	Для каждого ТекСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
	     МассивЗадач.Добавить(ТекСтрока);
	КонецЦикла;
	
	ПараметрыУведомленияЗадач = Новый Структура;
	ПараметрыУведомленияЗадач.Вставить("ОтправитьИнициатору" , Ложь);
	ПараметрыУведомленияЗадач.Вставить("ОтправитьИсполнителю", Ложь);
	ПараметрыУведомленияЗадач.Вставить("ОтправитьНаEvernote" , Истина);
	ПараметрыУведомленияЗадач.Вставить("ДобавлятьВложение"   , Истина);
	
	РаботаСЗадачамиВызовСервера.ОтправитьСообщениеПоЗадачамПользователям(МассивЗадач, ПараметрыУведомленияЗадач);
	
	ПоказатьОповещениеПользователя(
			НСтр("ru = 'Задачи добавлены в Evernote.'"));
	
КонецПроцедуры // ДобавитьВEvernoteЗавершение()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
	
	// показывать выполненные
	Выполненные = ПараметрыОтбора.Получить("ПоказыватьВыполненные");
	Если Выполненные <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Выполнена");
		Если Не ПараметрыОтбора["ПоказыватьВыполненные"] Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор, "Выполнена", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// проект 
	Проект = ПараметрыОтбора.Получить("Проект");
	Если Проект <> Неопределено Тогда 
		
		Если Не ЗначениеЗаполнено(Проект) Тогда
			
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"Проект");
			
		ИначеЕсли Проект = ПредопределенноеЗначение("Справочник.Проекты.ИзбранныеПроекты") Тогда
			
			МассивПроектов = РаботаСЗадачамиВызовСервера.МассивИзбранныхПроектовТекущегоПользователя();
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Проект",
				МассивПроектов,
				ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
				
		ИначеЕсли Проект = ПредопределенноеЗначение("Справочник.Проекты.БезПроекта") Тогда		
			
			СписокПроектов = Новый СписокЗначений;
			СписокПроектов.Добавить(ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"));
			СписокПроектов.Добавить(ПредопределенноеЗначение("Справочник.Проекты.БезПроекта"));

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Проект",
				СписокПроектов,
				ВидСравненияКомпоновкиДанных.ВСписке);
				
		Иначе		
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Проект",
				Проект,
				ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
				
		КонецЕсли;
			
	КонецЕсли;
	
	// исполнитель 
	Исполнитель = ПараметрыОтбора.Получить("Исполнитель");
	Если Исполнитель <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Исполнитель) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"Исполнитель");
		Иначе
			СписокПроектов = Новый СписокЗначений;
			СписокПроектов.Добавить(Исполнитель);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Исполнитель",
				Исполнитель,
				ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
				
		КонецЕсли;
	КонецЕсли;
	
	// состояние 
	Состояние = ПараметрыОтбора.Получить("Состояние");
	Если Состояние <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Состояние) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"Состояние");
		Иначе
			СписокПроектов = Новый СписокЗначений;
			СписокПроектов.Добавить(Состояние);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Состояние",
				Состояние,
				ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
				
		КонецЕсли;
	КонецЕсли;
	
	
	// период срока исполнения
	ПериодВыборки = ПараметрыОтбора.Получить("ПериодСрокаИсполнения");
	УсловиеОтборПериод = ОтборПериодСтрока(); // возвращает "ОтборПериод"
	Если ПериодВыборки <> Неопределено Тогда 
		
		ЭлементыОтбора = Список.Отбор.Элементы;
		
		ЭлементОтбораДанных = Неопределено;
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Представление = УсловиеОтборПериод Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭлементОтбораДанных = Неопределено Тогда
			ГруппаОтборПериод = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборПериод.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 
			ГруппаОтборПериод.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
			ГруппаОтборПериод.Использование = Истина;
			ГруппаОтборПериод.Представление = УсловиеОтборПериод;
		Иначе
			ГруппаОтборПериод = ЭлементОтбораДанных;
			ГруппаОтборПериод.Элементы.Очистить();
			ГруппаОтборПериод.Использование = Истина;
		КонецЕсли;	
		
		ГруппаСрокИсполнения = ГруппаОтборПериод.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаСрокИсполнения.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
		ГруппаСрокИсполнения.Использование = Истина;
			
		Если ЗначениеЗаполнено(ПериодВыборки.ДатаНачала) Тогда 
			ЭлементОтбораДанных = ГруппаСрокИсполнения.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
			ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаНачала;
			ЭлементОтбораДанных.Использование = Истина;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ПериодВыборки.ДатаОкончания) Тогда 
			ЭлементОтбораДанных = ГруппаСрокИсполнения.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
			ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаОкончания;
			ЭлементОтбораДанных.Использование = Истина;
		КонецЕсли;
		
		Если ГруппаСрокИсполнения.Элементы.Количество() = 0 Тогда 
			ГруппаОтборПериод.Элементы.Удалить(ГруппаСрокИсполнения);
		КонецЕсли;
		
		Если ГруппаОтборПериод.Элементы.Количество() = 0 Тогда 
			ЭлементыОтбора.Удалить(ГруппаОтборПериод);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтборПериодСтрока()

	Возврат "ОтборПериод";

КонецФункции // ОтборПериодСтрока()

// Формирование списка команд по избранным проектам в подменю "Создать" 
// Используется для быстрого создания задачи с выбранным проектом
//
&НаСервере
Процедура ОбновитьКомандыСозданияПоИзбраннымПроектам(ВзятьКэш = Ложь)
	
	МассивПредыдущихИзбранныхПроектов = РеквизитФормыВЗначение("ТаблицаИзбранныхПроектов").ВыгрузитьКолонку("Код");
	ТаблицаИзбранныхПроектов.Очистить();
	ТаблицаТекущегоПользователя = ТаблицаИзбранныхПроектовТекущегоПользователяСервер(ВзятьКэш);
	ТаблицаИзбранныхПроектов.Загрузить(ТаблицаТекущегоПользователя);
	МассивТекущихИзбранныхПроектов = ТаблицаТекущегоПользователя.ВыгрузитьКолонку("Код");
	
	МассивИзбранныхПроектовНаУдаление = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивПредыдущихИзбранныхПроектов, МассивТекущихИзбранныхПроектов);
	// удаление не актуальных команд
	Если МассивИзбранныхПроектовНаУдаление.Количество() > 0 Тогда
		
		Для каждого ТекСтрока Из МассивИзбранныхПроектовНаУдаление Цикл
			ТекКоманда = "СоздатьЗадачуПоПроекту" + СтрЗаменить(ТекСтрока, "-", "");
			КомандаПроекта = Команды.Найти(ТекКоманда);
		    Если КомандаПроекта <> Неопределено Тогда
				Команды.Удалить(КомандаПроекта);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// добавление новых команд
	Для Каждого ТекСтрока Из ТаблицаИзбранныхПроектов Цикл
		
		Если (Не ЗначениеЗаполнено(ТекСтрока.Проект)) 
			Или ТекСтрока.Проект = Справочники.Проекты.БезПроекта 
			Или ТекСтрока.Проект = Справочники.Проекты.ИзбранныеПроекты Тогда
			Продолжить;
		КонецЕсли;
		
		ТекИмяКнопки = Строка(ТекСтрока.Проект); 
		ТекКоманда = "СоздатьЗадачуПоПроекту" + СтрЗаменить(ТекСтрока.Код, "-", "");
		
		Если Команды.Найти(ТекКоманда) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КомандаФормы = Команды.Добавить(ТекКоманда);
		КомандаФормы.Действие = "СоздатьЗадачуПоПроекту";
		Элементы.Добавить(ТекКоманда, Тип("КнопкаФормы"), Элементы.ГруппаСоздатьСПроектом);
		Элементы[ТекКоманда].Заголовок = СтрШаблон(НСтр("ru = 'Создать по проекту: %1'"), ТекИмяКнопки);
		Элементы[ТекКоманда].ИмяКоманды = ТекКоманда;
		
	КонецЦикла;
 
КонецПроцедуры // ОбновитьКомандыСозданияПоИзбраннымПроектам()

&НаКлиенте
Процедура СгруппироватьПоКолонке(Знач ИмяКолонкиРеквизита)
	
	РежимГруппировки = ИмяКолонкиРеквизита;
	Если НЕ ПустаяСтрока(РежимГруппировки) Тогда
		ПоказыватьВыполненные = Ложь;
		УстановитьОтборНаКлиенте();
	КонецЕсли;
	Список.Группировка.Элементы.Очистить();
	Если НЕ ПустаяСтрока(ИмяКолонкиРеквизита) Тогда
		ПолеГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиРеквизита);
	КонецЕсли;
	  
КонецПроцедуры

&НаСервере
Процедура СгруппироватьПоКолонкеНаСервере(Знач ИмяКолонкиРеквизита)
	
	РежимГруппировки = ИмяКолонкиРеквизита;
	Если НЕ ПустаяСтрока(РежимГруппировки) Тогда
		ПоказыватьВыполненные = Ложь;
		ПараметрыОтбора = Новый Соответствие();
		ПараметрыОтбора.Вставить("ПоказыватьВыполненные", ПоказыватьВыполненные);	
		УстановитьОтборСписка(Список, ПараметрыОтбора);	
	КонецЕсли;
	Список.Группировка.Элементы.Очистить();
	Если НЕ ПустаяСтрока(ИмяКолонкиРеквизита) Тогда
		ПолеГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПанельДетализации()

	Элементы.ГруппаДетализации.Видимость = ПанельДетализации;

КонецПроцедуры 

&НаКлиенте
Процедура УстановитьОтборНаКлиенте()
	
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ПоказыватьВыполненные", ПоказыватьВыполненные);	
	УстановитьОтборСписка(Список, ПараметрыОтбора);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоЦветамСостоянийСервер()
	
	РаботаСЗадачами.УстановитьУсловноеОформлениеПоЦветамСостояний(
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление,
		Метаданные.Справочники.СостоянияЗадач.ПолноеИмя());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаИзбранныхПроектовТекущегоПользователяСервер(ВзятьКэш = Ложь)

	Если ВзятьКэш Тогда
		ТаблицаПроектов = РаботаСЗадачамиПовтИсп.ТаблицаИзбранныхПроектовТекущегоПользователя();
	Иначе
		ТаблицаПроектов = РаботаСЗадачами.ТаблицаИзбранныхПроектовТекущегоПользователя();
	КонецЕсли;	
	
	Возврат ТаблицаПроектов;
	
КонецФункции 
// Очистка информации на панели детализации задачи справа
&НаКлиенте
Процедура ОчиститьДанныеПоДетализацииЗадачи() 
	
	ТекущаяЗадача = "";
	
	ТекущийПроект 		= "";
	ТекущееНаименование = "";
	ТекущийПериодЗадачи = "";
	ТекущееОписание		= "";
	ТекущийРезультат	= "";
	ТекущийИнициатор		= "";
	ТекущаяТрудоемкость = 0;
	
	ТекущаяРабочаяГруппа = ""; 
	
	Если Элементы.ГруппаФайлы.Доступность Тогда
	    Элементы.ГруппаФайлы.Доступность = Ложь;
	КонецЕсли;
	
	// #НастройкиДоступностиПоСостояниюЗадачи	
	НастройкиДоступностиЭлементов.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция EmailEvernoteТекущегоПользователя()

	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Evernote", "EmailEvernote", "");

КонецФункции // EmailEvernoteТекущегоПользователя()

#КонецОбласти

