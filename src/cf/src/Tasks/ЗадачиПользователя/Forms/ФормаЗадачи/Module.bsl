
#Область ОписаниеПеременных

&НаКлиенте
Перем ОткрытаФормаВыбораИсполнителя;  // Признак того, что исполнитель выбирается из формы, а не быстрым вводом.
&НаКлиенте
Перем КонтекстВыбора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов	
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ГруппаДоступаАдминистраторы = УправлениеДоступом.ГруппаДоступаАдминистраторы();
	
	НачальныйПризнакВыполнения = Объект.Выполнена;
	
	ЭтоПолноправныйПользовательЗадач = РаботаСЗадачами.ЭтоПолноправныйПользовательЗадач();	
	
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	
	ЭтоНовый = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		// новая задача
		
		ЭтоНовый = Истина;
		Объект.Инициатор  = ТекущийПользователь; 
		Объект.ПолучательУслуг = ТекущийПользователь; 
		
		// заполнение проекта и исполнителя из значений по-умолчанию
		ДанныеИзХранилища = ДанныеИзХранилищаОбщихНастроек();
		Объект.Проект = ?(ЗначениеЗаполнено(ДанныеИзХранилища.Проект), ДанныеИзХранилища.Проект, Объект.Проект);
		ИсполнительПредставление = ?(ЗначениеЗаполнено(ДанныеИзХранилища.Исполнитель), ДанныеИзХранилища.Исполнитель, Объект.Исполнитель); 
		
		НачальнаяНастройкаПриЧтенииИСоздании(Объект);
	
		Если ЗначениеЗаполнено(Объект.Проект) Тогда
			ПроектПриИзмененииНаСервере();
		КонецЕсли;
		
	Иначе
		
		Если Не Объект.Исполнитель.Пустая() Тогда
			ИсполнительВыбранРанее = Истина;
		КонецЕсли;
		
		// Отображение представления поля "Исполнитель", в случае если заполнена только роль
		Если Не ЗначениеЗаполнено(Объект.Исполнитель) И ЗначениеЗаполнено(Объект.РольИсполнителя) Тогда
			ИсполнительПредставление = Объект.РольИсполнителя;	
		Иначе
			ИсполнительПредставление = Объект.Исполнитель;	
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменениеКонфигурации = ОтобразитьНаличиеОписанияИзмененийКонфигурации(Объект.Ссылка);
	
	// #Spelling
	ВключитьАвтоматическуюПроверкуОрфографииПриЗаписи = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", 
		"ВключитьАвтоматическуюПроверкуОрфографии",
		Ложь);
	// Конец #Spelling
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	СтруктураКолВоФайловОбсуждений = КолВоФайловОбсуждений(Объект.Ссылка);
	Элементы.ДекорацияКоличествоФайлов.Заголовок = СтруктураКолВоФайловОбсуждений.КоличествоФайловЗаголовок;
	Элементы.ДекорацияОбсуждение.Заголовок = СтруктураКолВоФайловОбсуждений.КоличествоОбсужденийЗаголовок;
	Элементы.ДекорацияОбсуждение.Видимость = СтруктураКолВоФайловОбсуждений.ОбсуждениеВключено;
	
	// #СостояниеЗадачи
	УстановитьСостояниеЗадачи();
	СостоянияЗадачКэш.Загрузить(РаботаСЗадачамиПовтИсп.СостоянияЗадачКэш());
	
	// #ХронометражЗадач
	РаботаСЗадачами.ПроинициализироватьПараметрыХронометража(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
		
		
	// #НастройкиДоступностиПоСостояниюЗадачи
	ТаблицаНастроекДоступности = Справочники.НастройкиДоступностиПоСостояниюЗадачи.НастройкиДоступностиФормыЗадачи(ЭтаФорма, "ФормаЗадачи");
	НастройкиДоступностиЭлементов.Загрузить(ТаблицаНастроекДоступности);
	
	// #Обсуждения
	// Настройка автоматического прочтения
	ТекущееСообщениеПрочтено = Истина;
	ИспользоватьАвтоматическоеПрочтение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрочтения",
		"ПомечатьСообщенияФорумаКакПрочтенныеПриПрочтенныеПриПросмотреВОбластиЧтения",
		Ложь);
		
	// Текущее сообщение
	Если Параметры.Свойство("ТекущееСообщение") Тогда
		ТекущееСообщение = Параметры.ТекущееСообщение;
	Иначе
		ТекущееСообщение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			Тема.УникальныйИдентификатор(), 
			"ТекущееСообщение", 
			"");
	КонецЕсли;

	ОбновитьОбсужденияСервер();
	
	// #ВходящиеЭлектронныеПисьма
	Если Не ЭтоНовый Тогда
		
		ДанныеПоВходящемуЭлектронномуПисьму = Документы.ЭлектронныеПисьмаВходящие.ВходящийДокументПоUID(Строка(Объект.Ссылка.УникальныйИдентификатор()));
		Если ДанныеПоВходящемуЭлектронномуПисьму.ДокументНайден Тогда
		
		    ТекстПисьма = ДанныеПоВходящемуЭлектронномуПисьму.ТекстПисьма;
			СтруктураКартинокПисьма = ДанныеПоВходящемуЭлектронномуПисьму.СтруктураКартинокПисьма;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// #ПланированиеЗадач
	Элементы.ГруппаПланирование.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеЗадач");
	Элементы.ГруппаИнтеграция.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеЗадач"); 
	// Установка невидимой группы команд хронометража, т.к. фиксация факта теперь работает через режим планирования.
	Элементы.ГруппаХронометраж.Видимость = Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеЗадач");  
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	НачальнаяНастройкаПриЧтенииИСоздании(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДоступностьКомандВыполнения();
	
	// Настройка ограничения видимости полей по ролям доступа
	НастройкаОграниченияВидимостиПользовательскихПолей();
	
	УстановитьКоличествоВЗаголовки();	
	
	БизнесПроцессыИЗадачиКлиент.ОбновитьДоступностьКомандПринятияКИсполнению(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// #ВходящиеЭлектронныеПисьма
	Если ЗначениеЗаполнено(ТекстПисьма) Тогда
	
		ОбщегоНазначенияКупоросКлиент.ВставитьКартинкиВТелоПисьма(СтруктураКартинокПисьма, ТекстПисьма);
		
		Элементы.ГруппаПисьмо.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаПисьмо.Видимость = Ложь;
		
	КонецЕсли;
	
	// #Обсуждения
	УправлятьВидимостьюДереваОбщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборРолиИсполнителя") Тогда
		
		Если КонтекстВыбора = "ИсполнительПриИзменении" Тогда
			
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
				ИсполнительПредставление = ВыбранноеЗначение.РольИсполнителя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(ИсполнительПредставление) Тогда
		
		ОбщегоНазначения.СообщитьПользователю( 
			НСтр("ru = 'Поле ""Кому"" не заполнено.'"),,,
			"ИсполнительПредставление", Отказ);
			
	КонецЕсли;
	
	Если ЭтоПолноправныйПользовательЗадач
		И ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗадач")
		И ЗначениеЗаполнено(Объект.Проект) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Проект, "ПроверятьНаЗаполненностьВидЗадачи") = Истина
		И Не ЗначениеЗаполнено(Объект.ВидЗадачи) Тогда
	
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Вид задачи"" не заполнено.'"),, 
			"Объект.ВидЗадачи",, Отказ);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) 
		И (ЭтоНовый 
			Или СрокБылИзменен) Тогда
		// проверка на верный срок исполнения
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Если Объект.СрокИсполнения < ТекущаяДатаСеанса Тогда
			ОбщегоНазначения.СообщитьПользователю(
		    	НСтр("ru = 'Поле ""Срок исполнения"" заполнено некорректно у выполняемой задачи'"),, 
				"Объект.СрокИсполнения",, Отказ);
			Возврат;
		КонецЕсли;
		
		РазницаСрокаИсполненияОтОграничителя = Объект.СрокИсполнения - ТекущаяДатаСеанса;
		Если РазницаСрокаИсполненияОтОграничителя < 3600 Тогда
			ОбщегоНазначения.СообщитьПользователю(
		    	НСтр("ru = 'Поле ""Срок исполнения"" минимум 1 час от текущего времени.'"),, 
				"Объект.СрокИсполнения",, Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение Исполнитель, Роли исполнителя.
	Если ИсполнительПредставление <> Объект.Исполнитель Тогда
		
		Если ТипЗнч(ИсполнительПредставление) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ТекущийОбъект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
			ТекущийОбъект.РольИсполнителя = ИсполнительПредставление;
		Иначе
			ТекущийОбъект.Исполнитель = ИсполнительПредставление;
			ТекущийОбъект.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
			ТекущийОбъект.ОсновнойОбъектАдресации = Неопределено;
			ТекущийОбъект.ДополнительныйОбъектАдресации = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение рабочей группы.
	ТекущийОбъект.РабочаяГруппа.Очистить();
	
	Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
		НовСтрока = ТекущийОбъект.РабочаяГруппа.Добавить();
		НовСтрока.Пользователь = Элемент.Пользователь;
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ИзменениеКонфигурации = ОтобразитьНаличиеОписанияИзмененийКонфигурации(Объект.Ссылка);
	
	ЭтоНовый = Ложь;
	
	// #СостояниеЗадачи
	УстановитьСостояниеЗадачи();
	
	// #НастройкиДоступностиПоСостояниюЗадачи
	ТаблицаНастроекДоступности = Справочники.НастройкиДоступностиПоСостояниюЗадачи.НастройкиДоступностиФормыЗадачи(ЭтаФорма, "ФормаЗадачи");
	НастройкиДоступностиЭлементов.Загрузить(ТаблицаНастроекДоступности);
	
	// УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьКоличествоВЗаголовки();
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("Запись_ЗадачаИсполнителя",, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗадачаИсполнителя" Тогда
		
		ОбновитьДоступностьКомандВыполнения();
		НастройкаОграниченияВидимостиПользовательскихПолей();
	   
	ИначеЕсли ИмяСобытия = "Запись_ОписаниеИзмененийКонфигурации" Тогда
		
		ИзменениеКонфигурации = Параметр;
		
	Иначе
		
		// Нет обработки.
		
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства	
	
	Если ИмяСобытия = "Запись_Файл" 
		Или ИмяСобытия = "Изменение_СообщенияОбсуждений"  Тогда
		
		СтруктураКолВоФайловОбсуждений = КолВоФайловОбсуждений(Объект.Ссылка);
		Элементы.ДекорацияКоличествоФайлов.Заголовок = СтруктураКолВоФайловОбсуждений.КоличествоФайловЗаголовок;
		Элементы.ДекорацияОбсуждение.Заголовок = СтруктураКолВоФайловОбсуждений.КоличествоОбсужденийЗаголовок;
		
	КонецЕсли;
	
	// #Обсуждения
	Если РаботаСПрочтениямиКлиент.ПроверитьНеобходимостьОбновления(
			ИмяСобытия, Параметр, "Обсуждения") Тогда
			
		РаботаСОбсуждениямиКлиент.ОбновитьПрочтенностьЭлементовДерева(
				Элементы.ДеревоСообщений,
				ДеревоСообщений,
				Истина,
				Параметр);
				
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненаОтметкаСообщений" Тогда
		
		РаботаСОбсуждениямиКлиент.ОбновитьИзменениеЭлементовДерева(
				Элементы.ДеревоСообщений,
				ДеревоСообщений,
				Истина,
				Параметр, "ЕстьОтметкаСообщения");
			
	КонецЕсли;
	
	Если ИмяСобытия = "Изменение_СообщенияОбсуждений" Тогда
		
		ТекущееСообщение = Параметр;
		ОбновитьОбсужденияКлиент();
		
		УстановитьТекущуюСтрокуСообщения(ТекущееСообщение);
		
	КонецЕсли;
	
	Если ИмяСобытия = "СозданаТемаПоПредмету" Тогда
		Если Параметр.Свойство("Тема") 
			И Параметр.Свойство("Предмет") 
			И Параметр.Предмет = Объект.Ссылка Тогда
			ЗадатьТему(Параметр.Тема);
		КонецЕсли;
	КонецЕсли;
	// Конец #Обсуждения
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ПроектПриИзмененииНаСервере();
	
	УстановитьКоличествоВЗаголовки();
	
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();	 
	// Конец СтандартныеПодсистемы.Свойства	
	 
КонецПроцедуры

&НаСервере
Процедура ПроектПриИзмененииНаСервере() 
	
	Если Не ЗначениеЗаполнено(Объект.Проект) Тогда
		Возврат;	
	КонецЕсли;
	
	РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Проект, 
		"Описание, ОписаниеРезультата, ПользователиПроекта, СрокВыполненияДней, ПолучательУслуг, ВидЗадачиПоУмолчанию");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗадач")
		И Не ЗначениеЗаполнено(Объект.ВидЗадачи) Тогда
		
		Объект.ВидЗадачи = РеквизитыПроекта.ВидЗадачиПоУмолчанию;
		УстановитьТипЗадачиНаСервере(Объект.ВидЗадачи);
	
	КонецЕсли;
	
	Если Объект.Наименование = "" Тогда
		
		Объект.Наименование = РеквизитыПроекта.Описание;
		Объект.Ответ 		= РеквизитыПроекта.ОписаниеРезультата;
		
	КонецЕсли;
			
	Если Не ИсполнительВыбранРанее Тогда
		ИсполнительПредставление = ТекущийИсполнительПоУмолчанию(Объект.Проект);
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Объект.СрокИсполнения)) 
		И ЗначениеЗаполнено(РеквизитыПроекта.СрокВыполненияДней) Тогда
		// срок исполнения от количества дней указанных в проекте
		Объект.СрокИсполнения = КонецДня(ТекущаяДатаСеанса() + РеквизитыПроекта.СрокВыполненияДней * 24 * 60 * 60); 	
	КонецЕсли;
	
	Объект.ПолучательУслуг = РеквизитыПроекта.ПолучательУслуг;
	
	// рабочая группа - пользователи проекта
	Объект.РабочаяГруппа.Очистить();
	ПользователиГруппы.ПолучитьЭлементы().Очистить();
	
	ИзмененныеСтроки = Новый Массив;
	
	МассивПользователейПроекта = Справочники.Проекты.МассивПользователейПроекта(Объект.Проект);
	
	Для каждого ТекПользовательПроекта Из МассивПользователейПроекта Цикл
	
		НоваяСтрокаСогласования = Объект.РабочаяГруппа.Добавить();
		
		Если ТипЗнч(ТекПользовательПроекта) = Тип("СправочникСсылка.Пользователи") 
			И ЗначениеЗаполнено(ТекПользовательПроекта) Тогда
			
			НовыйЭлемент = ПользователиГруппы.ПолучитьЭлементы().Добавить();
			НовыйЭлемент.Пользователь = ТекПользовательПроекта;
			ИзмененныеСтроки.Добавить(НовыйЭлемент.ПолучитьИдентификатор());
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если ИзмененныеСтроки.Количество() > 0 Тогда
		
		ОбновленныеСтроки = Неопределено;
		ОбновитьПользователейГрупп(ИзмененныеСтроки, ОбновленныеСтроки);
		Для каждого ИдентификаторСтроки Из ОбновленныеСтроки Цикл
			Элементы.Пользователи.Развернуть(ИдентификаторСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	Если ОткрытаФормаВыбораИсполнителя = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ИсполнительПредставление.Пустая()) 
		И ТекущийИсполнительПоУмолчанию(Объект.Проект) <> ИсполнительПредставление Тогда
		ИсполнительВыбранРанее = Истина;
	КонецЕсли;
	
	ОсновнойОбъектАдресации = Неопределено;
	ДополнительныйОбъектАдресации = Неопределено;
	
	Если ТипЗнч(ИсполнительПредставление) = Тип("СправочникСсылка.РолиИсполнителей") 
		И ЗначениеЗаполнено(ИсполнительПредставление) Тогда 
		
		РеквизитыРолиИсполнителя = РеквизитыРолиИсполнителя(ИсполнительПредставление);
		
		Если РеквизитыРолиИсполнителя.ИспользуетсяСОбъектамиАдресации = Истина 
			И БизнесПроцессыИЗадачиКлиентПереопределяемый.НеобходимоОпределениеОбъектовАдресацииПриВыбореРоли(РеквизитыРолиИсполнителя.ТипыОсновногоОбъектаАдресации, 
					РеквизитыРолиИсполнителя.ТипыДополнительногоОбъектаАдресации)  Тогда 
			
			КонтекстВыбора = "ИсполнительПриИзменении";
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РольИсполнителя", ИсполнительПредставление);
			ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, ЭтотОбъект);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ВыбратьИсполнителя(Элемент, ИсполнительПредставление);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОткрытаФормаВыбораИсполнителя = ТипЗнч(ВыбранноеЗначение) = Тип("Структура");
	Если ОткрытаФормаВыбораИсполнителя Тогда
		СтандартнаяОбработка = Ложь;
		ИсполнительПредставление = ВыбранноеЗначение.РольИсполнителя;
		Объект.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		Объект.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИсполнителемТекущегоПользователя(Команда)
	
	Объект.Исполнитель = ТекущийПользователь;
	ИсполнительПредставление = ТекущийПользователь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗадачиПриИзменении(Элемент)
	
	УстановитьТипЗадачиНаСервере(Объект.ВидЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		Объект.СрокИсполнения = КонецДня(Объект.СрокИсполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияВремяПриИзменении(Элемент)
	СрокБылИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗадачиПриИзменении(Элемент)
	
	// #СостояниеЗадачи
	УстановитьСостояниеЗадачиКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентЗавершенияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// инкремент/декремент процентов
	Если Направление = 1 Тогда
	 	Объект.ПроцентЗавершения =  Объект.ПроцентЗавершения + 10;
	Иначе
	 	Объект.ПроцентЗавершения =  Объект.ПроцентЗавершения - 10;
	КонецЕсли;
	
	// округление до полного результата
	Объект.ПроцентЗавершения = ?(Объект.ПроцентЗавершения > 100, 100, Объект.ПроцентЗавершения);
	Объект.ПроцентЗавершения = ?(Объект.ПроцентЗавершения < 0, 0, Объект.ПроцентЗавершения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ЗаполнитьНаименованиеЗадачиИзТекста(Объект.Описание);	
	
	ЕстьИзмененияОписания = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыЗадачиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьКоличествоВЗаголовки();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователи

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "РАБОЧАЯ ГРУППА"

&НаКлиенте
Процедура ПользователиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			Отказ = Истина;
			
			Элементы.Пользователи.ТекущаяСтрока =
				Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
			
			Элементы.Пользователи.СкопироватьСтроку();
		КонецЕсли;
		
	ИначеЕсли Элементы.Пользователи.ТекущаяСтрока <> Неопределено Тогда
		Отказ = Истина;
		Элементы.Пользователи.СкопироватьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Отказ = Истина;
		
		Элементы.Пользователи.ТекущаяСтрока =
			Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
		
		Элементы.Пользователи.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередУдалением(Элемент, Отказ)
	
	СтрокаРодителя = Элемент.ТекущиеДанные.ПолучитьРодителя();
	
	Если СтрокаРодителя <> Неопределено Тогда
		Отказ = Истина;
		
		Если ТипЗнч(СтрокаРодителя.Пользователь) =
		        Тип("СправочникСсылка.ГруппыПользователей") Тогда
			
			ПоказатьПредупреждение(,
				НСтр("ru = 'Пользователи групп отображаются для сведения,
				           |что они получают доступ групп пользователей.
				           |Их нельзя удалить в этом списке.'"));
		Иначе
			ПоказатьПредупреждение(,
				НСтр("ru = 'Внешние пользователи групп отображаются для сведения,
				           |что они получают доступ групп внешних пользователей.
				           |Их нельзя удалить в этом списке.'"));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Пользователь = Неопределено Тогда
		Элемент.ТекущиеДанные.НомерКартинки = -1;
		Элемент.ТекущиеДанные.Пользователь = ПредопределенноеЗначение(
			"Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока
	   И Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.Пользователь = ПредопределенноеЗначение(
	     	"Справочник.Пользователи.ПустаяСсылка") Тогда
		
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если РежимПодбора Тогда
		ПользователиГруппы.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	ИзмененныеСтроки = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			ЗначениеНеНайдено = Истина;
			Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
				Если Элемент.Пользователь = Значение Тогда
					ЗначениеНеНайдено = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеНеНайдено Тогда
				НовыйЭлемент = ПользователиГруппы.ПолучитьЭлементы().Добавить();
				НовыйЭлемент.Пользователь = Значение;
				ИзмененныеСтроки.Добавить(НовыйЭлемент.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Элемент.ТекущиеДанные.Пользователь <> ВыбранноеЗначение Тогда
		Элемент.ТекущиеДанные.Пользователь = ВыбранноеЗначение;
		ИзмененныеСтроки.Добавить(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	Если ИзмененныеСтроки.Количество() > 0 Тогда
		ОбновленныеСтроки = Неопределено;
		ОбновитьПользователейГрупп(ИзмененныеСтроки, ОбновленныеСтроки);
		Для каждого ИдентификаторСтроки Из ОбновленныеСтроки Цикл
			Элементы.Пользователи.Развернуть(ИдентификаторСтроки);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПослеУдаления(Элемент)
	
	// Установка отображения дерева.
	ЕстьВложенные = Ложь;
	Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
			ЕстьВложенные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Пользователи.Отображение =
		?(ЕстьВложенные, ОтображениеТаблицы.Дерево, ОтображениеТаблицы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Пользователи.ТекущиеДанные.Пользователь) Тогда
		ОбновитьПользователейГрупп(Элементы.Пользователи.ТекущаяСтрока);
		Элементы.Пользователи.Развернуть(Элементы.Пользователи.ТекущаяСтрока);
	Иначе
		Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьПодобратьПользователей(Ложь);
	РежимПодбора = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
	Элементы.Пользователи.ТекущиеДанные.Пользователь  = ПредопределенноеЗначение(
		"Справочник.Пользователи.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь; 
		Если Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст, Ложь, Ложь);
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст, Ложь, Ложь);
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ВыбратьПодобратьПользователей(Истина);
	РежимПодбора = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ИЗМЕНИЯ СТАТУСА ЗАДАЧИ

// Основная процедура записи и выполнения задачи
&НаКлиенте
Процедура ЗаписатьЗадачу(ВыполнитьЗадачу = Ложь, ЗакрытьФорму = Ложь, ОтправитьУведомление = Ложь) 
	
	Если Объект.Проект.Пустая() 
		И ЭтоПолноправныйПользовательЗадач Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		    НСтр("ru = 'Поле ""Проект"" не заполнено у выполняемой задачи.'"),, 
			"Объект.Проект");
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыОповещенияЗаписиЗадачи = Новый Структура;
	ПараметрыОповещенияЗаписиЗадачи.Вставить("ВыполнитьЗадачу", ВыполнитьЗадачу);
	ПараметрыОповещенияЗаписиЗадачи.Вставить("ЗакрытьФормы", ЗакрытьФорму);
	ПараметрыОповещенияЗаписиЗадачи.Вставить("ОтправитьУведомление", ОтправитьУведомление);
	
	// #Spelling
	Если ВключитьАвтоматическуюПроверкуОрфографииПриЗаписи 
		И (ЕстьИзмененияОписания 
			Или ЕстьИзмененияРезультата) Тогда
		
		ПроверитьОрфографиюИЗаписать(ПараметрыОповещенияЗаписиЗадачи);
		Возврат;	
		
	КонецЕсли;	
	// Конец #Spelling
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьЗадачуЗавершение", ЭтотОбъект, ПараметрыОповещенияЗаписиЗадачи);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура);
	
	Возврат;	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	ЗаписатьЗадачу(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗадачуКоманда(Команда)
	
	ЗаписатьЗадачу();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗадачуЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	ЕстьИзмененияОписания = Ложь;
	ЕстьИзмененияРезультата = Ложь;
	
	// #Spelling
	Если Результат.Свойство("ЕстьИзмененияПоТекстуПослеПроверкиОрфографии") И Результат.ЕстьИзмененияПоТекстуПослеПроверкиОрфографии Тогда
		// Не записывать пока есть изменения по тексту
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Задача не записана, т.к. есть изменения по тексту. Необходимо повторить запись.'"));
		Возврат;
	КонецЕсли;
	// Конец #Spelling
	
	// Запись задачи
	ОчиститьСообщения();
	
	НовыйОбъект = Объект.Ссылка.Пустая();
	ТекстОповещения = "";
	Если ПараметрыОповещения = Неопределено Тогда
		ПараметрыОповещения = Новый Структура;
	КонецЕсли;
	
	ТекстОповещения = ?(НовыйОбъект, НСтр("ru = 'Задача создана.'"), НСтр("ru = 'Задача изменена.'"));
	
	Если ПараметрыОповещения.Свойство("ВыполнитьЗадачу") И ПараметрыОповещения.ВыполнитьЗадачу Тогда
		
		Объект.ДатаВыполнения = ОбщегоНазначенияКлиент.ДатаСеанса();	
		Объект.Выполнена = Истина;
		Объект.ОтмененаЗадача = Ложь;  //!
		
		ТекстОповещения = НСтр("ru = 'Задача выполнена.'");
		
		СостояниеЗадачи = ПредопределенноеЗначение("Справочник.СостоянияЗадач.Выполнена");
		
	КонецЕсли;
	
	Записать();
	
	Если ПараметрыОповещения.Свойство("ВыполнитьЗадачу") 
		И ПараметрыОповещения.ВыполнитьЗадачу 
		И ПараметрыОповещения.ОтправитьУведомление Тогда
		
		// уведомление авторов и согласователей	при выполнении задачи после записи	
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Объект.Ссылка);
		
		ПараметрыУведомленияЗадач = Новый Структура;
		ПараметрыУведомленияЗадач.Вставить("ОтправитьИнициатору", Истина);
		ПараметрыУведомленияЗадач.Вставить("ОтправитьИсполнителю", Ложь);
		ПараметрыУведомленияЗадач.Вставить("ОтправитьНаEvernote", Ложь);
		ПараметрыУведомленияЗадач.Вставить("ДобавлятьВложение", Ложь);
		
		РаботаСЗадачамиВызовСервера.ОтправитьСообщениеПоЗадачамПользователям(МассивЗадач, ПараметрыУведомленияЗадач);
		
		ТекстОповещения = НСтр("ru = 'Задача выполнена и инициаторы уведомлены'"); 
		
	КонецЕсли;
	
	Оповестить("Запись_ЗадачаИсполнителя", ПараметрыОповещения, Объект.Ссылка);
	ПоказатьОповещениеПользователя(ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
		
		Если ПараметрыОповещения.Свойство("ЗакрытьФормы") 
			И ПараметрыОповещения.ЗакрытьФормы Тогда
		
		 Закрыть();
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	ВыполнитьЗадачуНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуНачало()

	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗадачуЗавершение", ЭтотОбъект, Ложь);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Задача выполнена?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры // ВыполнитьЗадачуНачало()

&НаКлиенте
Процедура ВыполнитьЗадачуСУведомлением(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗадачуЗавершение", ЭтотОбъект, Истина);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Отметить задачу как выполненную и отправить уведомление автору (и рабочей группе)?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуЗавершение(Результат, ОтправитьУведомление) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Запись и выполнение задачи.
	ЗаписатьЗадачу(Истина, Истина, ОтправитьУведомление);
	
КонецПроцедуры // ВыполнитьЗадачуЗавершение()

&НаКлиенте
Процедура СнятьВыполнениеЗадачи(Команда)
	
	СнятьВыполнениеЗадачиНачало();

КонецПроцедуры

&НаКлиенте
Процедура СнятьВыполнениеЗадачиНачало(НовоеСостояние = Неопределено)

	Оповещение = Новый ОписаниеОповещения("СнятьВыполнениеЗадачиЗавершение", ЭтотОбъект, НовоеСостояние);
	ТекстВопроса = НСтр("ru = 'Вернуть задачу на доработку в состояние ""%1""?
                         |После возврата необходимо в описании или обсуждении дополнить информацию о причинах.'");
	
	ТекстВопроса = СтрШаблон(ТекстВопроса, ?(ЗначениеЗаполнено(НовоеСостояние), 
												НовоеСостояние, 
												ПредопределенноеЗначение("Справочник.СостоянияЗадач.Зарегистрирована")));
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры // СнятьВыполнениеЗадачиНачало()

&НаКлиенте
Процедура СнятьВыполнениеЗадачиЗавершение(Результат, НовоеСостояние) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаВыполнения = "";	
	Объект.Выполнена = Ложь;
	Объект.ПроцентЗавершения = 0;
	Объект.ОтмененаЗадача = Ложь;  //!
	Объект.ОценкаЗадачи = 0;
	Объект.ДатаОценкиЗадачи = '00010101';
	Объект.ПринятаКИсполнению = Ложь;
	Объект.ДатаПринятияКИсполнению = "00010101000000";	
	
	Если Не ЗначениеЗаполнено(НовоеСостояние)  Тогда
	    // Состояние не было изменено на конкретное и устанавливаем "Зарегистрирована" в качестве базового
		
		СостояниеЗадачиПредыдущее = СостояниеЗадачи;
		СостояниеЗадачи = ПредопределенноеЗначение("Справочник.СостоянияЗадач.Зарегистрирована");
		
	Иначе
		
		СостояниеЗадачиПредыдущее = СостояниеЗадачи;
		СостояниеЗадачи = НовоеСостояние;
		
	КонецЕсли;
	
	ЭтаФорма.Записать();
	
	Элементы.ФормаПринятьКИсполнению.Доступность = Истина;
	Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = Ложь;
	
	ПоказатьОповещениеПользователя(
			НСтр("ru = 'Задача возвращена'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка));
			
	ОбновитьДоступностьКомандВыполнения();
	
КонецПроцедуры // СнятьВыполнениеЗадачиЗавершение()

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	СостояниеЗадачи = ПредопределенноеЗначение("Справочник.СостоянияЗадач.ВРаботе");
	
	БизнесПроцессыИЗадачиКлиент.ПринятьЗадачуКИсполнению(ЭтаФорма, ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	СостояниеЗадачи = ПредопределенноеЗначение("Справочник.СостоянияЗадач.Зарегистрирована");
	
	БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачиКИсполнению(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОСТАЛЬНЫЕ КОМАНДЫ

&НаКлиенте
Процедура ИзменитьДатуВыполненияЗадачи(Команда)
	
	Если Не ИзменятьЗаданияЗаднимЧислом Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Запрещено изменять дату выполнения. Для включения необходимо изменить настройки системы.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоПолноправныйПользовательЗадач Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Изменить дату выполнения может только пользователь с полными правами.'"));
		Возврат;
	КонецЕсли;
	
	ВыбраннаяДата = Объект.ДатаВыполнения;
	Оповещение = Новый ОписаниеОповещения("ИзменитьДатуВыполненияЗадачиЗавершение", ЭтотОбъект);
 	ПоказатьВводДаты(Оповещение, ВыбраннаяДата, НСтр("ru = 'Введите дату выполнения.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуВыполненияЗадачиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Объект.ДатаВыполнения = Результат;	

КонецПроцедуры

// #ХронометражЗадач
&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	РаботаСЗадачамиКлиент.ПереключитьХронометраж(ЭтаФорма);
	
КонецПроцедуры

// #ХронометражЗадач
&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт
	
	РаботаСЗадачами.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПоследних(Команда)
	
	ФормаВсехЗадач = ПолучитьФорму("Задача.ЗадачиПользователя.ФормаСписка", , ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаВсехЗадач.Список, 
		"Проект", 
		Объект.Проект,,,, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаВсехЗадач.Список, 
		"ВидЗадачи", 
		Объект.ВидЗадачи,,,, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	
	ФормаВсехЗадач.Открыть();
			
КонецПроцедуры

#КонецОбласти

#Область СтраницаОписание

////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "Описание"

&НаКлиенте
Процедура РезультатНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ВводРезультатаЗавершение", ЭтотОбъект);
 	ПоказатьВводСтроки(Оповещение, Объект.Ответ, НСтр("ru = 'Введите результат задачи'"),, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводРезультатаЗавершение(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	Объект.Ответ = Результат;
	
	ЕстьИзмененияРезультата = Истина;
	
	ЭтаФорма.Модифицированность = Истина;	

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазделительНажатие(Элемент)
	
	СписокРазделителейОписания = Новый СписокЗначений;
	СписокРазделителейОписания.Добавить(Объект.ПолучательУслуг);
	Если Объект.Исполнитель <> Объект.ПолучательУслуг  Тогда
	 	СписокРазделителейОписания.Добавить(Объект.Исполнитель);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюВариантовРазделителяОписания", ЭтотОбъект, ЭтаФорма);
	ЭтаФорма.ПоказатьВыборИзМеню(Оповещение, СписокРазделителейОписания, Элементы.ДекорацияРазделитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюВариантовРазделителяОписания(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ВставитьРазделительВТекст("Описание", "Описание", Результат.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКоличествоФайловНажатие(Элемент)
	
	РаботаСЗадачамиКлиент.ПоказатьПрисоединенныеФайлы(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		КомпонентаПолученияКартинкиИзБуфера = ПараметрыПриложения["УчетЗадачПользователей.КомпонентаПолученияКартинкиИзБуфера"]; 
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			МассивИменФайлов = Новый Массив;
			МассивИменФайлов.Добавить(ПутьКФайлу);
				
			РаботаСФайламиСлужебныйКлиент.ДобавитьФайлыПеретаскиванием(Объект.Ссылка, УникальныйИдентификатор, МассивИменФайлов);
			
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбщениеНажатие(Элемент)
	
	ПараметрыДанных = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("Справочник.ТемыОбсуждений.Форма.ФормаПросмотраТемы", 
				ПараметрыДанных, 
				ЭтаФорма, 
				УникальныйИдентификатор,
				ЭтаФорма.Окно);
	
КонецПроцедуры

// Установка состояние задачи и запись в регистре #СостояниеЗадачи
//
&НаКлиенте
Процедура УстановитьСостояниеЗадачиКлиент(ПриИзмененииВручную = Ложь)
	
	Если СостояниеЗадачиПредыдущее = СостояниеЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на обязательность указания срока состояния
	ПараметрыСостояния = Новый Структура("Ссылка", СостояниеЗадачи);
	СписокСостоянийИзКэша = СостоянияЗадачКэш.НайтиСтроки(ПараметрыСостояния);
	ЗаполнениеСрокаДляСостоянияОбязательно = Ложь; 
	ЗаполнениеПроцентаВыполнения100 = Ложь;
	Если СписокСостоянийИзКэша.Количество() > 0 Тогда
		
		 // если срок обязателен, то обязателен вызов формы ввода срока
		 ЗаполнениеСрокаДляСостоянияОбязательно = СписокСостоянийИзКэша[0].ОбязателенСрокСостояния;
		 ЗаполнениеПричиныДляСостоянияОбязательно = СписокСостоянийИзКэша[0].ОбязательнаПричинаИзмененияСостояния;
		 ЗаполнениеПроцентаВыполнения100 = СписокСостоянийИзКэша[0].ПроцентВыполнения100;
		 
	КонецЕсли;
	
	// при любом изменении срок состояния первично обнуляется
	СрокСостояния = '00010101';
	
	Если ПриИзмененииВручную 
		И СостояниеЗадачи = ПредопределенноеЗначение("Справочник.СостоянияЗадач.Выполнена") Тогда
		// Выполнить задачу.
		
		// Возврат на предыдущее состояние, т.к. выполнение само изменит на нужное состояние.
		СостояниеЗадачи = СостояниеЗадачиПредыдущее;
		
		ВыполнитьЗадачуНачало();
		Возврат;
		
	ИначеЕсли ПриИзмененииВручную 
		И (СостояниеЗадачиПредыдущее = ПредопределенноеЗначение("Справочник.СостоянияЗадач.Выполнена") 
			Или СостояниеЗадачиПредыдущее = ПредопределенноеЗначение("Справочник.СостоянияЗадач.ОтмененоВыполнение")) Тогда
		// Вернуть на доработку из выполненного состояния.
		
		// Фиксация состояния, чтобы установить в случае успешного снятия выполнения задачи.
		НовоеСостояние = СостояниеЗадачи;
		
		// Возврат на предыдущее состояние, т.к. снятие выполнения само изменит на состояние НовоеСостояние.
		СостояниеЗадачи = СостояниеЗадачиПредыдущее;
		
		СнятьВыполнениеЗадачиНачало(НовоеСостояние);
		
		Возврат;
		
	ИначеЕсли ПриИзмененииВручную 
		И (ЗаполнениеСрокаДляСостоянияОбязательно 
		        Или ЗаполнениеПричиныДляСостоянияОбязательно
				Или СостояниеЗадачи = ПредопределенноеЗначение("Справочник.СостоянияЗадач.НаУточнении") 
				Или СостояниеЗадачи = ПредопределенноеЗначение("Справочник.СостоянияЗадач.Приостановлена")) Тогда
				
		// Вариант с заполнением причины.
		ПараметрыЗавершения = Новый Структура();
		ПараметрыЗавершения.Вставить("СостояниеЗадачи", СостояниеЗадачи);
		ПараметрыЗавершения.Вставить("ЗаполнениеСрокаДляСостоянияОбязательно", ЗаполнениеСрокаДляСостоянияОбязательно);
		ПараметрыЗавершения.Вставить("ЗаполнениеПричиныДляСостоянияОбязательно", ЗаполнениеПричиныДляСостоянияОбязательно);
		ПараметрыЗавершения.Вставить("ЗаполнениеПроцентаВыполнения100", ЗаполнениеПроцентаВыполнения100);
		Оповещение = Новый ОписаниеОповещения("УстановитьСостояниеЗадачиКлиентЗавершение", ЭтотОбъект, ПараметрыЗавершения);
		
		Если ЗаполнениеСрокаДляСостоянияОбязательно Тогда
			СрокСостояния = ?(ЗначениеЗаполнено(СрокСостояния), СрокСостояния, КонецНедели(ОбщегоНазначенияКлиент.ДатаСеанса()));
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Введите срок  действия состояния: %1'"), СрокСостояния);
			ПоказатьВводДаты(Оповещение, СрокСостояния, ТекстВопроса);        
		Иначе
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Изменить состояние задачи на: %1?'"), СостояниеЗадачи);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ПриИзмененииВручную
		И ЗаполнениеПроцентаВыполнения100 Тогда	
		
		Объект.ПроцентЗавершения = 100;
		Записать();
		
	КонецЕсли;
	
	УстановитьСостояниеЗадачи();
	
	Оповестить("Изменено_СостояниеЗадачи",, ЭтаФорма);
	
	ТекстОповещения = СтрШаблон(НСтр("ru = '%1'"), СостояниеЗадачи);
	ПоказатьОповещениеПользователя(ТекстОповещения,
		ПолучитьНавигационнуюСсылку(СостояниеЗадачи),
		НСтр("ru = 'Смена состояния.'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры // УстановитьСостояниеЗадачиКлиент()

&НаКлиенте
Процедура УстановитьСостояниеЗадачиКлиентЗавершение(Результат, ПараметрыЗавершения) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		СостояниеЗадачи = СостояниеЗадачиПредыдущее;
		Возврат;
	КонецЕсли;
	
	ТекстСрокСостояния = "";
	Если Не ПараметрыЗавершения.ЗаполнениеСрокаДляСостоянияОбязательно 
		И Результат <> КодВозвратаДиалога.Да Тогда
		СостояниеЗадачи = СостояниеЗадачиПредыдущее;
		Возврат;
	ИначеЕсли ПараметрыЗавершения.ЗаполнениеСрокаДляСостоянияОбязательно Тогда
		СрокСостояния = Результат;
		ТекстСрокСостояния = СтрШаблон(НСтр("ru = '. Срок состояния до: %1'"), СрокСостояния);        	
	КонецЕсли;
	
	СостояниеЗадачиПараметр = ПараметрыЗавершения.СостояниеЗадачи;
	
	// Открытие формы ввода сообщения о уточнении/приостановки задачи.
	Если ПараметрыЗавершения.ЗаполнениеПричиныДляСостоянияОбязательно 
		Или СостояниеЗадачи = ПредопределенноеЗначение("Справочник.СостоянияЗадач.НаУточнении") 
		Или СостояниеЗадачи = ПредопределенноеЗначение("Справочник.СостоянияЗадач.Приостановлена") Тогда
		
		ТекстНовогоСообщения = СтрШаблон(НСтр("ru = '[Изменено состояние задачи на ""%1""%2]
                                               |'"), СостояниеЗадачи, ТекстСрокСостояния);
		
		ПараметрыФормы = Новый Структура("Предмет,ТекстНовогоСообщения", Объект.Ссылка, ТекстНовогоСообщения);
		ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", ПараметрыФормы);
		
	КонецЕсли;
	
	Если ПараметрыЗавершения.ЗаполнениеПроцентаВыполнения100 Тогда	
		
		Объект.ПроцентЗавершения = 100;	
		Записать();
		
	КонецЕсли;
	
	УстановитьСостояниеЗадачи(ПараметрыЗавершения.ЗаполнениеСрокаДляСостоянияОбязательно);
	
	Оповестить("Изменено_СостояниеЗадачи",, ЭтаФорма);
	
	ТекстОповещения = СтрШаблон(НСтр("ru = '%1'"), СостояниеЗадачиПараметр);
	ПоказатьОповещениеПользователя(ТекстОповещения,
		ПолучитьНавигационнуюСсылку(СостояниеЗадачиПараметр),
		НСтр("ru = 'Смена состояния.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры // УстановитьСостояниеЗадачиКлиентЗавершение()

// Обновление текущего состояния задачи в регистре
//
// Параметры:
//  ИзмененСрокСостояния - Булево - Истина, в случае если было изменение срока состояния
//
&НаСервере
Процедура УстановитьСостояниеЗадачи(ИзмененСрокСостояния = Ложь)

	Если ЭтоНовый Тогда
		
		СостояниеЗадачиПредыдущее = Справочники.СостоянияЗадач.Зарегистрирована;
		СостояниеЗадачи = Справочники.СостоянияЗадач.Зарегистрирована;
		СрокСостояния = '00010101';
		Возврат;
		
	КонецЕсли;	
	
	ПринудительнаяФиксацияВИстории = Ложь;
	Если СостояниеЗадачи = Справочники.СостоянияЗадач.ВРаботе
		И СостояниеЗадачиПредыдущее <> Справочники.СостоянияЗадач.ВРаботе Тогда
		// при переходе на состояние "В работе" принудительная фиксация в истории
		ПринудительнаяФиксацияВИстории = Истина;
	КонецЕсли;
	
	СостояниеЗадачиПредыдущее = СостояниеЗадачи;
	
	Если Не ЗначениеЗаполнено(СостояниеЗадачи) Тогда
	
		РезультатСостояниеЗадачи = РегистрыСведений.ТекущиеСостоянияЗадач.ДанныеПоТекущемуСостояниюЗадачи(Объект.Ссылка);
		СостояниеЗадачи = РезультатСостояниеЗадачи.Состояние;
		СтатусОбработки = РезультатСостояниеЗадачи.СтатусОбработки;
		СрокСостояния   = РезультатСостояниеЗадачи.СрокСостояния;
		
		Если Не ЗначениеЗаполнено(СостояниеЗадачиПредыдущее) Тогда
			СостояниеЗадачиПредыдущее = СостояниеЗадачи;
		КонецЕсли;
		
	КонецЕсли;
	
	// цвета фона состояния
	ЦветаФонаСостояния = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СостояниеЗадачи, "ЦветФонаСостояния");
	Элементы.ГруппаФактВыполнения.ЦветФона = ?(ЗначениеЗаполнено(ЦветаФонаСостояния), 
		ЗначениеИзСтрокиВнутр(ЦветаФонаСостояния), 
		Новый Цвет(255, 255, 255));	
	
	// Обновление текущего состояния в регистре.
	РегистрыСведений.ТекущиеСостоянияЗадач.ОбновитьТекущееСостояниеЗадачи(Объект.Ссылка, 
		СостояниеЗадачи,
		СрокСостояния, 
		ПричинаСостояния, 
		ПринудительнаяФиксацияВИстории);
	
	// заполнение списка выбора
	РезультатСостоянияПерехода = Справочники.СценарииОбработкиЗадач.ПереходыСценарияПоСостоянию(Объект.Проект, СостояниеЗадачи);
	
	РезультатСостоянияПерехода.Добавить(СостояниеЗадачи);
	
	Элементы.СостояниеЗадачи.СписокВыбора.ЗагрузитьЗначения(РезультатСостоянияПерехода);
	
	Элементы.СрокСостояния.Видимость = ЗначениеЗаполнено(СрокСостояния);
	
КонецПроцедуры // УстановитьСостояниеЗадачи()

#КонецОбласти

#Область СтраницаВходящееПисьмо

////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "Входящее письмо"

&НаКлиенте
Процедура ТекстПисьмаДокументСформирован(Элемент)
    
    Элемент.Документ.Body.ContentEditable = "false";
	Элемент.Документ.body.scroll          = "yes";
    Если СтрДлина(ТекстПисьма) > 0 Тогда
    	Элемент.Документ.Body.innerHTML = ТекстПисьма;
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СтраницаРезультат

////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "РЕЗУЛЬТАТ"

&НаКлиенте
Процедура Ответ1ПриИзменении(Элемент)
	
	ЕстьИзмененияРезультата = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Ответ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаШаблона = Элемент.ТекстРедактирования;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Основание", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РезультатНачалоВыбораПродолжить", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ШаблоныЗаполнения.ФормаВыбора", ПараметрыОткрытия,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатНачалоВыбораПродолжить(Результат, Параметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
	
	МассивПараметровДляРучногоЗаполнения = Новый Массив;
	
	Объект.Ответ = ТекстШаблонаДляВставки(Результат, МассивПараметровДляРучногоЗаполнения);
	
	// Дозаполнить массив параметров для ручного заполнения
	Если МассивПараметровДляРучногоЗаполнения.Количество() > 0 Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("МассивПараметровДляРучногоЗаполнения", МассивПараметровДляРучногоЗаполнения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РезультатНачалоВыбораЗавершитьЗаполнениеПараметров", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.ШаблоныЗаполнения.Форма.ЗаполнениеПараметровДляРучногоВвода", ПараметрыОткрытия,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ТекстШаблонаДляВставки(ШаблонЗаполненияСсылка, МассивПараметровДляРучногоЗаполнения)

	ТекстДляОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонЗаполненияСсылка, "ШаблонДляВставки");
	
	// заполнение дополнительных параметров
	ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки, "[Наименование]", Объект.Наименование);
	ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки, "[Основание]", Объект.Основание);
	
	Параметр = "[ВсеВложения]";
	Если СтрНайти(ТекстДляОбработки, Параметр) Тогда
		ТекстФайлов = "";
		СписокФайлов = РаботаСЗадачамиВызовСервера.СписокПрисоединенныхФайлов(Объект.Ссылка);
		Индекс = 0;
		Для каждого ТекФайл Из СписокФайлов Цикл
			Индекс = Индекс + 1;
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ТекФайл.Значение);
			ТекстФайлов = ТекстФайлов + СтрШаблон(НСтр("ru = '[Вложение %1: %2]
                                          	|'"), Индекс, ДанныеФайла.ИмяФайла);
		КонецЦикла;
		ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки, Параметр, ТекстФайлов);
	КонецЕсли;
	
	Параметр = "[ВложенияИсполнителя]";
	Если СтрНайти(ТекстДляОбработки, Параметр) Тогда
		ТекстФайлов = "";
		СписокФайлов = РаботаСЗадачамиВызовСервера.СписокПрисоединенныхФайлов(Объект.Ссылка);
		Индекс = 0;
		Для каждого ТекФайл Из СписокФайлов Цикл
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ТекФайл.Значение);
			Если ДанныеФайла.Автор <> Объект.Исполнитель Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс = Индекс + 1;
			ТекстФайлов = ТекстФайлов + СтрШаблон(НСтр("ru = '[Вложение %1: %2]
                                          	|'"), Индекс, ДанныеФайла.ИмяФайла);
		КонецЦикла;
		ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки, Параметр, ТекстФайлов);
	КонецЕсли;
	
	Параметр = "[ВложенияИсполнителяСегодня]";
	Если СтрНайти(ТекстДляОбработки, Параметр) Тогда
		ТекстФайлов = "";
		СписокФайлов = РаботаСЗадачамиВызовСервера.СписокПрисоединенныхФайлов(Объект.Ссылка);
		Индекс = 0;
		Для каждого ТекФайл Из СписокФайлов Цикл
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ТекФайл.Значение);
			Если ДанныеФайла.Автор <> Объект.Исполнитель Тогда
				Продолжить;
			КонецЕсли;
			
			Если НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФайла.Версия, "ДатаСоздания")) <> НачалоДня(ТекущаяДатаСеанса()) Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс = Индекс + 1;
			ТекстФайлов = ТекстФайлов + СтрШаблон(НСтр("ru = '[Вложение %1: %2]
                                          	|'"), Индекс, ДанныеФайла.ИмяФайла);
		КонецЦикла;
		ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки, Параметр, ТекстФайлов);
	КонецЕсли;
	
	// Получение всех параметров для ручного заполнения.
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстДляОбработки);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	ЭлементыHTML = ДокументDOM.ПолучитьЭлементыПоИмени("Parametr");
	МассивПараметровДляРучногоЗаполнения = Новый Массив;
	Для каждого ТекСтрокаЭлемента Из ЭлементыHTML Цикл
		
		МассивПараметровДляРучногоЗаполнения.Добавить(ТекСтрокаЭлемента.ТекстовоеСодержимое);
		
	КонецЦикла;
	ЧтениеHTML.Закрыть();
	МассивПараметровДляРучногоЗаполнения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПараметровДляРучногоЗаполнения);
	
	Возврат ТекстДляОбработки;	

КонецФункции // ТекстШаблонаДляВставки()

&НаКлиенте
Процедура РезультатНачалоВыбораЗавершитьЗаполнениеПараметров(Результат, Параметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
	
	Для каждого ТекСтрока Из Результат Цикл
		
		ЧтоЗаменять = СтрШаблон(НСтр("ru = '<Parametr>%1</Parametr>'"), ТекСтрока.Параметр);
		НаЧтоЗаменять = ТекСтрока.Значение;
		
		Объект.Ответ = СтрЗаменить(Объект.Ответ, ЧтоЗаменять, НаЧтоЗаменять);

	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазделительРезультатНажатие(Элемент)
	
	ВставитьРазделительВТекст("Ответ1", "Ответ", ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеКонфигурацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоНовый Или Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения действия требуется записать изменения задачи.'"));
		Возврат;
	КонецЕсли;
	
	ВыборкаДокумент = СтруктураОписанияИзмененийКонфигурации(Объект.Ссылка);
	Если Не ВыборкаДокумент.ЕстьОписаниеИзменений Тогда
		
		// новый
		ЗначенияЗаполнения = Новый Структура;
		КонфигурацияИзПроекта = КонфигурацияИзДанныхПроекта(Объект.Проект);
		ЗначенияЗаполнения.Вставить("Конфигурация", КонфигурацияИзПроекта);
		ЗначенияЗаполнения.Вставить("ВерсияКонфигурации", МаксимальнаяВерсияКонфигурацииСервер(КонфигурацияИзПроекта));
		
		ЗначенияЗаполнения.Вставить("ОписаниеИзменения", Объект.Ответ);
		ЗначенияЗаполнения.Вставить("ДатаДобавления", ОбщегоНазначенияКлиент.ДатаСеанса());
		ЗначенияЗаполнения.Вставить("Основание", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	Иначе
		
		// уже существующий
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Конфигурация", ВыборкаДокумент.Конфигурация);		
		СтруктураКлюча.Вставить("ВерсияКонфигурации", ВыборкаДокумент.ВерсияКонфигурации);
 		СтруктураКлюча.Вставить("РазделОбновления", ВыборкаДокумент.РазделОбновления);
 		СтруктураКлюча.Вставить("ПорядковыйНомер", ВыборкаДокумент.ПорядковыйНомер);
		
		КлючЗаписи = КлючЗаписиОписанияИзмененийКонфигурации(СтруктураКлюча); 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ОписаниеИзмененийКонфигурации.ФормаЗаписи", ПараметрыФормы, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетЗатраченныхЧасов(Команда)
	
	РасчетЗатраченныхЧасовНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура РасчетЗатраченныхЧасовНаКлиенте()
	
	Если ЭтоНовый Тогда
		Возврат;
	КонецЕсли;

	РезультатаРасчета = РасчетЗатраченныхЧасовНаСервере(Объект.Ссылка);
	
	Объект.Трудоемкость = РезультатаРасчета.Трудоемкость;
	
	// вставка текста комментариев с разделителем
	Для каждого ТекСтрока Из РезультатаРасчета.МассивДеталей Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Описание) Тогда
			Продолжить;
		КонецЕсли;
		
		ВставитьРазделительВТекст("Ответ1", "Ответ", ТекСтрока.Исполнитель, ТекСтрока.Описание, ТекСтрока.Период); 
		
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры // РасчетЗатраченныхЧасовНаКлиенте()

&НаСервереБезКонтекста
Функция РасчетЗатраченныхЧасовНаСервере(СсылкаНаЗадачу)
	
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("Трудоемкость", 0);
	РезультатРасчета.Вставить("МассивДеталей", Новый Массив);
	
	ДанныеПоЗатраченномуВремени = РегистрыСведений.ЗатраченноеВремяПоЗадачам.ФактическоеЗатраченноеВремяПоЗадаче(СсылкаНаЗадачу);
	
	РезультатРасчета.Трудоемкость = ДанныеПоЗатраченномуВремени.ОбщееЗатраченноеВремя;
	РезультатРасчета.МассивДеталей = ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеПоЗатраченномуВремени.ДеталиПоЗатраченномуВремени);
	
	Возврат РезультатРасчета;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандПоделиться

&НаКлиенте
Процедура ОтправитьПисьмоПроизвольное(Команда)
	
	ДополнительныеПараметры = Новый Структура("ИмяФормыИсточникаСообщения", "");
	ДополнительныеПараметры.ИмяФормыИсточникаСообщения = ЭтаФорма.ИмяФормы;
	
	ШаблоныСообщенийКлиент.СформироватьСообщение(Объект.Ссылка, "Письмо",,, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоИнициатору(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОтправкиПисьма", "ОтправитьПисьмоИнициатору");
	Если ЭтоНовый 
		Или Модифицированность Тогда
		
		ТекстВопроса = НСтр(
				"ru = 'Для выполнения действия требуется записать изменения задачи.
				      |Записать изменения и отправить письмо автору (рабочей группе)?'");
		СтруктураПараметров.Вставить("ЕстьИзменения", Истина);
		
	Иначе
		
		ТекстВопроса = НСтр(
				"ru = 'Отправить письмо автору (рабочей группе)?'");
		СтруктураПараметров.Вставить("ЕстьИзменения", Ложь);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПисьмоЗавершение", ЭтотОбъект, СтруктураПараметров);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоИнициаторуСВложением(Команда)
	
	СтруктураПараметров = Новый Структура;            
	СтруктураПараметров.Вставить("ТипОтправкиПисьма", "ОтправитьПисьмоИнициаторуСВложением");
	Если ЭтоНовый 
		Или Модифицированность Тогда
		
		ТекстВопроса = НСтр(
				"ru = 'Для выполнения действия требуется записать изменения задачи.
				      |Записать изменения и отправить письмо автору (рабочей группе) с вложением?'");
		СтруктураПараметров.Вставить("ЕстьИзменения", Истина);
		
	Иначе
		
		ТекстВопроса = НСтр(
				"ru = 'Отправить письмо автору (рабочей группе) с вложением?'");
		СтруктураПараметров.Вставить("ЕстьИзменения", Ложь);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПисьмоЗавершение", ЭтотОбъект, СтруктураПараметров);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоИсполнителю(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОтправкиПисьма", "ОтправитьПисьмоИсполнителю");
	Если ЭтоНовый 
		Или Модифицированность Тогда
		
		ТекстВопроса = НСтр(
				"ru = 'Для выполнения действия требуется записать изменения задачи.
				      |Записать изменения и отправить письмо исполнителю?'");
		СтруктураПараметров.Вставить("ЕстьИзменения", Истина);
		
	Иначе
		
		ТекстВопроса = НСтр(
				"ru = 'Отправить письмо исполнителю?'");
		СтруктураПараметров.Вставить("ЕстьИзменения", Ложь);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПисьмоЗавершение", ЭтотОбъект, СтруктураПараметров);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВEvernote(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьВEvernoteЗавершение", ЭтотОбъект);
	Если ПолучитьEmailEvernoteТекущегоПользователя() = "" Тогда
		ОткрытьФорму("ОбщаяФорма.НастройкаEvernoteПользователя",,,,,, 
			Оповещение, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВEvernoteЗавершение(Результат, Параметры) Экспорт
	
	Если ПолучитьEmailEvernoteТекущегоПользователя() = "" Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОтправкиПисьма", "ДобавитьВEvernote");
	Если ЭтоНовый 
		Или Модифицированность Тогда
		
		ТекстВопроса = НСтр(
				"ru = 'Для выполнения действия требуется записать изменения задачи.
				      |Записать изменения и добавить в Evernote задачу?'");
		СтруктураПараметров.Вставить("ЕстьИзменения", Истина);
		
	Иначе
		
		ТекстВопроса = НСтр(
				"ru = 'Добавить в Evernote задачу?'");
		СтруктураПараметров.Вставить("ЕстьИзменения", Ложь);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПисьмоЗавершение", ЭтотОбъект, СтруктураПараметров);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры // ДобавитьВEvernoteЗавершение()

// Отправляет email-письмо по определенным параметрам 
//
// Параметры:
// РезультатВопроса  - РежимДиалогаВопрос.ДаНет
//  СтруктураПараметров  - Структура - содержит свойства
//		* ЕстьИзменения - Булево - Истина, если есть изменения в форме
//		* ТипОтправкиПисьма - Строка - варианты отправки письма. 
//									   Типы: ОтправитьПисьмоИнициатору, ОтправитьПисьмоИнициаторуСВложением, ОтправитьПисьмоИсполнителю 
//
&НаКлиенте
Процедура ОтправитьПисьмоЗавершение(РезультатВопроса, СтруктураПараметров) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьИзменения 
		И (Не ЭтаФорма.Записать()) Тогда
		Возврат;
	КонецЕсли;	
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	
	Если СтруктураПараметров.ТипОтправкиПисьма = "ОтправитьПисьмоИнициатору" Тогда
		
		ПараметрыУведомленияЗадач = Новый Структура;
		ПараметрыУведомленияЗадач.Вставить("ОтправитьИнициатору" , Истина);
		ПараметрыУведомленияЗадач.Вставить("ОтправитьИсполнителю", Ложь);
		ПараметрыУведомленияЗадач.Вставить("ОтправитьНаEvernote" , Ложь);
		ПараметрыУведомленияЗадач.Вставить("ДобавлятьВложение"   , Ложь);
		
		РаботаСЗадачамиВызовСервера.ОтправитьСообщениеПоЗадачамПользователям(МассивЗадач, ПараметрыУведомленияЗадач);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Автор и согласователи уведомлены.'"));
			
	ИначеЕсли СтруктураПараметров.ТипОтправкиПисьма = "ОтправитьПисьмоИнициаторуСВложением" Тогда
		ПараметрыУведомленияЗадач = Новый Структура;
		ПараметрыУведомленияЗадач.Вставить("ОтправитьИнициатору" , Истина);
		ПараметрыУведомленияЗадач.Вставить("ОтправитьИсполнителю", Ложь);
		ПараметрыУведомленияЗадач.Вставить("ОтправитьНаEvernote" , Ложь);
		ПараметрыУведомленияЗадач.Вставить("ДобавлятьВложение"   , Истина);

		РаботаСЗадачамиВызовСервера.ОтправитьСообщениеПоЗадачамПользователям(МассивЗадач, ПараметрыУведомленияЗадач);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Автор и согласователи уведомлены.'"));
			
	ИначеЕсли СтруктураПараметров.ТипОтправкиПисьма = "ОтправитьПисьмоИсполнителю" Тогда
		ПараметрыУведомленияЗадач = Новый Структура;
		ПараметрыУведомленияЗадач.Вставить("ОтправитьИнициатору" , Ложь);
		ПараметрыУведомленияЗадач.Вставить("ОтправитьИсполнителю", Истина);
		ПараметрыУведомленияЗадач.Вставить("ОтправитьНаEvernote" , Ложь);
		ПараметрыУведомленияЗадач.Вставить("ДобавлятьВложение"   , Истина);
		
		РаботаСЗадачамиВызовСервера.ОтправитьСообщениеПоЗадачамПользователям(МассивЗадач, ПараметрыУведомленияЗадач);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Исполнитель уведомлен.'"));
			
	ИначеЕсли СтруктураПараметров.ТипОтправкиПисьма = "ДобавитьВEvernote" Тогда
		ПараметрыУведомленияЗадач = Новый Структура;
		ПараметрыУведомленияЗадач.Вставить("ОтправитьИнициатору" , Ложь);
		ПараметрыУведомленияЗадач.Вставить("ОтправитьИсполнителю", Ложь);
		ПараметрыУведомленияЗадач.Вставить("ОтправитьНаEvernote" , Истина);
		ПараметрыУведомленияЗадач.Вставить("ДобавлятьВложение"   , Истина);

		РаботаСЗадачамиВызовСервера.ОтправитьСообщениеПоЗадачамПользователям(МассивЗадач, ПараметрыУведомленияЗадач);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Задача добавлена в Evernote.'"));
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОписаниеРезультатаВБуфер(Команда)
	
	РаботаСЗадачамиКлиент.СкопироватьТекстВБуферОбмена(Объект.Ответ);
	
	ТекстОповещения = НСтр("ru = 'Результат скопирован в буфер обмена'");
	
	ПоказатьОповещениеПользователя(ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРасширенноеОписаниеРезультатаВБуфер(Команда)
	
	РаботаСЗадачамиКлиент.СкопироватьРасширенноеОписаниеРезультатаЗадачиВБуфер(Объект);
	
	ТекстОповещения = НСтр("ru = 'Результат скопирован в буфер обмена'");
	
	ПоказатьОповещениеПользователя(ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьEmailEvernoteТекущегоПользователя()

	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Evernote", "EmailEvernote", "");

КонецФункции // ПолучитьEmailEvernoteТекущегоПользователя()

#КонецОбласти

#Область ОбработчикиОбсуждения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ ОБСУЖДЕНИЯ (#Обсуждения)

&НаСервере
Процедура ОбновитьОбсужденияСервер()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения") Тогда
		Элементы.ПраваЧасть.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Тема) 
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьТемуПоПредмету();
		Возврат;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Тема) Тогда
		ЗакрытаяТема = Тема.Закрытая;
	КонецЕсли;
	
	ЗаполнитьДеревоСообщений();
	
	ОбновитьТекущееСообщениеНаСервере();

КонецПроцедуры // ОбновитьОбсужденияСервер()

&НаКлиенте
Процедура ОбновитьОбсужденияКлиент()
	
	ПередОбновлениемОбсужденияНаКлиенте();
	ОбновитьОбсужденияСервер();
	ПослеОбновленияОбсужденияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОбновлениемОбсужденияНаКлиенте()
	
	СообщениеПриОбновлении = ПолучитьТекущееСообщение(Ложь);
	
	СписокРаскрытыхСообщений.Очистить();
	РаботаСОбсуждениямиКлиент.ПолучитьМассивРаскрытыхСообщений(
		Элементы.ДеревоСообщений,
		ДеревоСообщений.ПолучитьЭлементы(),
		СписокРаскрытыхСообщений);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияОбсужденияНаКлиенте()
	
	РаботаСОбсуждениямиКлиент.УстановитьРазвернутостьЭлементовДерева(
		Элементы.ДеревоСообщений,
		ДеревоСообщений,
		СписокРаскрытыхСообщений);
	РаботаСОбсуждениямиКлиент.УстановитьТекущееСообщениеВДеревеПоСсылке(
		Элементы.ДеревоСообщений,
		ДеревоСообщений,
		СообщениеПриОбновлении);
		
	УстановитьДоступностьКомандСообщений();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущееСообщениеНаСервере()
	
	Если ЗначениеЗаполнено(ТекущееСообщение) Тогда
		
		Если ЗначениеЗаполнено(ТекущееСообщение.ДатаИзменения) Тогда
			ДатаСообщения = ТекущееСообщение.ДатаИзменения;
		Иначе
			ДатаСообщения = ТекущееСообщение.ДатаСоздания;
		КонецЕсли;
		
		ТекущееСообщениеТекст = 
			РаботаСОбсуждениямиКлиентСервер.СформироватьТекстовоеПредставлениеСообщения(
				ТекущееСообщение.ТекстСообщения,
				ТекущееСообщение.Автор,
				ДатаСообщения);
		ТекущееСообщениеПрочтено = РаботаСПрочтениямиВызовСервера.ПолучитьСвойствоПрочтен(ТекущееСообщение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСообщений()
	
	Дерево = РеквизитФормыВЗначение("ДеревоСообщений");
	Дерево.Строки.Очистить();
	
	Если ЗначениеЗаполнено(Тема) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникСообщенияОбсуждений.ПометкаУдаления КАК ПометкаУдаления,
			|	СправочникСообщенияОбсуждений.Родитель КАК Родитель,
			|	СправочникСообщенияОбсуждений.Ссылка КАК Ссылка,
			|	СправочникСообщенияОбсуждений.Автор КАК Автор,
			|	ВЫБОР
			|		КОГДА СправочникСообщенияОбсуждений.ДатаСоздания > СправочникСообщенияОбсуждений.ДатаИзменения
			|			ТОГДА СправочникСообщенияОбсуждений.ДатаСоздания
			|		ИНАЧЕ СправочникСообщенияОбсуждений.ДатаИзменения
			|	КОНЕЦ КАК ДатаСообщения,
			|	СправочникСообщенияОбсуждений.ДобавленоГолосование КАК ДобавленоГолосование,
			|	ЛОЖЬ КАК Задачи,
			|	СправочникСообщенияОбсуждений.НомерСообщения КАК НомерСообщения,
			|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) КАК Прочтен,
			|	СправочникСообщенияОбсуждений.ТекстСообщения КАК ТекстСообщения,
			|	СправочникСообщенияОбсуждений.ТекстСообщенияСписок КАК ТекстСообщенияСписок,
			|	СправочникСообщенияОбсуждений.ВладелецСообщения КАК Тема,
			|	ВЫБОР
			|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Файлы,
			|	СправочникСообщенияОбсуждений.СокращенТекстСписка КАК СокращенТекстСписка,
			|	ТемыОбсуждений.Закрытая КАК Закрытая,
			|	СправочникСообщенияОбсуждений.ОтметкаСообщения КАК ЕстьОтметкаСообщения,
			|	ВЫБОР
			|		КОГДА СправочникСообщенияОбсуждений.ПометкаУдаления
			|			ТОГДА 6
			|		КОГДА СправочникСообщенияОбсуждений.ОтметкаСообщения
			|			ТОГДА 5
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КартинкаСтрокСостояния
			|ИЗ
			|	Справочник.СообщенияОбсуждений КАК СправочникСообщенияОбсуждений
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
			|		ПО СправочникСообщенияОбсуждений.Ссылка = СведенияОПрочтении.Объект
			|			И (СведенияОПрочтении.Пользователь = &Пользователь)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТемыОбсуждений КАК ТемыОбсуждений
			|		ПО СправочникСообщенияОбсуждений.ВладелецСообщения = ТемыОбсуждений.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеПрисоединенныхФайлов
			|		ПО СправочникСообщенияОбсуждений.Ссылка = НаличиеПрисоединенныхФайлов.ОбъектСФайлами
			|ГДЕ
			|	СправочникСообщенияОбсуждений.ВладелецСообщения = &Тема
			|	И ВЫБОР
			|			КОГДА &ТолькоНеотмеченные
			|				ТОГДА НЕ СправочникСообщенияОбсуждений.ОтметкаСообщения = &ТолькоНеотмеченные
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ";
		
		Если Не ОтображатьУдаленные Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И СправочникСообщенияОбсуждений.ПометкаУдаления = ЛОЖЬ";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	НомерСообщения ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("Тема", Тема);
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("ТолькоНеотмеченные", ТолькоНеотмеченные);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Родитель = Выборка.Родитель;
			Если Не ЗначениеЗаполнено(Родитель) Тогда 
				НоваяСтрока = Дерево.Строки.Добавить();
			Иначе	
				НайденнаяСтрока = Дерево.Строки.Найти(Родитель, "Ссылка", Истина);	
				Если НайденнаяСтрока <> Неопределено Тогда
					НоваяСтрока = НайденнаяСтрока.Строки.Добавить();	
				Иначе
					НоваяСтрока = Дерево.Строки.Добавить();	
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьСтрокуДереваИзСообщения(НоваяСтрока, Выборка);
			
		КонецЦикла;
		
	КонецЕсли; // ЗначениеЗаполнено(Тема) 
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоСообщений");
	
	Индекс = -1;
	РаботаСОбсуждениямиКлиентСервер.НайтиСообщениеВДеревеПоСсылке(
		ДеревоСообщений.ПолучитьЭлементы(), ТекущееСообщение, Индекс);
	Если Индекс > -1 Тогда
		Элементы.ДеревоСообщений.ТекущаяСтрока = Индекс;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДереваИзСообщения(ЭлементДерева, Сообщение)
	
	Если ТипЗнч(ЭлементДерева) = Тип("Число") Тогда 
		ЭлементДерева = ДеревоСообщений.НайтиПоИдентификатору(ЭлементДерева);
	КонецЕсли;	
	
	СписокРеквизитов = 
		"ПометкаУдаления,
		|Ссылка,
		|Автор,
		|ЕстьОтметкаСообщения,
		|КартинкаСтрокСостояния,
		|ДатаСообщения,
		|ДобавленоГолосование,
		|Задачи,
		|НомерСообщения,
		|Прочтен,
		|ТекстСообщения,
		|ТекстСообщенияСписок,
		|Тема,
		|Файлы,
		|СокращенТекстСписка";
	ЗаполнитьЗначенияСвойств(ЭлементДерева, Сообщение, СписокРеквизитов);
	
	ЭлементДерева.Ответить = Не Сообщение.Закрытая;
	ЭлементДерева.РодительскоеСообщение = Сообщение.Родитель;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСообщений

&НаКлиенте
Процедура НовоеСообщение(Команда)
	
	Если ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Тема) Тогда
		ПараметрыФормы = Новый Структура("Предмет", Объект.Ссылка);
		ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", ПараметрыФормы);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Тема", Тема);
	ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", 
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенные(Команда)
	
	Сообщения = ПолучитьВыбранныеСообщения(Истина);
	КоличествоСообщений = Сообщения.Количество();
	Если Сообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоПрочтенных = 0;
	ВыделенныеСтроки = Элементы.ДеревоСообщений.ВыделенныеСтроки;
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		Ссылка = Элементы.ДеревоСообщений.ДанныеСтроки(Строка).Ссылка;
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			
			Прочтен = Элементы.ДеревоСообщений.ДанныеСтроки(Строка).Прочтен;
			
			Если Прочтен Тогда
				
				ЧислоПрочтенных = ЧислоПрочтенных + 1;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
		
	ПоставитьПометкуПрочтения = Истина;
	
	Если КоличествоСообщений = ЧислоПрочтенных Тогда
		ПоставитьПометкуПрочтения = Ложь;
	Иначе
		ПоставитьПометкуПрочтения = Истина;
	КонецЕсли;	
	
	Если КоличествоСообщений > 1 Тогда
		Если ПоставитьПометкуПрочтения Тогда
			Состояние(НСтр("ru = 'Сообщения помечаются как прочтенные. Пожалуйста подождите...'"));
		Иначе
			Состояние(НСтр("ru = 'Снимается пометка прочтенности. Пожалуйста подождите...'"));
		КонецЕсли;	
	КонецЕсли;
	
	УстановитьПрочтение(Сообщения, ПоставитьПометкуПрочтения);
	
	Если КоличествоСообщений > 1 Тогда
		
		Если ПоставитьПометкуПрочтения Тогда
			ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сообщения помечены как прочтенные (%1)'"),
				КоличествоСообщений);
		Иначе
			ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сняты пометки прочтенности сообщений (%1)'"),
				КоличествоСообщений);
		КонецЕсли;
			
		Состояние(ТекстСостояния);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСообщение(Команда)
	
	Сообщения = ПолучитьВыбранныеСообщения(Истина);
	КоличествоСообщений = Сообщения.Количество();
	Если Сообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определение варианта отметки: выполнено или не выполнено. Не выполнено в случае если кол-во всех выделенных сообщений будет равно выполненным.
	ЧислоОтмеченных = 0;
		
	ВыделенныеСтроки = Элементы.ДеревоСообщений.ВыделенныеСтроки;
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		Ссылка = Элементы.ДеревоСообщений.ДанныеСтроки(Строка).Ссылка;
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			
			ЕстьОтметкаСообщения = Элементы.ДеревоСообщений.ДанныеСтроки(Строка).ЕстьОтметкаСообщения;
			
			Если ЕстьОтметкаСообщения Тогда
				
				ЧислоОтмеченных = ЧислоОтмеченных + 1;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоставитьПометкуПрочтения = Истина;
	
	Если КоличествоСообщений = ЧислоОтмеченных Тогда
		ПоставитьПометкуВыполнения = Ложь;
	Иначе
		ПоставитьПометкуВыполнения = Истина;
	КонецЕсли;	
	
	Если КоличествоСообщений > 1 Тогда
		Если ПоставитьПометкуВыполнения Тогда
			Состояние(НСтр("ru = 'Сообщения помечаются как выполненные. Пожалуйста подождите...'"));
		Иначе
			Состояние(НСтр("ru = 'Снимается пометка выполнения. Пожалуйста подождите...'"));
		КонецЕсли;	
	КонецЕсли;
	
	// отметка выделенных сообщений
	РаботаСОбсуждениямиВызовСервера.ОтметитьСообщение(Сообщения, ПоставитьПометкуВыполнения);
	
	Оповестить("ВыполненаОтметкаСообщений", Сообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоНеотмеченные(Команда)
	
	ТолькоНеотмеченные = Не ТолькоНеотмеченные;
	ПереключитьТолькоНеотмеченные();
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьТолькоНеотмеченные()
	
	Элементы.ДеревоСообщенийТолькоНеотмеченныеСообщения.Пометка = ТолькоНеотмеченные;
	ОбновитьОбсужденияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСообщенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоГиперссылкаОтветить" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОтветитьНаСообщение();
		
	ИначеЕсли Поле.Имя = "ДеревоКартинкаФайлы" Или Поле.Имя = "ДеревоГиперссылкаФайлы" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Сообщение = ПолучитьТекущееСообщение(Истина);
		Если Сообщение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Ключ, ДействиеПриОткрытии", Сообщение, "ОткрытьФайлы");
		ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", 
			ПараметрыФормы,
			ЭтаФорма);
		
	ИначеЕсли Поле.Имя = "ДеревоКартинкаГолосование" Или Поле.Имя = "ДеревоГиперссылкаГолосование" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Сообщение = ПолучитьТекущееСообщение(Истина);
		Если Сообщение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Ключ, ДействиеПриОткрытии", Сообщение, "ОткрытьГолосование");
		ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", 
			ПараметрыФормы,
			ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСообщенийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоСообщений.ТекущаяСтрока <> Неопределено Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжиданияПрочтения", 0.2, Истина);
	Иначе
		ОчиститьТекущееСообщение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСообщенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	ОтветитьНаСообщение();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСообщенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСообщенийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Сообщения = ПолучитьВыбранныеСообщения(Истина);
	Если Сообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Сообщения.Количество() = 1 Тогда
		
		ПометкаУдаления = Не Элементы.ДеревоСообщений.ТекущиеДанные.ПометкаУдаления;
		Если ПометкаУдаления Тогда 
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				Строка(Элементы.ДеревоСообщений.ТекущиеДанные.Ссылка));
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку удаления?'"),
				Строка(Элементы.ДеревоСообщений.ТекущиеДанные.Ссылка));
		КонецЕсли;
		
	Иначе
		
		ПометкаУдаления = Истина;
		Для Каждого СтрокаТаблицы Из Элемент.ВыделенныеСтроки Цикл
			СтрокаТаблицыСообщения = ДеревоСообщений.НайтиПоИдентификатору(СтрокаТаблицы);
			Если СтрокаТаблицыСообщения.ПометкаУдаления = Истина Тогда
				ПометкаУдаления = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'");
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Сообщения", Сообщения);
	ПараметрыОбработчика.Вставить("ПометкаУдаления", ПометкаУдаления);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоСообщенийПередУдалениемЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСообщенийПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СписокРаскрытыхСообщений.Очистить();
	РаботаСОбсуждениямиКлиент.ПолучитьМассивРаскрытыхСообщений(
		Элементы.ДеревоСообщений, ДеревоСообщений.ПолучитьЭлементы(), СписокРаскрытыхСообщений);
	ВременноеТекущееСообщение = ТекущееСообщение;
	ПометитьНаУдалениеСообщения(
		ДополнительныеПараметры.Сообщения, ДополнительныеПараметры.ПометкаУдаления);
	РаботаСОбсуждениямиКлиент.УстановитьРазвернутостьЭлементовДерева(
		Элементы.ДеревоСообщений, ДеревоСообщений, СписокРаскрытыхСообщений);
	РаботаСОбсуждениямиКлиент.УстановитьТекущееСообщениеВДеревеПоСсылке(
		Элементы.ДеревоСообщений, ДеревоСообщений, ВременноеТекущееСообщение);
	
КонецПроцедуры

&НаСервере
Функция ДеревоСообщенийПеретаскиваниеСервер(ПараметрыПеретаскиванияЗначение, Строка, Тема)
	
	КодПереноса = РаботаСОбсуждениями.ПереносСообщения(ПараметрыПеретаскиванияЗначение, Строка, Тема);
		
	ЗаполнитьДеревоСообщений();
	
	Возврат КодПереноса;
	
КонецФункции

&НаКлиенте
Процедура ДеревоСообщенийПеретаскивание(
		Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СписокРаскрытыхСообщений.Очистить();
	РаботаСОбсуждениямиКлиент.ПолучитьМассивРаскрытыхСообщений(
		Элементы.ДеревоСообщений, ДеревоСообщений.ПолучитьЭлементы(), СписокРаскрытыхСообщений);
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() <> 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		Если Строка <> Неопределено Тогда
			СтрокаПриемник = Строка;
			СтрокаДерева = ДеревоСообщений.НайтиПоИдентификатору(СтрокаПриемник);
			СсылкаНовыйРодитель = СтрокаДерева.Ссылка;
		Иначе
			СсылкаНовыйРодитель = "";
		КонецЕсли;
		
		КодПереноса = ДеревоСообщенийПеретаскиваниеСервер(
			ПараметрыПеретаскивания.Значение, СсылкаНовыйРодитель, Тема);
		Если КодПереноса = 1 Тогда
			Возврат;
		ИначеЕсли КодПереноса = 2 Тогда
			ТекстПредупреждения = НСтр("ru = 'Невозможно перетаскивать сообщения между темами.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		ИначеЕсли КодПереноса = 3 Тогда
			ТекстПредупреждения = НСтр("ru = 'Невозможно перетаскивать первое сообщение темы.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	РаботаСОбсуждениямиКлиент.УстановитьРазвернутостьЭлементовДерева(
		Элементы.ДеревоСообщений, ДеревоСообщений, СписокРаскрытыхСообщений);
	РаботаСОбсуждениямиКлиент.УстановитьТекущееСообщениеВДеревеПоСсылке(
		Элементы.ДеревоСообщений, ДеревоСообщений, ТекущееСообщение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСообщенийНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	МассивПеретаскиваемыхЗначений = Новый Массив;

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(ЭлементМассива) = Тип("Число") Тогда
				ПеретаскиваемоеЗначение = Элемент.ДанныеСтроки(ЭлементМассива);
				МассивПеретаскиваемыхЗначений.Добавить(ПеретаскиваемоеЗначение.Ссылка);
				ЗаполненМассивПеретаскиваемыхЗначений = Истина;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		ПеретаскиваемоеЗначение = Элемент.ДанныеСтроки(ЭлементМассива.Значение);
		МассивПеретаскиваемыхЗначений.Добавить(ПеретаскиваемоеЗначение.Ссылка);
		ЗаполненМассивПеретаскиваемыхЗначений = Истина;
		Возврат;
	Иначе
		ЗаполненМассивПеретаскиваемыхЗначений = Ложь;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ПеретаскиваемоеЗначение = ТекущиеДанные.Ссылка;
	
	Если ЗаполненМассивПеретаскиваемыхЗначений Тогда
		ПараметрыПеретаскивания.Значение = МассивПеретаскиваемыхЗначений;
		Возврат;
	КонецЕсли;
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСообщенийПроверкаПеретаскивания(
		Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если (Строка = Неопределено) Или (ПараметрыПеретаскивания.Значение = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбсуждения 

&НаСервере
Процедура ОбновитьТемуПоПредмету()
	
	ЗадатьТему(РаботаСОбсуждениями.НайтиТемуПоПредмету(Объект.Ссылка));

КонецПроцедуры

&НаСервере
Процедура ЗадатьТему(НоваяТема)
	
	Тема = НоваяТема;
	Если ЗначениеЗаполнено(Тема) Тогда
		ЗаполнитьДеревоСообщений();
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Тема);
		Элементы.ДеревоСообщенийСоздать.Заголовок = НСтр("ru = 'Ответить'");
	Иначе
		Элементы.ДеревоСообщенийСоздать.Заголовок = НСтр("ru = 'Создать новую тему'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьНаСообщение()
	
	Если Не ЗначениеЗаполнено(Тема) Тогда
		ПараметрыФормы = Новый Структура("Предмет", Объект.Ссылка);
		ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", ПараметрыФормы);
		Возврат;
	КонецЕсли;
	
	Сообщение = ПолучитьТекущееСообщение(Истина);
	Если Сообщение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Сообщение", Сообщение);
	ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", 
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущееСообщение(ВыводитьПредупреждение = Ложь)
	
	ТекущаяСтрока = ПолучитьТекущуюСтроку();
	Если ТекущаяСтрока = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ТекстПредупреждения = НСтр("ru = 'Не выбрано сообщение.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущиеДанныеСообщения = ПолучитьТекущиеДанные();
	Если ТекущиеДанныеСообщения = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ТекстПредупреждения = НСтр("ru = 'Не выбрано сообщение.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущиеДанныеСообщения <> Неопределено И Не ТекущиеДанныеСообщения.Свойство("Ссылка") Тогда
		Если ВыводитьПредупреждение Тогда
			ТекстПредупреждения = НСтр("ru = 'Не выбрано сообщение.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Сообщение = ТекущиеДанныеСообщения.Ссылка;
	Если Не ТипЗнч(Сообщение) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		Если ВыводитьПредупреждение Тогда
			ТекстПредупреждения = НСтр("ru = 'Не выбрано сообщение.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьТекущееСообщение()
	
	ТекущееСообщение = Неопределено;
	ТекущееСообщениеТекст = "";
	ВложенияСообщения.Очистить();
	
	УстановитьДоступностьКомандСообщений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияПрочтения()
	
	Сообщение = ПолучитьТекущееСообщение(Ложь);
	Если Сообщение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Сообщение = ТекущееСообщение Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееСообщение = ТекущееСообщение;
	ПредыдущееСообщениеПрочтено = ТекущееСообщениеПрочтено;
	ТекущееСообщение = Сообщение;
	
	Если Не ПредыдущееСообщениеПрочтено 
		И ИспользоватьАвтоматическоеПрочтение Тогда
		
		УстановитьПрочтение(ПредыдущееСообщение);
		
	КонецЕсли;
	
	ТекущиеДанныеСообщения = ПолучитьТекущиеДанные();
	Если ТекущиеДанныеСообщения <> Неопределено Тогда
		
		Если ТекущиеДанныеСообщения.Свойство("ТекстСообщения")
			И ТекущиеДанныеСообщения.Свойство("Автор")
			И ТекущиеДанныеСообщения.Свойство("ДатаСообщения") Тогда
			
			ТекущееСообщениеТекст = 
				РаботаСОбсуждениямиКлиентСервер.СформироватьТекстовоеПредставлениеСообщения(
					ТекущиеДанныеСообщения.ТекстСообщения,
					ТекущиеДанныеСообщения.Автор,
					ТекущиеДанныеСообщения.ДатаСообщения);
			
		Иначе
			ОчиститьТекущееСообщение();
		КонецЕсли;
		
		Если ТекущиеДанныеСообщения.Свойство("Прочтен") Тогда
			ТекущееСообщениеПрочтено = ТекущиеДанныеСообщения.Прочтен;
		Иначе
			ТекущееСообщениеПрочтено = Ложь;
		КонецЕсли;
		
	Иначе
		ОчиститьТекущееСообщение();
		ТекущееСообщениеПрочтено = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьКомандСообщений();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыбранныеСообщения(ВыводитьПредупреждение = Ложь)
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Элементы.ДеревоСообщений.ВыделенныеСтроки;

	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.ДеревоСообщений.ДанныеСтроки(Строка);
		Ссылка = ДанныеСтроки.Ссылка;
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			Результат.Добавить(Ссылка);
		КонецЕсли;
		
	КонецЦикла;
		
	Сообщение = ПолучитьТекущееСообщение(Ложь);
	
	Если ЗначениеЗаполнено(Сообщение)
		И Результат.Найти(Сообщение) = Неопределено Тогда
		Результат.Добавить(Сообщение);
	КонецЕсли;
	
	Если Результат.Количество() = 0 И ВыводитьПредупреждение Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрано сообщение.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущуюСтроку()
	
	Возврат Элементы.ДеревоСообщений.ТекущаяСтрока;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущиеДанные()
	
	Возврат Элементы.ДеревоСообщений.ТекущиеДанные;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандСообщений()
	
	Элементы.ДеревоСообщенийСоздать.Доступность = Не ЗакрытаяТема;
	Элементы.ДеревоСообщенийКонтекстноеМенюДобавить.Доступность = Не ЗакрытаяТема;
	Элементы.ДеревоСообщенийКонтекстноеМенюУдалить.Доступность = Не ЗакрытаяТема;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеСообщения(Сообщения, ПометкаУдаления)
	
	Для Каждого СообщениеСсылка Из Сообщения Цикл
		
		Если СообщениеСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		
		СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
		СообщениеОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЦикла;
	
	ЗаполнитьДеревоСообщений();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПрочтение(Сообщение, Прочтен = Истина)
	
	ПрочтениеУстановлено = УстановитьПрочтениеСервер(Сообщение, Прочтен);
	РаботаСПрочтениямиКлиент.ОповеститьОПрочтении(Сообщение, ПрочтениеУстановлено);
	
КонецПроцедуры

&НаСервере 
Функция УстановитьПрочтениеСервер(Сообщение, Прочтен = Истина)
	
	ПрочтениеУстановлено = РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Сообщение, Прочтен);
	
	// Не устанавливать прочтенность сообщения автоматически в случае ручной установки прочтения.
	ТекущееСообщениеПрочтено = Истина;
	
	Возврат ПрочтениеУстановлено; 

КонецФункции

&НаКлиенте
Процедура УстановитьТекущуюСтрокуСообщения(ЗначениеТекущейСтроки)
	
	РаботаСОбсуждениямиКлиент.УстановитьТекущееСообщениеВДеревеПоСсылке(
		Элементы.ДеревоСообщений, ДеревоСообщений, ЗначениеТекущейСтроки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиПланирования


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ "ПЛАНИРОВАНИЕ"

&НаКлиенте
Процедура СтатусОбработкиПриИзменении(Элемент)
	
	СтатусОбработкиПриИзмененииНаСервере(Объект.Ссылка, СостояниеЗадачи, СрокСостояния, ПричинаСостояния, СтатусОбработки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтатусОбработкиПриИзмененииНаСервере(Задача, СостояниеЗадачи, СрокСостояния, ПричинаСостояния, СтатусОбработки)
	
	РегистрыСведений.ТекущиеСостоянияЗадач.ОбновитьТекущееСостояниеЗадачи(Задача, СостояниеЗадачи, СрокСостояния, ПричинаСостояния, , СтатусОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачуВоВнешнейСистеме(Команда)
	
	Если ЗначениеЗаполнено(Объект.ВнешняяСсылка) Тогда
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Объект.ВнешняяСсылка);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НачальнаяНастройкаПриЧтенииИСоздании(ТекущийОбъект)
	
	// Подготовка дерева пользователей.
	ДеревоПользователей = ПользователиГруппы.ПолучитьЭлементы();
	ДеревоПользователей.Очистить();
	Для каждого СтрокаТЧ Из ТекущийОбъект.РабочаяГруппа Цикл
		НовСтрока = ДеревоПользователей.Добавить();
		НовСтрока.Пользователь = СтрокаТЧ.Пользователь;
	КонецЦикла;
	ОбновитьПользователейГрупп();
	
КонецПроцедуры

// Процедура осуществляет настройку ограничения видимости полей
&НаКлиенте
Процедура НастройкаОграниченияВидимостиПользовательскихПолей() 
	
	РаботаСЗадачамиКлиент.ПрименениеНастроекОграниченияВидимостиПользовательскихПолейДляФормыЗадачи(ЭтаФорма, НастройкиДоступностиЭлементов);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КолВоФайловОбсуждений(ЗадачаСсылка)

	// количество данных
	СтруктураДанныхЗадачи = РаботаСЗадачами.ДанныеЗадачи(ЗадачаСсылка);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоФайловЗаголовок",     СтрШаблон(НСтр("ru = 'Всего файлов: %1'"), СтруктураДанныхЗадачи.КоличествоФайлов)); 
	СтруктураРезультата.Вставить("КоличествоОбсужденийЗаголовок", СтрШаблон(НСтр("ru = 'Вопросы/Обсуждение: %1'"), СтруктураДанныхЗадачи.КоличествоОбсуждений)); 
	СтруктураРезультата.Вставить("ОбсуждениеВключено", ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения"));
	
	Возврат СтруктураРезультата;
	
КонецФункции // КолВоФайловОбсуждений()

&НаКлиенте
Процедура ПоказатьВыборТипаПользователиИлиВнешниеПользователи(ОбработкаПродолжения)
	
	ВыборИПодборВнешнихПользователей = Ложь;
	
	Если Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПользователей <> Неопределено Тогда
		Если ТипЗнч(Объект.ТипПользователей) <> Тип("СправочникСсылка.Пользователи") Тогда
			ВыборИПодборВнешнихПользователей = Истина;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьВнешнихПользователей Тогда
		
		СписокТиповПользователей.ПоказатьВыборЭлемента(
			Новый ОписаниеОповещения(
				"ПоказатьВыборТипаПользователиИлиВнешниеПользователиЗавершение",
				ЭтотОбъект,
				ОбработкаПродолжения),
			НСтр("ru = 'Выбор типа данных'"),
			СписокТиповПользователей[0]);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборТипаПользователиИлиВнешниеПользователиЗавершение(ВыбранныйЭлемент, ОбработкаПродолжения) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВыборИПодборВнешнихПользователей =
			ВыбранныйЭлемент.Значение = Тип("СправочникСсылка.ВнешниеПользователи");
		
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователей(Подобрать)
	
	ТекущийПользователь = ?(Элементы.Пользователи.ТекущиеДанные = Неопределено,
		Неопределено, Элементы.Пользователи.ТекущиеДанные.Пользователь);
	
	Если НЕ Подобрать
	   И ЗначениеЗаполнено(ТекущийПользователь)
	   И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи")
	      Или ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыПользователей") ) Тогда
	
		ВыборИПодборВнешнихПользователей = Ложь;
	
	ИначеЕсли НЕ Подобрать
	        И ИспользоватьВнешнихПользователей
	        И ЗначениеЗаполнено(ТекущийПользователь)
	        И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи")
	           Или ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") ) Тогда
	
		ВыборИПодборВнешнихПользователей = Истина;
	Иначе
		ПоказатьВыборТипаПользователиИлиВнешниеПользователи(
			Новый ОписаниеОповещения("ВыбратьПодобратьПользователейЗавершение", ЭтотОбъект, Подобрать));
		Возврат;
	КонецЕсли;
	
	ВыбратьПодобратьПользователейЗавершение(ВыборИПодборВнешнихПользователей, Подобрать);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователейЗавершение(ВыборИПодборВнешнихПользователей, Подобрать) Экспорт
	
	Если ВыборИПодборВнешнихПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
		Элементы.Пользователи.ТекущиеДанные = Неопределено,
		Неопределено,
		Элементы.Пользователи.ТекущиеДанные.Пользователь));
	
	Если Объект.Ссылка <> ГруппаДоступаАдминистраторы Тогда
		Если ВыборИПодборВнешнихПользователей Тогда
			ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		Иначе
			ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		ПараметрыФормы.Вставить("РасширенныйПодбор", Истина);
		ПараметрыФормы.Вставить("ПараметрыРасширеннойФормыПодбора", ВыбранныеУчастникиГруппыДоступа());
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
	
		Если Объект.ТипПользователей <> Неопределено Тогда
			ПараметрыФормы.Вставить("ТипОбъектовАвторизации", Объект.ТипПользователей);
		КонецЕсли;
		Если СправочникВнешниеПользователиДоступен Тогда
			ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для выбора внешних пользователей.'"));
		КонецЕсли;
	Иначе
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыбранныеУчастникиГруппыДоступа()
	
	ЭлементыКоллекции = ПользователиГруппы.ПолучитьЭлементы();
	
	ВыбранныеПользователи = Новый ТаблицаЗначений;
	ВыбранныеПользователи.Колонки.Добавить("Пользователь");
	ВыбранныеПользователи.Колонки.Добавить("НомерКартинки");
	
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		
		СтрокаВыбранныеПользователи = ВыбранныеПользователи.Добавить();
		СтрокаВыбранныеПользователи.Пользователь = Элемент.Пользователь;
		СтрокаВыбранныеПользователи.НомерКартинки = Элемент.НомерКартинки;
		
	КонецЦикла;
	
	ЗаголовокФормыПодбора = НСтр("ru = 'Подбор участников группы доступа'");
	ПараметрыРасширеннойФормыПодбора = Новый Структура("ЗаголовокФормыПодбора, ВыбранныеПользователи",
	                                                   ЗаголовокФормыПодбора, ВыбранныеПользователи);
	АдресХранилища = ПоместитьВоВременноеХранилище(ПараметрыРасширеннойФормыПодбора);
	Возврат АдресХранилища;
	
КонецФункции

&НаСервере
Процедура ОбновитьПользователейГрупп(ИдентификаторСтроки = Неопределено,
                                     ИзмененныеСтроки = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	ИзмененныеСтроки = Новый Массив;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		ЭлементыКоллекции = ПользователиГруппы.ПолучитьЭлементы();
		
	ИначеЕсли ТипЗнч(ИдентификаторСтроки) = Тип("Массив") Тогда
		ЭлементыКоллекции = Новый Массив;
		Для каждого Идентификатор Из ИдентификаторСтроки Цикл
			ЭлементыКоллекции.Добавить(ПользователиГруппы.НайтиПоИдентификатору(Идентификатор));
		КонецЦикла;
	Иначе
		ЭлементыКоллекции = Новый Массив;
		ЭлементыКоллекции.Добавить(ПользователиГруппы.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;
	
	УчастникиГруппыПользователей = Новый Массив;
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		
		Если ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей")
		 Или ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
			УчастникиГруппыПользователей.Добавить(Элемент.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчастникиГруппыПользователей", УчастникиГруппыПользователей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.ГруппаПользователей В(&УчастникиГруппыПользователей)";
	
	ПользователиГрупп = Запрос.Выполнить().Выгрузить();
	ПользователиГрупп.Индексы.Добавить("ГруппаПользователей");
	
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		Элемент.Ссылка = Элемент.Пользователь;
		
		Если ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей")
		 Или ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
			// Заполнение пользователей группы.
			СтарыеПользователи = Элемент.ПолучитьЭлементы();
			Отбор = Новый Структура("ГруппаПользователей", Элемент.Пользователь);
			НовыеПользователи = ПользователиГрупп.НайтиСтроки(Отбор);
			
			ЕстьИзменения = Ложь;
			
			Если СтарыеПользователи.Количество() <> НовыеПользователи.Количество() Тогда
				СтарыеПользователи.Очистить();
				Для каждого Строка Из НовыеПользователи Цикл
					НовыйЭлемент = СтарыеПользователи.Добавить();
					НовыйЭлемент.Ссылка       = Строка.Пользователь;
					НовыйЭлемент.Пользователь = Строка.Пользователь;
				КонецЦикла;
				ЕстьИзменения = Истина;
			Иначе
				Индекс = 0;
				Для каждого Строка Из СтарыеПользователи Цикл
					
					Если Строка.Ссылка       <> НовыеПользователи[Индекс].Пользователь
					 Или Строка.Пользователь <> НовыеПользователи[Индекс].Пользователь Тогда
						
						Строка.Ссылка       = НовыеПользователи[Индекс].Пользователь;
						Строка.Пользователь = НовыеПользователи[Индекс].Пользователь;
						ЕстьИзменения = Истина;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			
			Если ЕстьИзменения Тогда
				ИзмененныеСтроки.Добавить(Элемент.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Пользователи.ЗаполнитьНомераКартинокПользователей(
		ПользователиГруппы, "Ссылка", "НомерКартинки", ИдентификаторСтроки, Истина);
	
	// Установка отображения дерева.
	ЕстьДерево = Ложь;
	Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
			ЕстьДерево = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.Пользователи.Отображение = ?(ЕстьДерево, ОтображениеТаблицы.Дерево, ОтображениеТаблицы.Список);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораПользователя(Знач Текст,
                                             Знач ВключаяГруппы = Истина,
                                             Знач ВключаяВнешнихПользователей = Неопределено,
                                             Знач БезПользователей = Ложь)
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(
		Текст,
		ВключаяГруппы,
		ВключаяВнешнихПользователей,
		БезПользователей);
	
	
КонецФункции

&НаКлиенте
Процедура УстановитьКоличествоВЗаголовки()
	
	ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Рабочая группа (%1)'"), ПользователиГруппы.ПолучитьЭлементы().Количество());
	
	Элементы.ГруппаСогласование.Заголовок =  ТекстЗаголовка;

КонецПроцедуры

// Возвращает структуру описания изменений релиза
//
// Параметры:
//  Основание  - ЗадачаСсылка.ЗадачиПользователя
//
// Возвращаемое значение:
//   Структура   - содержит свойства:
//		* ЕстьОписаниеИзменений - булево - Истина, если описание изменений найдено
//		* Конфигурация
//		* ВерсияКонфигурации
//		* РазделОбновления
//		* ПорядковыйНомер
//		* ДатаДобавления
//		* ОписаниеИзменения
//		* ТипИзменения
//		* Основание
//
&НаСервереБезКонтекста
Функция СтруктураОписанияИзмененийКонфигурации(Основание) 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ЕстьОписаниеИзменений", Ложь);
	
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат СтруктураДанных;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОписаниеИзмененийКонфигурации.Конфигурация КАК Конфигурация,
	               |	ОписаниеИзмененийКонфигурации.ВерсияКонфигурации КАК ВерсияКонфигурации,
	               |	ОписаниеИзмененийКонфигурации.РазделОбновления КАК РазделОбновления,
	               |	ОписаниеИзмененийКонфигурации.ПорядковыйНомер КАК ПорядковыйНомер,
	               |	ОписаниеИзмененийКонфигурации.ДатаДобавления КАК ДатаДобавления,
	               |	ОписаниеИзмененийКонфигурации.ОписаниеИзменения КАК ОписаниеИзменения,
	               |	ОписаниеИзмененийКонфигурации.ТипИзменения КАК ТипИзменения,
	               |	ОписаниеИзмененийКонфигурации.Основание КАК Основание
	               |ИЗ
	               |	РегистрСведений.ОписаниеИзмененийКонфигурации КАК ОписаниеИзмененийКонфигурации
	               |ГДЕ
	               |	ОписаниеИзмененийКонфигурации.Основание = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтруктураДанных.ЕстьОписаниеИзменений = Истина;
		
		СтруктураДанных.Вставить("Конфигурация", 	   Выборка.Конфигурация);
		СтруктураДанных.Вставить("ВерсияКонфигурации", Выборка.ВерсияКонфигурации);
		СтруктураДанных.Вставить("РазделОбновления",   Выборка.РазделОбновления);
		СтруктураДанных.Вставить("ПорядковыйНомер",    Выборка.ПорядковыйНомер);
		СтруктураДанных.Вставить("ДатаДобавления", 	   Выборка.ДатаДобавления);
		СтруктураДанных.Вставить("ОписаниеИзменения",  Выборка.ОписаниеИзменения);
		СтруктураДанных.Вставить("ТипИзменения", 	   Выборка.ТипИзменения);
		СтруктураДанных.Вставить("Основание", 		   Выборка.Основание);
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Функция возвращает конфигурацию из данных проекта (Объект.Проект)
//
// Возвращаемое значение:
//   СправочникСсылка.Конфигурации  - конфигурация используемая в проекте
//
&НаСервереБезКонтекста
Функция КонфигурацияИзДанныхПроекта(Проект) 
	
	Если Не ЗначениеЗаполнено(Проект) Тогда
		Возврат Справочники.Конфигурации.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	КонфигурацииИспользуемыеПроекты.Ссылка КАК Ссылка,
	               |	КонфигурацииИспользуемыеПроекты.Проект КАК Проект
	               |ИЗ
	               |	Справочник.Конфигурации.ИспользуемыеПроекты КАК КонфигурацииИспользуемыеПроекты
	               |ГДЕ
	               |	КонфигурацииИспользуемыеПроекты.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;
	
	КонецЕсли;
	
	Возврат Справочники.Конфигурации.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючЗаписиОписанияИзмененийКонфигурации(СтруктураКлюча)

	Возврат РегистрыСведений.ОписаниеИзмененийКонфигурации.СоздатьКлючЗаписи(СтруктураКлюча);

КонецФункции // КлючЗаписиОписанияИзмененийКонфигурации()

&НаСервереБезКонтекста
Функция ОтобразитьНаличиеОписанияИзмененийКонфигурации(ТекущаяЗадачаСсылка) 
	
	ВыборкаДанных = СтруктураОписанияИзмененийКонфигурации(ТекущаяЗадачаСсылка);
	
	Если Не ВыборкаДанных.ЕстьОписаниеИзменений Тогда
		ИзменениеКонфигурации = НСтр("ru = '---Ввести описание изменения конфигурации---'");
	Иначе
		ИзменениеКонфигурации = СтрШаблон(НСтр("ru = 'Изменение от %1 к версии %2'"), 
			Формат(ВыборкаДанных.ДатаДобавления, "ДФ=dd.MM.yyyy"), ВыборкаДанных.ВерсияКонфигурации); 
	КонецЕсли;
	
	Возврат ИзменениеКонфигурации;
	
КонецФункции

&НаСервереБезКонтекста
Функция МаксимальнаяВерсияКонфигурацииСервер(Конфигурация) 
		
	Возврат РегистрыСведений.ОписаниеИзмененийКонфигурации.ПолучитьМаксимальнуюВерсиюКонфигурации(Конфигурация);
	
КонецФункции

&НаКлиенте
Процедура ВставитьРазделительВТекст(ИмяЭлементаФормы, 
		РеквизитФормы, 
		ПользовательАвторРазделителя, 
		ТекстКомментария = "", 
		ДатаКомментария = Неопределено) Экспорт
	
	ТекстОбщий = Объект[РеквизитФормы];
	ЭлементФормы = Элементы[ИмяЭлементаФормы];
	
	ДлинаТекста = СтрДлина(ТекстОбщий) + 1;
	Если ТекстОбщий <> "" Тогда
		ЭлементФормы.УстановитьГраницыВыделения(ДлинаТекста, 1, ДлинаТекста, 1);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаКомментария) Тогда
		ДатаКомментария = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Фиксированная));
	ТекстРазделителя = СтрШаблон(НСтр("ru = '// Дополнение от %1, %2'"), ПользовательАвторРазделителя, ДатаКомментария);
	ТекстРазделителя = ТипСтрока.ПривестиЗначение(ТекстРазделителя) + "//";
	ТекстРазделителя = ?(ТекстОбщий <> "", Символы.ПС, "") + ТекстРазделителя;
	ТекстРазделителя = ТекстРазделителя + Символы.ПС;
	
	Если ЗначениеЗаполнено(ТекстКомментария) Тогда
		ТекстРазделителя = ТекстРазделителя + ТекстКомментария;	
	КонецЕсли;
	
	ДлинаТекста = СтрДлина(ТекстОбщий + ТекстРазделителя) + 1;
	ЭлементФормы.ВыделенныйТекст = ТекстРазделителя;
	ЭлементФормы.УстановитьГраницыВыделения(ДлинаТекста, 1, ДлинаТекста, 1);
	
	ЭтаФорма.ТекущийЭлемент = ЭлементФормы;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименованиеЗадачиИзТекста(ТекстДанных)

	Если Объект.Наименование <> "" 
		Или СокрЛП(ТекстДанных) = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстДляОбработки = ТекстДанных;
	
	Объект.Наименование = СтрПолучитьСтроку(ТекстДляОбработки, 1);
	
КонецПроцедуры // ЗаполнитьНаименованиеЗадачи()

&НаКлиенте
Процедура ОбновитьДоступностьКомандВыполнения()

	Если Объект.Выполнена Тогда
		
		Если Объект.ОтмененаЗадача Тогда
			Элементы.РезультатВыполнения.Картинка = БиблиотекаКартинок.Отмена;	
		Иначе
			Элементы.РезультатВыполнения.Картинка = БиблиотекаКартинок.Успешно32;	
		КонецЕсли;
		
		Элементы.ГруппаДанныеОВыполнении.Видимость = Истина;
		Элементы.ФормаВыполнитьЗадачу.Доступность = Ложь;
		Элементы.ФормаВыполнитьЗадачуСУведомлением.Доступность = Ложь;
		Элементы.ФормаСнятьВыполнениеЗадачи.Доступность = Истина;
		Элементы.ФормаСнятьВыполнениеЗадачи1.Видимость = Истина;
		Элементы.ФормаИзменитьДатуВыполненияЗадачи.Доступность = Истина;
		
		// #СостояниеЗадачи
		Элементы.СостояниеЗадачи.ТолькоПросмотр = Истина;
		Элементы.ПроцентЗавершения.ТолькоПросмотр = Истина;
		
	Иначе
		
		Элементы.СостояниеЗадачи.ТолькоПросмотр = Ложь;
		Элементы.ПроцентЗавершения.ТолькоПросмотр = Ложь;
		
		Элементы.ГруппаДанныеОВыполнении.Видимость = Ложь;
		Элементы.ФормаВыполнитьЗадачу.Доступность = Истина;
		Элементы.ФормаВыполнитьЗадачуСУведомлением.Доступность = Истина;
		Элементы.ФормаСнятьВыполнениеЗадачи.Доступность = Ложь;
		Элементы.ФормаСнятьВыполнениеЗадачи1.Видимость = Ложь;
		Элементы.ФормаИзменитьДатуВыполненияЗадачи.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьКомандВыполнения()

// Возвращает структуру настроек: Проект, Исполнитель
// 
// Возвращаемое значение:
//  Структура: 
//		* Проект
//		* Исполнитель 
//		* ВключитьАвтоматическуюПроверкуОрфографии - Булево 
//
&НаСервереБезКонтекста
Функция ДанныеИзХранилищаОбщихНастроек() 
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	СтруктураРезультата.Вставить("Исполнитель", Справочники.Пользователи.ПустаяСсылка());
	СтруктураРезультата.Вставить("ВключитьАвтоматическуюПроверкуОрфографии", Ложь);
	
	ПроектПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", 
		"ПроектПоУмолчанию",
		Справочники.Проекты.ПустаяСсылка());
	
	Если Не ПроектПоУмолчанию.Пустая() Тогда
		СтруктураРезультата.Проект = ПроектПоУмолчанию;
	КонецЕсли;
	
	ИсполнительПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", 
		"ИсполнительПоУмолчанию",
		Справочники.Пользователи.ПустаяСсылка());
	
	Если Не ИсполнительПоУмолчанию.Пустая() Тогда
		СтруктураРезультата.Исполнитель = ИсполнительПоУмолчанию;
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущийИсполнительПоУмолчанию(Проект)

	ИсполнительПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", 
		"ИсполнительПоУмолчанию",
		Справочники.Пользователи.ПустаяСсылка());
	
	Если Не ИсполнительПоУмолчанию.Пустая() Тогда
		ИсполнительТекущий = ИсполнительПоУмолчанию;
	Иначе
		ИсполнительТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ОтветственныйЗаПроект");
	КонецЕсли;
		
	Возврат ИсполнительТекущий;
	
КонецФункции // ТекущийИсполнительПоУмолчанию()

&НаСервереБезКонтекста
Функция РеквизитыРолиИсполнителя(ПроверяемыйОбъект)
	
	РеквизитыРолиИсполнителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроверяемыйОбъект, 
		"ИспользуетсяСОбъектамиАдресации,ТипыОсновногоОбъектаАдресации,ТипыДополнительногоОбъектаАдресации");
	
	Возврат РеквизитыРолиИсполнителя;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьНастройкиДоступности(Команда)
	
	СтрокаНастроекДляПоказа = СтрокаНастройкиДоступностиСервер();
	
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ПоказатьНастройкиДоступностиЗавершение", ЭтотОбъект), 
		СтрокаНастроекДляПоказа, НСтр("ru = 'Настройки доступности'"),, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкиДоступностиЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Строка = "";	
	
КонецПроцедуры

&НаСервере
Функция СтрокаНастройкиДоступностиСервер()

	Возврат Справочники.НастройкиДоступностиПоСостояниюЗадачи.СтрокаНастройкиДоступностиФормыЗадачи(ЭтаФорма);

КонецФункции

&НаКлиенте
Процедура ПоказатьСкрытьОбщение(Команда)
	
	СкрытьДеревоОбщения = Не СкрытьДеревоОбщения;
	
	УправлятьВидимостьюДереваОбщения();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлятьВидимостьюДереваОбщения()

	Элементы.СтраницаДерево.Видимость = Не СкрытьДеревоОбщения; 
	Элементы.ФормаПоказатьСкрытьОбщение.Пометка = Не СкрытьДеревоОбщения;
	Элементы.ФормаПоказатьСкрытьОбщение.Заголовок = ?(СкрытьДеревоОбщения, НСтр("ru = 'Показать общение'"), НСтр("ru = 'Скрыть общение'"));

КонецПроцедуры // УправлятьВидимостьюДереваОбщения()

&НаСервере
Процедура УстановитьТипЗадачиНаСервере(ВидЗадачи)

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеЗадач") Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗадачиПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЗадачи, "ТипЗадачи");
	
	Если Не ЗначениеЗаполнено(ТипЗадачиПоУмолчанию) Тогда
		Возврат;	
	КонецЕсли;
	
	Объект.ТипЗадачи = ТипЗадачиПоУмолчанию;

КонецПроцедуры // УстановитьТипЗадачиНаСервере()


//////////////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ОРФОГРАФИИ ЗАДАЧИ  #Spelling

&НаКлиенте
Процедура ПроверитьОрфографиюОписания(Команда)
	
	#Если Не ВебКлиент Тогда
		
		НаборыТекстовДляПроверки = Новый Соответствие;
		НаборыТекстовДляПроверки.Вставить("Описание", Объект.Описание);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверитьОрфографиюТекст", ЭтотОбъект, "Описание");
		ПроверкаОрфографииКлиент.ПроверитьОрфографиюТекст(ОписаниеОповещения, НаборыТекстовДляПроверки);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфографиюРезультата(Команда)
	
	#Если Не ВебКлиент Тогда
		
		НаборыТекстовДляПроверки = Новый Соответствие;
		НаборыТекстовДляПроверки.Вставить("Ответ", Объект.Ответ);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверитьОрфографиюТекст", ЭтотОбъект, "Ответ");
		ПроверкаОрфографииКлиент.ПроверитьОрфографиюТекст(ОписаниеОповещения, НаборыТекстовДляПроверки);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПроверитьОрфографиюТекст(Результат, Параметры) Экспорт
	
	Если Результат.ТекстИзменен Тогда
		
		Объект[Параметры] = Результат.ТекстПисьма;
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

// Проверить орфографию и записать задачу
// 
&НаКлиенте
Процедура ПроверитьОрфографиюИЗаписать(ПараметрыОповещенияЗаписиЗадачи)
	
	// выполнить автоматическую проверку орфографии
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверитьОрфографиюТекстПередЗаписью", ЭтотОбъект, ПараметрыОповещенияЗаписиЗадачи);
	
	#Если Не ВебКлиент Тогда
		
	НаборыТекстовДляПроверки = Новый Соответствие;
	Если ЕстьИзмененияОписания Тогда
		НаборыТекстовДляПроверки.Вставить("Описание", Объект.Описание);
	КонецЕсли;
	Если ЕстьИзмененияРезультата Тогда
		НаборыТекстовДляПроверки.Вставить("Ответ", Объект.Ответ);
	КонецЕсли;
		
	ПроверкаОрфографииКлиент.ПроверитьОрфографиюТекст(ОписаниеОповещения, НаборыТекстовДляПроверки, Ложь);
	
	#Иначе
		
	СтруктураВозврата = Новый Структура("ЕстьИзмененияПоТекстуПослеПроверкиОрфографии", Ложь);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, СтруктураВозврата);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПроверитьОрфографиюТекстПередЗаписью(Результат, Параметры) Экспорт
	
	Если Результат.ТекстИзменен Тогда
		
		Объект[Результат.Реквизит] = Результат.ТекстПисьма;
		Модифицированность = Истина;
		
		СтруктураВозврата = Новый Структура("ЕстьИзмененияПоТекстуПослеПроверкиОрфографии", Истина);
		
	Иначе
		
		СтруктураВозврата = Новый Структура("ЕстьИзмененияПоТекстуПослеПроверкиОрфографии", Ложь);
		
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьЗадачуЗавершение", ЭтотОбъект, Параметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, СтруктураВозврата);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры 

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти






























