

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОтборМесяцПланирования = НачалоМесяца(ТекущаяДатаСеанса());
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекущийДень", НачалоДня(ТекущаяДатаСеанса()));
	ОбновитьНастройкиСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьНастройкиСписка(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПроектПриИзменении(Элемент)
	
	ОбновитьНастройкиСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнительПриИзменении(Элемент)
	
	ОбновитьНастройкиСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВыполненныеПриИзменении(Элемент)
	
	ОбновитьНастройкиСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМесяцПланированияПриИзменении(Элемент)
	
	ОтборМесяцПланирования = НачалоМесяца(ОтборМесяцПланирования);
	ОбновитьНастройкиСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМесяцПланированияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтборМесяцПланирования = ДобавитьМесяц(ОтборМесяцПланирования, Направление);
	ОбновитьНастройкиСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоЗапланированныеЗадачиПриИзменении(Элемент)
	
	ОбновитьНастройкиСписка(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;	
	
	Если ТекущаяСтрока = ТекущаяЗадача Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяЗадача = ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ВнешнийНомер Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьЗадачуВоВнешнейСистемеНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

// - НачатьРаботуСЗадачей

&НаКлиенте
Процедура НачатьРаботуСЗадачей(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗадачаВРаботе = ЗадачаВРаботе(ТекущийПользователь);
	
	Если ЗадачаВРаботе = ТекущаяЗадача Тогда
		
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(ЗадачаВРаботе) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьРаботуСЗадачейПослеПроверкиЗапущеннойЗадачи", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Сейчас в работе находится другая задача? Приостановить ее?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		НачатьРаботуСЗадачейВыбратьТипРабот();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботуСЗадачейПослеПроверкиЗапущеннойЗадачи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		НачатьРаботуСЗадачейВыбратьТипРабот();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботуСЗадачейВыбратьТипРабот()
	
	РаботыПоЗадаче = РаботыПоЗадаче(ТекущаяЗадача, ТекущийПользователь);
	
	Если РаботыПоЗадаче.Количество() = 0 Тогда
		
		ТипРаботы = ПредопределенноеЗначение("Перечисление.ТипыРаботПоЗадачам.ПустаяСсылка");
		
	ИначеЕсли РаботыПоЗадаче.Количество() = 1 Тогда
		
		ТипРаботы = РаботыПоЗадаче[0];
		
	Иначе
		
		ТипРаботы = Неопределено;
		
	КонецЕсли;
	
	Если ТипРаботы = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьРаботуСЗадачейВыбратьТипРаботПродолжение", ЭтотОбъект);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(РаботыПоЗадаче);
		
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Элементы.ОсновнаяКоманднаяПанель);
		
	Иначе
		
		НачатьРаботуСЗадачейНаКлиенте(ТипРаботы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаботыПоЗадаче(Задача, Исполнитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботыПоЗадачам.ТипРаботы КАК ТипРаботы,
	|	РаботыПоЗадачам.ТипРаботы.Порядок КАК ТипРаботыПорядок
	|ИЗ
	|	РегистрСведений.РаботыПоЗадачам КАК РаботыПоЗадачам
	|ГДЕ
	|	РаботыПоЗадачам.Задача = &Задача
	|	И РаботыПоЗадачам.Исполнитель = &Исполнитель
	|	И НЕ РаботыПоЗадачам.Выполнена
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипРаботыПорядок";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РаботыПоЗадаче = Выгрузка.ВыгрузитьКолонку("ТипРаботы");
	
	Возврат РаботыПоЗадаче;
	
КонецФункции

&НаКлиенте
Процедура НачатьРаботуСЗадачейВыбратьТипРаботПродолжение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		НачатьРаботуСЗадачейНаКлиенте(ВыбранныйЭлемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботуСЗадачейНаКлиенте(ТипРаботы)
	
	НачатьРаботуСЗадачейНаСервере(ТипРаботы);
	ОповеститьОбИзменении(ТекущаяЗадача);
	
КонецПроцедуры

&НаСервере
Процедура НачатьРаботуСЗадачейНаСервере(ТипРаботы)
	
	РегистрыСведений.ЗадачиВРаботе.НачатьРаботуСЗадачей(ТекущийПользователь, ТекущаяЗадача, ТипРаботы);
	
КонецПроцедуры

// - ПриостановитьРаботуСЗадачей

&НаКлиенте
Процедура ПриостановитьРаботуСЗадачей(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗадачаВРаботе = ЗадачаВРаботе(ТекущийПользователь);
	
	Если ЗадачаВРаботе = ТекущаяЗадача Тогда
		
		ПриостановитьРаботуСЗадачейНаСервере();
		ОповеститьОбИзменении(ТекущаяЗадача);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриостановитьРаботуСЗадачейНаСервере()
	
	РегистрыСведений.ЗадачиВРаботе.ПриостановитьРаботуСЗадачей(ТекущийПользователь, ТекущаяЗадача);
	
КонецПроцедуры

// - ПланированиеЗадач

&НаКлиенте
Процедура ПланированиеЗадач(Команда)
	
	ОткрытьФорму("Обработка.ПланированиеВыполненияЗадач.Форма");
	
КонецПроцедуры

// - ОткрытьЗадачуВоВнешнейСистеме

&НаКлиенте
Процедура ОткрытьЗадачуВоВнешнейСистеме(Команда)
	
	ОткрытьЗадачуВоВнешнейСистемеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачуВоВнешнейСистемеНаКлиенте()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ВнешняяСсылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ТекущиеДанные.ВнешняяСсылка);
	
КонецПроцедуры

// Вспомогательные функции

&НаСервереБезКонтекста
Функция ЗадачаВРаботе(ТекущийПользователь)
	
	МенеджерЗаписи = РегистрыСведений.ЗадачиВРаботе.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Исполнитель = ТекущийПользователь;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		
		Возврат МенеджерЗаписи.Задача;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНастройкиСписка(Контекст)
	
	Список = Контекст.Список;
	Проект = Контекст.ОтборПроект;
	Исполнитель = Контекст.ОтборИсполнитель;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "МесяцПланирования", Контекст.ОтборМесяцПланирования);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТолькоЗапланированныеЗадачи", Контекст.ТолькоЗапланированныеЗадачи);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Исполнитель", Исполнитель, , , ЗначениеЗаполнено(Исполнитель));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Выполнена", Ложь, , , Не Контекст.ПоказыватьВыполненные);
	
	// ПАРАМЕТР ИСПОЛНИТЕЛЬ
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		
		ПараметрИсполнитель = Исполнитель;
		
	Иначе
		
		ПараметрИсполнитель = Контекст.ТекущийПользователь;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Исполнитель", ПараметрИсполнитель);
	
	// ОТБОР ПРОЕКТ
	СписокПроектов = Новый СписокЗначений;
	ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.ВСписке;
	
	Если Проект = ПредопределенноеЗначение("Справочник.Проекты.ИзбранныеПроекты") Тогда
		
		МассивПроектов = РаботаСЗадачамиВызовСервера.МассивИзбранныхПроектовТекущегоПользователя();
		СписокПроектов.ЗагрузитьЗначения(МассивПроектов);
		
	ИначеЕсли Проект = ПредопределенноеЗначение("Справочник.Проекты.БезПроекта") Тогда		
		
		СписокПроектов.Добавить(ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"));
		СписокПроектов.Добавить(ПредопределенноеЗначение("Справочник.Проекты.БезПроекта"));

	ИначеЕсли ЗначениеЗаполнено(Проект) Тогда		
		
		СписокПроектов.Добавить(Проект);
		ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.ВИерархии;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Проект", СписокПроектов, ВидСравненияКомпоновки, , ЗначениеЗаполнено(Проект));
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти


