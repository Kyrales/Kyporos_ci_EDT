
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполнить задачу ЗадачаСсылка, при необходимости выполнив обработчик
// ОбработкаВыполненияПоУмолчанию модуля менеджера бизнес-процесса, 
// к которому относится задача ЗадачаСсылка.
//
Процедура ВыполнитьЗадачу(ЗадачаСсылка, ДействиеПоУмолчанию = Ложь) Экспорт
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка,"Исполнитель,Инициатор,Проект");
	
	Если Не ЕстьДоступНаВыполненияЗадачи(РеквизитыЗадачи) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Задача не выполнена, т.к. пользователь не является ни автором ни исполнителем задачи.'"));
		Возврат;
	КонецЕсли;
	
	Если РеквизитыЗадачи.Проект.Пустая() 
		И РаботаСЗадачами.ЭтоПолноправныйПользовательЗадач() Тогда
		ОбщегоНазначения.СообщитьПользователю(
		    НСтр("ru = 'Поле ""Проект"" не заполнено у выполняемой задачи.'"));
		Возврат;	
	КонецЕсли;	
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачиПользователя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗадачаСсылка);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
		ЗадачаОбъект.Прочитать();
		ЗадачаОбъект.ДатаВыполнения = ТекущаяДата();	
		ЗадачаОбъект.Выполнена = Ложь;
		ЗадачаОбъект.ОтмененаЗадача = Ложь;  //!
		ЗадачаОбъект.ВыполнитьЗадачу();
		
		// обновление текущего состояния в регистре
		РегистрыСведений.ТекущиеСостоянияЗадач.ОбновитьТекущееСостояниеЗадачи(ЗадачаСсылка,Справочники.СостоянияЗадач.Выполнена);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Функция ПечатьКарточкиЗадачи(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиПользователя.Важность,
	|	ЗадачиПользователя.Выполнена,
	|	ЗадачиПользователя.Дата,
	|	ЗадачиПользователя.ДатаВыполнения,
	|	ЗадачиПользователя.ПолучательУслуг КАК Инициатор,
	|	ЗадачиПользователя.Исполнитель,
	|	ЗадачиПользователя.Наименование,
	|	ЗадачиПользователя.Номер,
	|	ЗадачиПользователя.Описание,
	|	ЗадачиПользователя.Ответ,
	|	ЗадачиПользователя.ПроцентЗавершения,
	|	ЗадачиПользователя.СрокИсполнения,
	|	ЗадачиПользователя.Трудоемкость,
	|	ЗадачиПользователя.РабочаяГруппа.(
	|		Пользователь
	|	),
	|	ЗадачиПользователя.Проект,
	|	ЗадачиПользователя.ДатаНачала,
	|	ЗадачиПользователя.Основание
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.Ссылка В(&МассивОбъектов)";
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗадачиПользователя_КарточкаЗадачи";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Задача.ЗадачиПользователя.Печать");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСогласованиеШапка = Макет.ПолучитьОбласть("СогласованиеШапка");
	ОбластьСогласование = Макет.ПолучитьОбласть("Согласование");
	ОбластьРезультат = Макет.ПолучитьОбласть("Результат");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(Шапка, Выборка.Уровень());

		ВыборкаСогласование = Выборка.РабочаяГруппа.Выбрать();
		Если ВыборкаСогласование.Количество()>0 Тогда
			ТабДокумент.Вывести(ОбластьСогласованиеШапка);
			Пока ВыборкаСогласование.Следующий() Цикл
				ОбластьСогласование.Параметры.Заполнить(ВыборкаСогласование);
				ТабДокумент.Вывести(ОбластьСогласование, ВыборкаСогласование.Уровень());
			КонецЦикла;
		КонецЕсли;
		
		Если СокрЛП(Выборка.Ответ)<>"" Тогда
			ОбластьРезультат.Параметры.Заполнить(Выборка);
			ТабДокумент.Вывести(ОбластьРезультат);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(Выборка);
		
		ОбластьПодвал.Рисунки.ЗадачаВыполнена.Картинка = ?(Выборка.Выполнена,БиблиотекаКартинок.Успешно32,БиблиотекаКартинок.Информация32);
		
		ТабДокумент.Вывести(ОбластьПодвал);

		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////////////////////////////
// БСП

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	// АПК:246-выкл Подсказка для прав 
	// Чтение
	//#ПоЗначениямРасширенный( "Задача.ЗадачиПользователя", "", "",
	//"Левое Соединение Задача.ЗадачиПользователя.РабочаяГруппа КАК Т2 по Т.Ссылка = Т2.Ссылка",
	//"",
	//"Организации","Т.Проект.Организация","И",
	//"Проекты","Т.Проект","И (",
	//"Пользователи","Т.Инициатор","ИЛИ",
	//"Пользователи","Т.ПолучательУслуг","ИЛИ",
	//"Пользователи","Т.Исполнитель","ИЛИ",
	//"Пользователи","Т.ГруппаИсполнителейЗадач","ИЛИ",
	//"Пользователи","Т2.Пользователь",")", 
	//"","","", "","","", "","","", "","","", "","","", "","","", "","","", "","","", "","","")
	
	// Изменение
	//#ПоЗначениямРасширенный( "Задача.ЗадачиПользователя", "", "",
	//"",
	//"",
	//"Пользователи","Т.Инициатор","ИЛИ",
	//"Пользователи","Т.ПолучательУслуг","ИЛИ",
	//"Пользователи","Т.Исполнитель","ИЛИ",
	//"Пользователи","Т.ГруппаИсполнителейЗадач","", "","","", "","","", "","","", "","","", "","","", "","","", "","","", "","","", "","","", "","","", "","","", "","","")
	
	// Изменять может: Инициатор, Исполнитель, Роль (ГруппаИсполнителейЗадач)
	// Рабочая группа не может изменять. Только чтение. 
	// АПК:246-вкл Подсказка для прав
	
	Ограничение.Текст =
	"	ПрисоединитьДополнительныеТаблицы
	|	ЭтотСписок КАК ЭтотСписок
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачиПользователя.РабочаяГруппа КАК РабочаяГруппаЗадачи 
	|	    ПО РабочаяГруппаЗадачи.Ссылка = ЭтотСписок.Ссылка
	|	;
	|	РазрешитьЧтение
	|	ГДЕ
	|	    ЗначениеРазрешено(Проект.Организация)
	|	    И ЗначениеРазрешено(Проект)
	|	 И (  ЗначениеРазрешено(Инициатор)
	|		  ИЛИ ЗначениеРазрешено(ПолучательУслуг)
	|		  ИЛИ ЗначениеРазрешено(Исполнитель) 
	|		  ИЛИ ЗначениеРазрешено(РабочаяГруппаЗадачи.Пользователь)
	|		  ИЛИ ЗначениеРазрешено(ГруппаИсполнителейЗадач) 
	|		  ИЛИ РольДоступна(КонтрольЗадачПользователей)
	|)
	|	;
	|	РазрешитьИзменениеЕслиРазрешеноЧтение
	|	ГДЕ
	|		  ЗначениеРазрешено(Инициатор)
	|		  ИЛИ ЗначениеРазрешено(ПолучательУслуг)
	|		  ИЛИ ЗначениеРазрешено(Исполнитель)
	|		  ИЛИ ЗначениеРазрешено(ГруппаИсполнителейЗадач)
	|		  ИЛИ РольДоступна(КонтрольЗадачПользователей)
	|	
	|";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Печать карточки задачи
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КарточкаЗадачи";
	КомандаПечати.Представление = НСтр("ru = 'Печать карточки задачи'");

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаЗадачи") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"КарточкаЗадачи",
			НСтр("ru = 'Печать карточки задачи'"),
			ПечатьКарточкиЗадачи(МассивОбъектов, ОбъектыПечати));
				
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

//////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЗАДАЧАМИ

Функция ЕстьДоступНаВыполненияЗадачи(РеквизитыЗадачи) 
	
	// Если пользователь не является ни автором, ни исполнителем, то выполнить задачу нельзя.
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если РеквизитыЗадачи.Исполнитель <> ТекущийПользователь 
		И РеквизитыЗадачи.Инициатор <> ТекущийПользователь 
		И Не РаботаСЗадачами.ЭтоПолноправныйПользовательЗадач() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецЕсли

