
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		УзелОбмена = ОбщегоНазначенияКупоросСервер.ЭтотУзелОбменаДляКупорос();
	КонецЕсли;
	
	Если Не Выполнена Тогда
		
		ДатаВыполнения = '00010101';
		
	Иначе
		
		// При факте выполнения задачи процент завершения 100% и задача принята к исполнению.
		ПроцентЗавершения = 100;
		ПринятаКИсполнению = Истина;
		
		Если Не ЗначениеЗаполнено(ДатаВыполнения) Тогда
			
			ДатаВыполнения = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ТрудозатратыПлановые) Тогда
		
		ОстатокТрудозатрат = ТрудозатратыПлановые * (100 - ПроцентЗавершения) / 100;
		
	Иначе
		
		ОстатокТрудозатрат = ТрудозатратыНаОценку  + ТрудозатратыПредварительные;
		
	КонецЕсли;
	
	Если ПриоритетВыполнения = 0 Тогда
		
		ПриоритетВыполнения = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СрокОповещения)
		Или Выполнена Тогда
		Оповещение = Ложь;
	КонецЕсли;

	Если ОтмененаЗадача 
		И Не Выполнена Тогда
		ОтмененаЗадача = Ложь;
	КонецЕсли;
	
	Дата = ТекущаяДата();
	Если ДатаНачала = '00010101' Тогда
		 ДатаНачала = Дата;
	КонецЕсли;
	
	ПользовательРедактировавший = Пользователи.ТекущийПользователь();
	СрокИсполненияСтрока = Формат(СрокИсполнения, "ДФ=dd.MM.yyyy");
	
	// Получение новой ссылки для новой задачи.
	СсылкаНаЗадачу = ОбщегоНазначенияКупоросСервер.СсылкаНаНезаписанныйОбъект(ЭтотОбъект, Ссылка);	
	
	// Фиксация истории событий задач.
	Если Ссылка.Выполнена <> Выполнена 
		И Выполнена = Истина Тогда
		
		Комментарий = СтрШаблон(НСтр("ru = 'Исполнитель: %1'"), Строка(ПользовательРедактировавший));
		ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
			Ссылка, 
			Перечисления.ВидыСобытийЗадач.Выполнена, 
			Комментарий);
		
	КонецЕсли;	
	
	Если Ссылка.Выполнена <> Выполнена 
		И Выполнена = Ложь Тогда
		
		Комментарий = СтрШаблон(НСтр("ru = 'Возвратил к исполнению: %1'"), Строка(ПользовательРедактировавший));
		ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
			Ссылка, 
			Перечисления.ВидыСобытийЗадач.ВозвратКИсполнению, 
			Комментарий);
		
	КонецЕсли;	
		
	Если Не Выполнена 
		И (Не Ссылка.Пустая()) Тогда
		
		Если Ссылка.ПроцентЗавершения <> ПроцентЗавершения 
			И ПроцентЗавершения > 0 Тогда
			// Принимать к исполнению задачу, если изменен процент выполнения.
			ПринятаКИсполнению = Истина;
		КонецЕсли;
		
		Если Ссылка.ПринятаКИсполнению <> ПринятаКИсполнению 
			И (Не Ссылка.Выполнена) 
			И (Не Ссылка.ОтмененаЗадача) Тогда
			
			Если ПринятаКИсполнению Тогда
				ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(Ссылка, Перечисления.ВидыСобытийЗадач.ПринятаКИсполнению);
			Иначе
				ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(Ссылка, Перечисления.ВидыСобытийЗадач.ПринятиеКИсполнениюОтменено);
			КонецЕсли;			
			
		КонецЕсли;
		
		Если Ссылка.Исполнитель <> Исполнитель Тогда
			
			БылИсполнитель = Ссылка.Исполнитель;
			
			СталИсполнитель = Исполнитель;
			Если СталИсполнитель.Пустая() Тогда
				СталИсполнитель = РольИсполнителя;
			КонецЕсли;	
			
			Комментарий = СтрШаблон(НСтр("ru = 'От исполнителя %1 к исполнителю %2'"),БылИсполнитель, СталИсполнитель);
			ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
				Ссылка, 
				Перечисления.ВидыСобытийЗадач.Перенаправлена,
				Комментарий);
				
		КонецЕсли;
		
		Если Ссылка.ПолучательУслуг <> ПолучательУслуг Тогда
			
			БылПолучательУслуг = Ссылка.ПолучательУслуг;
			
			СталПолучательУслуг = ПолучательУслуг;
			
			Комментарий = СтрШаблон(НСтр("ru = 'От получателя услуг %1 к %2'"), БылПолучательУслуг, СталПолучательУслуг);
			ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
				Ссылка, 
				Перечисления.ВидыСобытийЗадач.ИзмененПолучательУслуг,
				Комментарий);
				
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗадач")
			И Ссылка.ВидЗадачи <> ВидЗадачи Тогда
			
			БылВидЗадачи = Ссылка.ВидЗадачи;
			
			СталВидЗадачи = ВидЗадачи;
			
			Комментарий = СтрШаблон(НСтр("ru = 'Был %1, стал %2'"), БылВидЗадачи, СталВидЗадачи);
			ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
				Ссылка, 
				Перечисления.ВидыСобытийЗадач.ИзмененВидЗадачи,
				Комментарий);
				
		КонецЕсли;
		
		
		Если Ссылка.СрокИсполнения <> СрокИсполнения Тогда
			
			Комментарий = СтрШаблон(НСтр("ru = 'Был %1, стал %2'"),Строка(Ссылка.СрокИсполнения),Строка(СрокИсполнения));
			ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
				Ссылка, 
				Перечисления.ВидыСобытийЗадач.ИзмененСрок,
				Комментарий);
				
		КонецЕсли;
		
		Если Ссылка.Важность <> Важность Тогда
			
			Комментарий = СтрШаблон(НСтр("ru = 'Была %1, стала %2'"),Строка(Ссылка.Важность),Строка(Важность));
			ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
				Ссылка, 
				Перечисления.ВидыСобытийЗадач.ИзмененаВажность,
				Комментарий);
			
		КонецЕсли;
		
		Если Ссылка.ПроцентЗавершения <> ПроцентЗавершения 
			И (Не Ссылка.Выполнена) Тогда
			
			Комментарий = СтрШаблон(НСтр("ru = 'Было %1, стало %2'"), Строка(Ссылка.ПроцентЗавершения)+"%", Строка(ПроцентЗавершения)+"%");
			ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
				Ссылка, 
				Перечисления.ВидыСобытийЗадач.ИзмененПроцентЗавершения,
				Комментарий);
			
		КонецЕсли;
		
	КонецЕсли;	//Не Выполнена и (Не Ссылка.Пустая())
	
	Если Ссылка.Ответ <> Ответ Тогда
		
		Комментарий = СтрШаблон(НСтр("ru = 'Ответил: %1'"), Строка(ПользовательРедактировавший));
		Комментарий = Комментарий + Символы.ПС + Ответ;
		ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
			Ссылка, 
			Перечисления.ВидыСобытийЗадач.ОтветИсполнителя, 
			Комментарий);
			
	КонецЕсли;	

	Если ПользовательРедактировавший <> Исполнитель 
		И Ссылка.Описание <> Описание 
		И ТребуетсяДополнениеОписанияВИсторииЗадач(ПользовательРедактировавший)
		Тогда
		
		Комментарий = СтрШаблон(НСтр("ru = 'Дополнено описание: %1'"), Строка(ПользовательРедактировавший));
		ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
			Ссылка, 
			Перечисления.ВидыСобытийЗадач.ДополнениеОписания, 
			Комментарий);
			
	КонецЕсли;	
	
	// Удаление пустых строк рабочей группы.
	КолСтрокИсходное = РабочаяГруппа.Количество();
	индекс = 1; сч = 0;
	Пока индекс <= КолСтрокИсходное Цикл
		Если Не ЗначениеЗаполнено(РабочаяГруппа[сч].Пользователь) Тогда
			РабочаяГруппа.Удалить(РабочаяГруппа[сч]);    
		Иначе
			сч = сч + 1;    
		КонецЕсли;
		индекс = индекс + 1;
	КонецЦикла;
	
	// Обновление строки рабочей группы.
	РабочаяГруппаСтрока=""; сч=0;
	Для Каждого ТекСтрокаРабочейГруппы Из РабочаяГруппа Цикл
		
		сч=сч+1;
		 Если ЗначениеЗаполнено(ТекСтрокаРабочейГруппы.Пользователь) Тогда
		 	 РабочаяГруппаСтрока = РабочаяГруппаСтрока + ТекСтрокаРабочейГруппы.Пользователь + ?(сч=РабочаяГруппа.Количество(),"","; "); 
		 КонецЕсли;
		 
	КонецЦикла;
	
	Если Выполнена 
		И Не ПринятаКИсполнению Тогда
		
		ПринятаКИсполнению = Истина;
		ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
		
	КонецЕсли;	
	
	// Заполнение реквизита ДатаПринятияКИсполнению.
	Если ПринятаКИсполнению 
		И ДатаПринятияКИсполнению = Дата('00010101') Тогда
		
		ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	// Фиксация затраченного времени выполненной задачи.
	Если Выполнена = Истина Тогда
		
		ДанныеПоЗатраченномуВремени = РегистрыСведений.ЗатраченноеВремяПоЗадачам.ФактическоеЗатраченноеВремяПоЗадаче(Ссылка);
		ЗатраченноеВремяПоЗадачеФакт = ДанныеПоЗатраченномуВремени.ОбщееЗатраченноеВремя;
		
		Если ЗатраченноеВремяПоЗадачеФакт = 0 
			И Трудоемкость > 0 Тогда
			
			// В случае если затраченное время по задаче не заполнено, текущую трудоемкость помещать в затраченное время факта.
			МенеджерЗаписи = РегистрыСведений.ЗатраченноеВремяПоЗадачам.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ДатаВыполнения;
			МенеджерЗаписи.Задача = СсылкаНаЗадачу;
			МенеджерЗаписи.Исполнитель = Исполнитель;
			МенеджерЗаписи.ВидРаботы = Справочники.ВидыРабот.РаботаПоЗадаче;  // общий вид работы по задаче
			МенеджерЗаписи.ЗатраченноеВремя = Трудоемкость;
			МенеджерЗаписи.АвторФиксацииВремени = ПользовательРедактировавший;
			МенеджерЗаписи.Записать(Истина);
			
			ДанныеПоЗатраченномуВремени.ВремяИсполнителей.Вставить(Исполнитель, Трудоемкость);
			ДанныеПоЗатраченномуВремени.ОбщееЗатраченноеВремя = Трудоемкость;
			
		Иначе
			
			Трудоемкость = ЗатраченноеВремяПоЗадачеФакт;
			
		КонецЕсли;
		
		// фиксация работ по задаче по факту выполнения
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ВестиУчетАктовВыполненныхРабот") = Истина 
			И Не ОтмененаЗадача
			И Трудоемкость > 0 Тогда
		
			Для каждого ТекСтрокаИсполнителей Из ДанныеПоЗатраченномуВремени.ВремяИсполнителей Цикл
				
				ДанныеДляФиксацииРабот = Новый Структура;
				ДанныеДляФиксацииРабот.Вставить("Дата", ДатаВыполнения);
				ДанныеДляФиксацииРабот.Вставить("Задача", СсылкаНаЗадачу);
				ДанныеДляФиксацииРабот.Вставить("Исполнитель", ТекСтрокаИсполнителей.Ключ);
				ДанныеДляФиксацииРабот.Вставить("ФактическаяТрудоемкость", ТекСтрокаИсполнителей.Значение);
				Документы.РаботыПоЗадаче.ЗафиксироватьРаботуПоЗадаче(ДанныеДляФиксацииРабот);
			
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Исполнитель;
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УстановитьПривилегированныйРежим(Истина);
	ЗаполнитьОбъектыАдресацииНаОснованииОбъекта();
	ГруппаИсполнителейЗадач = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	УстановитьПривилегированныйРежим(Ложь);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.РабочиеМеста") Тогда
		
		Исполнитель = Пользователи.ТекущийПользователь();
		Инициатор   = ДанныеЗаполнения.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаВыполнения = "";	
	Выполнена = Ложь;
	ОтмененаЗадача = Ложь;
	ПроцентЗавершения = 0;
	ОценкаЗадачи = 0;
	ДатаОценкиЗадачи = '00010101';
	Ответ = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) создается прикладным разработчиком
//  в модулях объектов, тип которых задан в одной из подписок на событие.
//  ЗаписатьНаборыЗначенийДоступа или ЗаписатьЗависимыеНаборыЗначенийДоступа.
//  В процедуре выполняется заполнение наборов значений доступа по свойствам объекта.
//  
// Параметры:
//  Таблица - ТаблицаЗначений - возвращаемая функцией ТаблицаНаборыЗначенийДоступа.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения для
	// - чтения:    Автор ИЛИ Исполнитель (с учетом адресации) ИЛИ Проверяющий (с учетом адресации)
	// - изменения: Автор.
	
	// Чтение, Изменение: набор № 1.1
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = Инициатор;
	
	// Чтение, Изменение: набор № 1.2
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = ПолучательУслуг;
	
	// Чтение, Изменение: набор № 2.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 2;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
	
	// Чтение, Изменение: набор № 3.
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 3;
		Строка.Чтение          = Истина;
		Строка.Изменение       = Истина;
		Строка.ЗначениеДоступа = Исполнитель;
	КонецЕсли;
	
	// Чтение: набор № 4.
	НомерНабораРабочейГруппы = 4;
	Для каждого ТекРабочаяГруппа Из РабочаяГруппа Цикл
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = НомерНабораРабочейГруппы;
		Строка.Чтение          = Истина;
		Строка.Изменение       = Ложь;
		Строка.ЗначениеДоступа = ТекРабочаяГруппа.Пользователь;
		НомерНабораРабочейГруппы = НомерНабораРабочейГруппы + 1;
	КонецЦикла;	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ТребуетсяДополнениеОписанияВИсторииЗадач(ПользовательРедактировавший) 
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		// новые задачи нет необходимости в фиксации дополнения описания
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаУведомленияОНовыхЗадачах = Константы.ДатаУведомленияОНовыхЗадачах.Получить();
	Если ДатаНачала > ДатаУведомленияОНовыхЗадачах Тогда
		// Если задача создана в текущий период от даты уведомления, то нет необходимости в фиксации дополнения описания.
		// В случае если регламентное задание уведомлений не используется, то дополнение описания также не фиксируется.
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка на наличие ранее введенного дополнения описания за текущий период уведомления.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсторияСобытийЗадач.Задача,
	|	ИсторияСобытийЗадач.ДатаСобытия,
	|	ИсторияСобытийЗадач.Пользователь,
	|	ИсторияСобытийЗадач.Событие
	|ИЗ
	|	РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
	|ГДЕ
	|	ИсторияСобытийЗадач.Задача = &Задача
	|	И ИсторияСобытийЗадач.ДатаСобытия >= &ДатаСобытия
	|	И ИсторияСобытийЗадач.Пользователь = &Пользователь
	|	И ИсторияСобытийЗадач.Событие = Значение(Перечисление.ВидыСобытийЗадач.ДополнениеОписания)";
	
	Запрос.УстановитьПараметр("Задача", Ссылка);
	Запрос.УстановитьПараметр("Пользователь", ПользовательРедактировавший);
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаУведомленияОНовыхЗадачах);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка.Количество()=0; 	
	
КонецФункции

// Заполнение из данных задачи объектов ролевой адресации: Проект
//
Процедура ЗаполнитьОбъектыАдресацииНаОснованииОбъекта()
	
	Если Не ЗначениеЗаполнено(РольИсполнителя) Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не РольИсполнителя.ИспользуетсяСОбъектамиАдресации Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение проекта
	Если РольИсполнителя.ТипыОсновногоОбъектаАдресации=ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.Проект 
		И ЗначениеЗаполнено(Проект) Тогда
		ОсновнойОбъектАдресации = Проект;
	КонецЕсли;
	Если РольИсполнителя.ТипыДополнительногоОбъектаАдресации=ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.Проект 
		И ЗначениеЗаполнено(Проект) Тогда
		ДополнительныйОбъектАдресации = Проект;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли

