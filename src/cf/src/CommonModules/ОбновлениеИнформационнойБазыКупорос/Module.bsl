////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии Купорос"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "Купорос";
	Описание.Версия = Метаданные.Версия;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.НачальноеЗаполнениеДанных";  //процедура общего модуля
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_0_1_3";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_0_2_1";  //процедура общего модуля
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_0_2_6";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_0_2_13";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_0_2_15";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_0_2_20";  //процедура общего модуля
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.25";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_0_2_25";  //процедура общего модуля
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_0_7_4";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_0_8_1";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_0_8_3";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_1_0_1";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_1_0_3";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_1_1_3";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_1_2_2";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_1_3_5";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.4.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_1_4_2";  //процедура общего модуля
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.5.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_1_5_2";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.6.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_1_6_1";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_2_5_1";  //процедура общего модуля
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.10.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_2_10_1";  //процедура общего модуля
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.14.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.КонтактнаяИнформацияОбновлениеИБ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.17.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ЗаполнениеБазовогоСценарияОбработкиЗадач";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.17.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ЗаполнениеТекущегоСостоянияЗадач_1_2_17_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.19.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_2_19_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.20.2";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ЗаполнениеНастроекДоступностиПоСостояниюЗадачи";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.24.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ЗаполнениеНастроекДоступностиПоСостояниюЗадачи";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.3";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ЗаполнениеУзлаОбмена"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.8.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_3_8_6"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.16.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_3_16_1"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.21.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.КонтактнаяИнформацияОбновлениеИБ"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.23.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_3_23_3"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.23.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_3_23_6"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.23.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_3_23_8"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.30.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКупорос.ПерейтиНаВерсию_1_3_30_2"; 
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
		
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриПодготовкеМакетаОписанияОбновлений.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ

// Заполнение при развертывании конфигурации с нуля
//
Процедура НачальноеЗаполнениеДанных() Экспорт

	Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);	
	
КонецПроцедуры 

// Процедура обновления ИБ для справочника видов контактной информации
Процедура КонтактнаяИнформацияОбновлениеИБ() Экспорт
	
	// - Обновление элементов контактной информации
	// Контактная информация справочника "Организации"
	ГруппаКонтактнойИнформации     = УправлениеКонтактнойИнформацией.ПараметрыГруппыВидаКонтактнойИнформации();
	ГруппаКонтактнойИнформации.Имя = "СправочникОрганизации";
	ГруппаКонтактнойИнформации.Наименование =  НСтр("ru = 'Контактная информация справочника ""Организации""'");
	
	Группа = УправлениеКонтактнойИнформацией.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ГруппаКонтактнойИнформации);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Вид.Имя          = "EmailОрганизации";
	Вид.Наименование = НСтр("ru = 'Электронная почта'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	Вид.Порядок         = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);

	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	Вид.Имя = "ДругаяИнформацияОрганизации";
 	Вид.Наименование = НСтр("ru = 'Другое'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	Вид.Порядок         = 7;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	Вид.Имя          = "ПочтовыйАдресОрганизации";
	Вид.Наименование = НСтр("ru = 'Адрес контактного лица'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.Порядок         = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	Вид.Имя          = "ТелефонОрганизации";
	Вид.Наименование = НСтр("ru = 'Телефон'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	Вид.Порядок         = 5;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Факс);
	Вид.Имя          = "ФаксОрганизации";
	Вид.Наименование = НСтр("ru = 'Факс'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	Вид.Порядок         = 6;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	Вид.Имя          = "ФактАдресОрганизации";
	Вид.Наименование = НСтр("ru = 'Фактический адрес'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.Порядок         = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	Вид.Имя          = "ЮрАдресОрганизации";
	Вид.Наименование = НСтр("ru = 'Юридический адрес'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.ХранитьИсториюИзменений           = Истина;
	Вид.Порядок         = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	// Справочник "Проекты"	
	ГруппаКонтактнойИнформации     = УправлениеКонтактнойИнформацией.ПараметрыГруппыВидаКонтактнойИнформации();
	ГруппаКонтактнойИнформации.Имя = "СправочникПроекты";
	ГруппаКонтактнойИнформации.Наименование =  НСтр("ru = 'Контактная информация справочника ""Проекты""'");
	
	Группа = УправлениеКонтактнойИнформацией.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ГруппаКонтактнойИнформации);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Вид.Имя          = "EmailПроекта";
	Вид.Наименование = НСтр("ru = 'Электронная почта'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);

	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	Вид.Имя = "ДругаяИнформацияПроекта";
 	Вид.Наименование = НСтр("ru = 'Другое'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.ВидПоляДругое   = "ОднострочноеШирокое";
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	Вид = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	Вид.Вид = "ВебСтраница";
  	Вид.Наименование = НСтр("ru = 'Веб страница'");
	Вид.Группа     = Группа;
	Вид.МожноИзменятьСпособРедактирования = Истина;
	Вид.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(Вид);
	
	// - Отключение не актуальных старых вариантов предопределенных.
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПользователи);
	МассивИсключений.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	МассивИсключений.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	|	ВидыКонтактнойИнформации.Предопределенный КАК Предопределенный,
	|	ВидыКонтактнойИнформации.ИмяПредопределенногоВида КАК ИмяПредопределенногоВида
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Используется
	|	И НЕ ВидыКонтактнойИнформации.Ссылка В (&СписокИсключений)
	|	И ВидыКонтактнойИнформации.Предопределенный";
	
	Запрос.УстановитьПараметр("СписокИсключений", МассивИсключений);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ВидКонтактнойИнформации = Выборка.Ссылка.ПолучитьОбъект();
		ВидКонтактнойИнформации.Используется = Ложь;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформации);
	
	КонецЦикла;
	
	// - Изменение ссылок старого варианта предопределенных на новый, созданный автоматически.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Данные
	               |ИЗ
	               |	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	               |ГДЕ
	               |	ОрганизацииКонтактнаяИнформация.Вид.Предопределенный
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОрганизацииКонтактнаяИнформация.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПроектыКонтактнаяИнформация.Ссылка
	               |ИЗ
	               |	Справочник.Проекты.КонтактнаяИнформация КАК ПроектыКонтактнаяИнформация
	               |ГДЕ
	               |	ПроектыКонтактнаяИнформация.Вид.Предопределенный
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПроектыКонтактнаяИнформация.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Данные.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТ_Данные КАК ВТ_Данные";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектДанных = Выборка.Ссылка.ПолучитьОбъект();
	
		Для каждого ТекСтрока Из ОбъектДанных.КонтактнаяИнформация Цикл
			
			// определяем актуальный вид контактной информации
			ТекущееИмя = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Вид, "ИмяПредопределенныхДанных"));
			ТекущееИмя = СтрЗаменить(ТекущееИмя, "Удалить", "");
			
			ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени(ТекущееИмя);
			Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			
				ТекСтрока.Вид = ВидКонтактнойИнформации; 
			
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектДанных);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_1_3() Экспорт

	 // Перезапись видов номенклатуры
	 Выборка = Справочники.ВидыНоменклатуры.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
	 	Об = Выборка.ПолучитьОбъект();
		Об.Записать();
	 
	 КонецЦикла;

КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_2_1() Экспорт 
	
	// Заполнение в типах объектов метаданных типов модулей
	Выборка = Справочники.ТипОбъектаМетаданных.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// заполнение реквизита СоответствиеМодулю
        Об = Выборка.ПолучитьОбъект();
        Об.СоответствиеМодулю = ОпределитьСоответствиеТипаОбъектаМетаданных(Выборка.Ссылка);
		Об.Записать();
		
		// заполнение типов модулей по умолчанию
		Если Выборка.ТипыМодулейПоУмолчанию.Количество()<>0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.Справочник 
			Или Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.Документ
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.Обработка
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.БизнесПроцесс
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.Задача
			Тогда
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.МодульОбъекта;
			
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.ФормаЭлемента;
			
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.ФормаСписка;
			
		КонецЕсли;
		
		
		Если Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ОбщийМодуль 
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.Отчет
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ПланСчетов
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ПланОбмена
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ПланВидовХарактеристик
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ПланВидовРасчета
			Тогда
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.МодульОбъекта;
		КонецЕсли;
		
		Если Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ОбщаяФорма Тогда
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.ФормаЭлемента;
		КонецЕсли;
		
		Если Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ОбщаяКоманда Тогда
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.МодульКоманды;
		КонецЕсли;
		
		Если Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ЖурналДокументов 
			Или Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.КритерийОтбора Тогда
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.МодульМенеджера;
			
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.ФормаСписка;
			
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.ФормаЭлемента;
		КонецЕсли;
		
		Об.Записать();
	КонецЦикла;
	  
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_2_6() Экспорт 
	
	  Выборка = РегистрыСведений.УчетВерсийКонфигурации.Выбрать();
	  
	  Пока Выборка.Следующий() Цикл
	  
	  		РегМен = Выборка.ПолучитьМенеджерЗаписи();
			
			//очистить текущие данные
			РегМен.ДействияРезультат = Перечисления.РежимРаботыПослеОбновления.ПустаяСсылка();
			
			тзДанные = УправлениеУчетомКонфигурацийВызовСервера.ЧтениеВТаблицуЗначенийДанныхПоИзменениям(РегМен.КомментарийИзменения);
			РегМен.ДействияРезультат = УправлениеУчетомКонфигурацийВызовСервера.ОпределитьРезультатИзменения(РегМен,тзДанные);
			
			РегМен.Записать();
	  
	  КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_2_13() Экспорт

	

КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_2_15() Экспорт 
	
	// Заполнение в типах объектов метаданных типов модулей
	Выборка = Справочники.ТипОбъектаМетаданных.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//заполнение реквизита СоответствиеМодулю
        Об = Выборка.ПолучитьОбъект();
        Об.СоответствиеМодулю = ОпределитьСоответствиеТипаОбъектаМетаданных(Выборка.Ссылка);
		Об.Записать();
		
		//заполнение типов модулей по умолчанию
		Если Выборка.ТипыМодулейПоУмолчанию.Количество()<>0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Об = Выборка.ПолучитьОбъект();
		
		Если Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.Справочник 
			Или Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.Документ
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.Обработка
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.БизнесПроцесс
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.Задача
			Тогда
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.МодульОбъекта;
			
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.ФормаЭлемента;
			
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.ФормаСписка;
			
		КонецЕсли;
		
		
		Если Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ОбщийМодуль 
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.Отчет
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ПланСчетов
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ПланОбмена
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ПланВидовХарактеристик
			Или  Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ПланВидовРасчета
			Тогда
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.МодульОбъекта;
		КонецЕсли;
		
		Если Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ОбщаяФорма Тогда
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.ФормаЭлемента;
		КонецЕсли;
		
		Если Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ОбщаяКоманда Тогда
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.МодульКоманды;
		КонецЕсли;
		
		Если Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.ЖурналДокументов Тогда
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.МодульМенеджера;
			
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.ФормаСписка;
		КонецЕсли;
		
		Об.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполнение подсистемы тестирования объектов метаданных
Процедура ПерейтиНаВерсию_1_0_2_20() Экспорт
	
	// АПК:1297-выкл Отключение проверки локализованной строки
	// Заполнение подсистемы тестирования объектов метаданных
	
	// СПРАВОЧНИК
	ДобавитьЭтапПроверкиОбъектов("Открытие в интерфейсе с набором ролей фокус-пользователя",
								 "Открытие в интерфейсе с набором ролей фокус-пользователя",
								 "Заходим под фокус-пользователем, находим в его интерфейсе объект, открываем");
								 
	ДобавитьЭтапПроверкиОбъектов("Проверить наличие всех необходимых колонок в форме списка",
								 "Проверить наличие всех необходимых колонок в форме списка",
								 "");
								 
	ДобавитьЭтапПроверкиОбъектов("Проверить наличие всех необходимых реквизитов в форме элемента",
								 "Проверить наличие всех необходимых реквизитов в форме элемента",
								 "Проверить Владелец, Родитель, Код, Наименование");
	
	ДобавитьЭтапПроверкиОбъектов("Соблюдена похожесть форм на типовые справочники 1С",
								 "Соблюдена похожесть форм на типовые справочники 1С",
								 "Код, наименование, владелец, родитель сверху, все остальные реквизиты ниже");
								 
	ДобавитьЭтапПроверкиОбъектов("Не должно быть доступно интерактивное удаление",
								 "Пометить на удаление, Снять пометку на удалений, Скопировать. Не должно быть доступно интерактивное удаление.",
								 "Проверить для элемента и группы. Часто бывает ошибка при создании Группы, так как в коде прописаны проверки реквизитов элемента, а они недоступны для группы.");
								 
	ДобавитьЭтапПроверкиОбъектов("Должна быть доступна кнопка Перейти к связанным объектам.",
								 "Должна быть доступна кнопка Перейти к связанным объектам.",
								 "Должна быть в формах верхних командных панелях форм");
								 
	ДобавитьЭтапПроверкиОбъектов("В модуле объекта, в событие ПередЗаписью() проверка на ОбменДанными.Загрузка",
								 "В модуле объекта, в событие ПередЗаписью() проверка на ОбменДанными.Загрузка.",
								 "Необходимо делать Возврат с условием ОбменДанными.Загрузка в начале события ПередЗаписью() в сложных алгоритмах записи");
								 
	ДобавитьЭтапПроверкиОбъектов("Наличие справки",
								 "Наличие справки",
								 "");
								 
								 
	// Независимый РЕГИСТР СВЕДЕНИЙ
	ДобавитьЭтапПроверкиОбъектов("Периодичность регистра (год, месяц, день)",
								 "Периодичность регистра (год, месяц, день)",
								 "Попробовать ввести несколько записей на разные даты в рамках одного интервала периодичности.",
								 "Регистры");
								 
	ДобавитьЭтапПроверкиОбъектов("Состав измерений",
								 "Состав измерений",
								 "Уникальность записи, нельзя создать более одной записи с одни набором измерений.
								 |1) Проверить, что если, например, в тех задании указана детализация регистра по Организации, Подразделению и Номенклатуре, то нельзя ввести более одной записи с таким сочетанием измерений (т.е. отсутствует 4 измерение).
								 |2) Проверить, что можно ввести, например 2 записи с одинаковой Организацией, Подразделением, но разными номенклатурами."
								 "Регистры");

	ДобавитьЭтапПроверкиОбъектов("Состав ресурсов",
								 "Состав ресурсов",
								 "Вычисляемые поля",
								 "Регистры");
								 
	ДобавитьЭтапПроверкиОбъектов("Состав реквизитов",
								 "Состав реквизитов",
								 "Вычисляемые поля",
								 "Регистры");
								 
	ДобавитьЭтапПроверкиОбъектов("Наличие всех необходимых полей в форме списка",
								 "Наличие всех необходимых полей в форме списка",
								 "");
								 
								 
	ДобавитьЭтапПроверкиОбъектов("Наличие всех необходимых полей в форме элемента",
								 "Наличие всех необходимых полей в форме элемента",
								 "");
								 
								 
	// ДОКУМЕНТ
	
	//форма списка, форма выбора
	ДобавитьЭтапПроверкиОбъектов("Должны отображаться колонки в списке",
								 "В списке документов, должны отображаться все необходимые колонки. Список должен быть удобочитаем.",
								 "",
								 "Форма списка, форма выбора");
								 
	ДобавитьЭтапПроверкиОбъектов("Опробование действий в списке",
								 "В списке пробуем действия создание документа, копирование, пометка на удаление, снятие пометки на удаление, проведение, отмена проведения, повторное проведение",
								 "Не должно быть возможности интерактивного удаления документа. Выводятся сообщения в окно служебных сообщений. Не должны выводиться вопросы и предупреждения.",
								 "Форма документа");
	
	ДобавитьЭтапПроверкиОбъектов("По кнопке Перейти структура подчиненности и движения документа",
								 "В списке должно быть доступно по кнопке Перейти структура подчиненности и движения документа.",
								 "",
								 "Форма списка, форма выбора");
								 
	ДобавитьЭтапПроверкиОбъектов("При копировании документа должен очищаться ответственный и др.",
								 "При копировании документа должен очищаться ответственный и ссылки на подчиненные документы, созданные исходным документом.",
								 "",
								 "Форма списка, форма выбора");
								 
	ДобавитьЭтапПроверкиОбъектов("При изменении повтор действия с подчиненными документами",
								 "При установке пометки на удаление, снятии пометки на удаление, проведении или отмене проведения, такие же действия должны происходить с подчиненными документами, создаваемыми на основании текущего.",
								 "",
								 "Форма списка, форма выбора");
	//форма документа
	ДобавитьЭтапПроверкиОбъектов("Заполнение реквизитов по умолчанию",
								 "При создании нового документа, должны заполниться реквизиты по умолчанию. Например, организация из настроек пользователя по умолчанию. Также должен заполниться  ответственный из текущего пользователя.",
								 "",
								 "Форма документа");
	
	ДобавитьЭтапПроверкиОбъектов("Форма должна иметь вид приближенный к типовым формам 1С документов",
								 "Форма должна иметь вид приближенный к типовым формам 1С документов. Т.е. сверху вниз: Командная панель действий формы, Номер и Дата документа, реквизиты шапки, панель с табличными частями, итоги, ответственный и комментарий, Основная панель формы с кнопками печати, записи, проведения и закрытия.",
								 "",
								 "Форма документа");
								 
	ДобавитьЭтапПроверкиОбъектов("В командной панели действий формы должно быть доступно по кнопке Перейти структура",
								 "В командной панели действий формы должно быть доступно по кнопке Перейти структура",
								 "",
								 "Форма документа");
								 
	ДобавитьЭтапПроверкиОбъектов("На форме должны заполняться основные значения",
								 "На форме должны заполняться основные значения, например основной договор при выборе контрагента или основной банковский счет. Формы выбора зависимых реквизитов должны открываться с отборами по владельцам и логике операции (например, в Реализации договоры с покупателем - в Поступлении договоры с поставщиком)",
								 "",
								 "Форма документа");
								 
	ДобавитьЭтапПроверкиОбъектов("Возможность изменения  табличной части",
								 "Возможность изменения  табличной части: добавление, удаление строк, настройка списка колонок, вывод списка, сортировка, отбор..",
								 "",
								 "Форма документа");
								 
	ДобавитьЭтапПроверкиОбъектов("Обязательные для заполнения реквизиты выделены красным",
								 "Обязательные для заполнения реквизиты документа должны иметь характерное красное подчеркивание внутри поля.",
								 "",
								 "Форма документа");
								 
	ДобавитьЭтапПроверкиОбъектов("У полей реквизитов должны быть стандартные кнопки открытия и выбора",
								 "У полей реквизитов должны быть стандартные кнопки открытия и выбора. Кнопка очистки необязательна, лучше чтобы отсутствовала.",
								 "",
								 "Форма документа");
								 
	ДобавитьЭтапПроверкиОбъектов("Обработки заполнения тч выведены в командную панель в подменю",
								 "Обработки заполнения табличной части выведены в командную панель ТЧ в подменю заполнить, либо отдельными кнопками.",
								 "",
								 "Форма документа");
								 
	//печатные формы
	ДобавитьЭтапПроверкиОбъектов("Не должны формироваться для модифицированного документа",
								 "Не должны формироваться для модифицированного документа. Документ должен быть проведен или записан, в зависимости от контекста задачи.",
								 "Изменить существующий документ и попробовать распечатать",
								 "Печатная форма");
								 
	ДобавитьЭтапПроверкиОбъектов("Печатная форма должна соответствовать приложению к тех заданию",
								 "Печатная форма должна соответствовать приложению к тех заданию",
								 "Визуально сравнить с приложением тех задания",
								 "Печатная форма");
								 
	ДобавитьЭтапПроверкиОбъектов("Должен быть выдержан шрифт и оформление согласно тех заданию",
								 "Должен быть выдержан шрифт и оформление согласно тех заданию",
								 "Сравнить свойства шрифта печатной формы  и приложения. Важно при печати этикеток или других специальных форм на принтеры не являющиеся А4.",
								 "Печатная форма");
								 
	ДобавитьЭтапПроверкиОбъектов("Все нужные поля должны быть заполнены исходя из данных документа.",
								 "Все нужные поля должны быть заполнены исходя из данных документа.",
								 "Проверить заполнение полей согласно тех заданию. Проверить верно ли они взяты из документа.",
								 "Печатная форма");
								 
	ДобавитьЭтапПроверкиОбъектов("Сохранение параметров печати",
								 "",
								 "Нажать кнопку Файл - Параметры печати, настроить параметры, сделать предварительный просмотр.
								 |
								 |Далее закрыть документ. Открыть и снова сформировать печатную форму. Если пришлось заново настраивать параметры печати, то это ошибка.",
								 "Печатная форма");
								 
	//проведение документа
	ДобавитьЭтапПроверкиОбъектов("При проведении документа должна происходить проверка обязательно заполненных полей",
								 "При проведении документа должна происходить проверка обязательно заполненных полей",
								 "Выводятся сообщения в окно служебных сообщений.",
								 "Проведение документа");
	
	ДобавитьЭтапПроверкиОбъектов("Движения документа должны удаляться при отмене проведения документа",
								 "",
								 "",
								 "Проведение документа");
	
	ДобавитьЭтапПроверкиОбъектов("Движения документа должны меняться при проведении документа",
								 "",
								 "Попробовать изменить количество строк, состав полей. Сравнить",
								 "Проведение документа");
								 
	ДобавитьЭтапПроверкиОбъектов("При нажатии кнопки Записать проведенного документа",
								 "При нажатии кнопки Записать проведенного документа, должны переформировываться движения документа",
								 "Если при разработке не поставить флаг перепроводить при записи у формы документа, то изменив состав документа и нажав записать в форме документа Движения не изменяться.",
								 "Проведение документа");
								 
	//Ввод на основании							 
	ДобавитьЭтапПроверкиОбъектов("Проверить создание документа на основании других документов",
								 "",
								 "Могут быть синтаксические ошибки кода, вылетающие в конфигуратор- это недопустимо.",
								 "Ввод на основании");
								 
	ДобавитьЭтапПроверкиОбъектов("Проверить создание других документов на основании текущего",
								 "",
								 "Могут быть синтаксические ошибки кода, вылетающие в конфигуратор- это недопустимо.",
								 "Ввод на основании");
								 
								 
	// Отчет
								 
	ДобавитьЭтапПроверкиОбъектов("Сохранение и восстановление настроек с возможностью, использования настроек с разных компьютеров",
								 "",
								 "Есть два варианта сохранения настроек: 1) Доступные только на это м компьютере только под данным пользователем в данной базе 2) Доступные всем пользователям в данной базе на разных компьютерах",
								 "Отчет");
	
	ДобавитьЭтапПроверкиОбъектов("Наличие в форме отчета всех полей, описанных в тех задании",
								 "",
								 "Тестирование на совпадение с приложениями.",
								 "Отчет");
	
	ДобавитьЭтапПроверкиОбъектов("Установка параметров",
								 "",
								 "При открытии должна заполняться организация и период",
								 "Отчет");
	
	ДобавитьЭтапПроверкиОбъектов("Группировки",
								 "",
								 "Все группировки учтены. Например от организации до документа движения.",
								 "Отчет");
	
	ДобавитьЭтапПроверкиОбъектов("Сортировка",
								 "",
								 "Переформировать с другой сортировкой",
								 "Отчет");
	
	ДобавитьЭтапПроверкиОбъектов("Отборы",
								 "",
								 "Переформировать с другими отборами",
								 "Отчет");
	
	ДобавитьЭтапПроверкиОбъектов("Просчитать данные в строке отчета на примере разных вариантов поведения, описанных в техническом задании",
								 "",
								 "Это тестирование алгоритмов",
								 "Отчет");
	
	ДобавитьЭтапПроверкиОбъектов("Проверить формат вывода чисел или других полей",
								 "",
								 "Например, суммы выводятся с двумя знаками после запятой.",
								 "Отчет");
	
	ДобавитьЭтапПроверкиОбъектов("Проверить наличие и правильную работу расшифровки отчета",
								 "",
								 "По двойному щелчку на строке, сформировать расшифровку. Проверить с разными отборами правильность вывода итоговых значений",
								 "Отчет");
								 

	// Обработка
	
	ДобавитьЭтапПроверкиОбъектов("Сохранение и восстановление настроек с возможностью, использования настроек с разных компьютеров",
								 "",
								 "Есть два варианта сохранения настроек: 1) Доступные только на это м компьютере только под данным пользователем в данной базе 2) Доступные всем пользователям в данной базе на разных компьютерах",
								 "Обработка");
	
	ДобавитьЭтапПроверкиОбъектов("Удобство использования",
								 "",
								 "Удобное управление пользователем без лишних действий и переходов в другие окна.",
								 "Обработка");
								 
	ДобавитьЭтапПроверкиОбъектов("Пользователю даны права доступа на сам объект и объекты используемые обработкой",
								 "",
								 "Под полными правами это все доступно, но под конкретным пользователем данные могут быть недоступны, что приведет к ошибке вываливающейся в конфигуратор.",
								 "Обработка");
								 
								 
								 
	// Заполнение сценариев тестирования
	
	//Справочник
	
	НаименованиеСценария = "Блок тестирования Справочника";
	НайденнаяСсылка = Справочники.СценарииТестированияОбъектов.НайтиПоНаименованию(НаименованиеСценария);
	Если НайденнаяСсылка.Пустая() Тогда
		Объект = Справочники.СценарииТестированияОбъектов.СоздатьЭлемент();
	Иначе
		Объект = НайденнаяСсылка.ПолучитьОбъект();
		Объект.ЭтапыПроверки.Очистить();
		Объект.ТипичныеОшибки.Очистить();
	КонецЕсли;
	
	Объект.Наименование = НаименованиеСценария;
	
	ДобавитьЭтапПроверки(Объект,"Открытие в интерфейсе с набором ролей фокус-пользователя");
	ДобавитьЭтапПроверки(Объект,"Проверить наличие всех необходимых колонок в форме списка");
	ДобавитьЭтапПроверки(Объект,"Проверить наличие всех необходимых реквизитов в форме элемента");
	ДобавитьЭтапПроверки(Объект,"Соблюдена похожесть форм на типовые справочники 1С");
	ДобавитьЭтапПроверки(Объект,"Не должно быть доступно интерактивное удаление");
	ДобавитьЭтапПроверки(Объект,"Должна быть доступна кнопка Перейти к связанным объектам.");
	ДобавитьЭтапПроверки(Объект,"В модуле объекта, в событие ПередЗаписью() проверка на ОбменДанными.Загрузка");
	ДобавитьЭтапПроверки(Объект,"Наличие справки");
	
	Объект.Записать();
	
	
	//Независимый РЕГИСТР СВЕДЕНИЙ
	
	НаименованиеСценария = "Блок тестирования Независимый регистр сведений";
	НайденнаяСсылка = Справочники.СценарииТестированияОбъектов.НайтиПоНаименованию(НаименованиеСценария);
	Если НайденнаяСсылка.Пустая() Тогда
		Объект = Справочники.СценарииТестированияОбъектов.СоздатьЭлемент();
	Иначе
		Объект = НайденнаяСсылка.ПолучитьОбъект();
		Объект.ЭтапыПроверки.Очистить();
		Объект.ТипичныеОшибки.Очистить();
	КонецЕсли;
	
	Объект.Наименование = НаименованиеСценария;
	
	ДобавитьЭтапПроверки(Объект,"Открытие в интерфейсе с набором ролей фокус-пользователя");
	ДобавитьЭтапПроверки(Объект,"Периодичность регистра (год, месяц, день)");
	ДобавитьЭтапПроверки(Объект,"Состав измерений");
	ДобавитьЭтапПроверки(Объект,"Состав ресурсов");
	ДобавитьЭтапПроверки(Объект,"Состав реквизитов");
	ДобавитьЭтапПроверки(Объект,"Наличие всех необходимых полей в форме списка");
	ДобавитьЭтапПроверки(Объект,"Наличие всех необходимых полей в форме элемента");
	ДобавитьЭтапПроверки(Объект,"Наличие справки");
	
	ДобавитьТипичнуюОшибку(Объект,"Не выведен в интерфейс","");
	ДобавитьТипичнуюОшибку(Объект,"Не дано право фокус-пользователю на работу с объектом","Нет возможности создания и удаления записи регистра");
	ДобавитьТипичнуюОшибку(Объект,"Не соблюдается периодичность справочника","");
	ДобавитьТипичнуюОшибку(Объект,"Неверно определен состав измерений","");
	ДобавитьТипичнуюОшибку(Объект,"При удалении элемента, указанного в измерении запись в регистре не удаляется.","У измерения должен назначаться признак Ведущий");
	ДобавитьТипичнуюОшибку(Объект,"Справка от другого регистра сведений","");
	
	Объект.Записать();
	
	
	//ДОКУМЕНТ
	
	НаименованиеСценария = "Блок тестирования Документ";
	НайденнаяСсылка = Справочники.СценарииТестированияОбъектов.НайтиПоНаименованию(НаименованиеСценария);
	Если НайденнаяСсылка.Пустая() Тогда
		Объект = Справочники.СценарииТестированияОбъектов.СоздатьЭлемент();
	Иначе
		Объект = НайденнаяСсылка.ПолучитьОбъект();
		Объект.ЭтапыПроверки.Очистить();
		Объект.ТипичныеОшибки.Очистить();
	КонецЕсли;
	
	Объект.Наименование = НаименованиеСценария;
	
	//форма списка, форма выбора
	ДобавитьЭтапПроверки(Объект,"Открытие в интерфейсе с набором ролей фокус-пользователя");
	ДобавитьЭтапПроверки(Объект,"Должны отображаться колонки в списке");
	ДобавитьЭтапПроверки(Объект,"Опробование действий в списке");
	ДобавитьЭтапПроверки(Объект,"По кнопке Перейти структура подчиненности и движения документа");
	ДобавитьЭтапПроверки(Объект,"При копировании документа должен очищаться ответственный и др.");
	ДобавитьЭтапПроверки(Объект,"При изменении повтор действия с подчиненными документами");
	
	//форма документа
	ДобавитьЭтапПроверки(Объект,"Заполнение реквизитов по умолчанию");
	ДобавитьЭтапПроверки(Объект,"Форма должна иметь вид приближенный к типовым формам 1С документов");
	ДобавитьЭтапПроверки(Объект,"В командной панели действий формы должно быть доступно по кнопке Перейти структура");
	ДобавитьЭтапПроверки(Объект,"На форме должны заполняться основные значения");
	ДобавитьЭтапПроверки(Объект,"Возможность изменения  табличной части");
	ДобавитьЭтапПроверки(Объект,"Обязательные для заполнения реквизиты выделены красным");
	ДобавитьЭтапПроверки(Объект,"У полей реквизитов должны быть стандартные кнопки открытия и выбора");
	ДобавитьЭтапПроверки(Объект,"Обработки заполнения тч выведены в командную панель в подменю");
	
	//печатная форма документа
	ДобавитьЭтапПроверки(Объект,"Не должны формироваться для модифицированного документа");
	ДобавитьЭтапПроверки(Объект,"Печатная форма должна соответствовать приложению к тех заданию");
	ДобавитьЭтапПроверки(Объект,"Должен быть выдержан шрифт и оформление согласно тех заданию");
	ДобавитьЭтапПроверки(Объект,"Все нужные поля должны быть заполнены исходя из данных документа.");
	ДобавитьЭтапПроверки(Объект,"Сохранение параметров печати");
	
	//проведение документа
	ДобавитьЭтапПроверки(Объект,"При проведении документа должна происходить проверка обязательно заполненных полей");
	ДобавитьЭтапПроверки(Объект,"Движения документа должны удаляться при отмене проведения документа");
	ДобавитьЭтапПроверки(Объект,"Движения документа должны меняться при проведении документа");
	ДобавитьЭтапПроверки(Объект,"При нажатии кнопки Записать проведенного документа");
	
	//ввод на основании
	ДобавитьЭтапПроверки(Объект,"Проверить создание документа на основании других документов");
	ДобавитьЭтапПроверки(Объект,"Проверить создание других документов на основании текущего");
	
	ДобавитьЭтапПроверки(Объект,"Наличие справки");
	
	Объект.Записать();
	
	
	// ОТЧЕТ
	
	НаименованиеСценария = "Блок тестирования Отчет";
	НайденнаяСсылка = Справочники.СценарииТестированияОбъектов.НайтиПоНаименованию(НаименованиеСценария);
	Если НайденнаяСсылка.Пустая() Тогда
		Объект = Справочники.СценарииТестированияОбъектов.СоздатьЭлемент();
	Иначе
		Объект = НайденнаяСсылка.ПолучитьОбъект();
		Объект.ЭтапыПроверки.Очистить();
		Объект.ТипичныеОшибки.Очистить();
	КонецЕсли;
	
	Объект.Наименование = НаименованиеСценария;
	
	ДобавитьЭтапПроверки(Объект,"Открытие в интерфейсе с набором ролей фокус-пользователя");
	ДобавитьЭтапПроверки(Объект,"Сохранение и восстановление настроек с возможностью, использования настроек с разных компьютеров");
	ДобавитьЭтапПроверки(Объект,"Наличие в форме отчета всех полей, описанных в тех задании");
	ДобавитьЭтапПроверки(Объект,"Установка параметров");
	ДобавитьЭтапПроверки(Объект,"Группировки");
	ДобавитьЭтапПроверки(Объект,"Сортировка");
	ДобавитьЭтапПроверки(Объект,"Отборы");
	ДобавитьЭтапПроверки(Объект,"Просчитать данные в строке отчета на примере разных вариантов поведения, описанных в техническом задании");
	ДобавитьЭтапПроверки(Объект,"Проверить формат вывода чисел или других полей");
	ДобавитьЭтапПроверки(Объект,"Проверить наличие и правильную работу расшифровки отчета");
	
	Объект.Записать();
	
	
	// ОБРАБОТКА
	
	НаименованиеСценария = "Блок тестирования Обработка";
	НайденнаяСсылка = Справочники.СценарииТестированияОбъектов.НайтиПоНаименованию(НаименованиеСценария);
	Если НайденнаяСсылка.Пустая() Тогда
		Объект = Справочники.СценарииТестированияОбъектов.СоздатьЭлемент();
	Иначе
		Объект = НайденнаяСсылка.ПолучитьОбъект();
		Объект.ЭтапыПроверки.Очистить();
		Объект.ТипичныеОшибки.Очистить();
	КонецЕсли;
	
	Объект.Наименование = НаименованиеСценария;
	
	ДобавитьЭтапПроверки(Объект,"Сохранение и восстановление настроек с возможностью, использования настроек с разных компьютеров");
	ДобавитьЭтапПроверки(Объект,"Удобство использования");
	ДобавитьЭтапПроверки(Объект,"Пользователю даны права доступа на сам объект и объекты используемые обработкой");
	
	Объект.Записать();
	
	// АПК:1297-вкл Отключение проверки локализованной строки
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_2_25() Экспорт

	// Заполнение в типах объектов метаданных типов модулей
	Выборка = Справочники.ТипОбъектаМетаданных.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// заполнение реквизита СоответствиеМодулю
        Об = Выборка.ПолучитьОбъект();
        Об.СоответствиеМодулю = ОпределитьСоответствиеТипаОбъектаМетаданных(Выборка.Ссылка);
        Об.СоответствиеМодулюАнгл = ОпределитьСоответствиеТипаОбъектаМетаданныхАнгл(Выборка.Ссылка);						
		Об.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_7_4() Экспорт

	// Заполнение в типах объектов метаданных типов модулей
	ПерейтиНаВерсию_1_0_2_25();
	
	// Заполнение в типах объектов метаданных типов модулей
	Выборка = Справочники.ТипОбъектаМетаданных.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// заполнение типов модулей по умолчанию
		Если Выборка.ТипыМодулейПоУмолчанию.Количество()<>0 Тогда
			Продолжить;
		КонецЕсли;
		
		Об = Выборка.ПолучитьОбъект();
		
		Если Выборка.Ссылка = Справочники.ТипОбъектаМетаданных.КритерийОтбора Тогда
			
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.МодульМенеджера;
			
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.ФормаСписка;
			
			НовСтр = Об.ТипыМодулейПоУмолчанию.Добавить();
			НовСтр.ТипМодуля = Справочники.ТипыМодулей.ФормаЭлемента;
			
		КонецЕсли;
		
		Об.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_8_1() Экспорт

	// заполнение имени сервера SQL
	Выборка = Справочники.СписокИнформационныхБаз1С.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ТипРасположенияИБ=0 Тогда
			// сервер
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.ИмяБазыНаСервереSQL = Объект.ИмяБазыНаСервере;
			Объект.ИмяФайлаВыгрузки = Объект.ИмяБазыНаСервере+".bak";
			Объект.Записать();
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ПерейтиНаВерсию_1_0_7_6()

Процедура ПерейтиНаВерсию_1_0_8_3() Экспорт

	// перезапись проектов для возможности создания доп.реквизитов
	Выборка = Справочники.Проекты.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ОбъектДанных = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектДанных.Записать();
	
	КонецЦикла;	

КонецПроцедуры

Процедура ПерейтиНаВерсию_1_1_0_1() Экспорт

	// копирование логина и пароля учетных записей
	Выборка = Справочники.УчетныеЗаписиЭлектроннойПочты.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Пользователь <> "" 
			И Выборка.ПользовательSMTP = "" Тогда
			ОбъектДанных = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектДанных.ПользовательSMTP = Выборка.Пользователь;
			//ОбъектДанных.ПарольSMTP = Выборка.Пароль;
			ОбъектДанных.Записать();
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПерейтиНаВерсию_1_1_0_3() Экспорт

	Выборка = Задачи.ЗадачиПользователя.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.СрокИсполненияСтрока="" Тогда
			ОбъектДанных = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектДанных.СрокИсполненияСтрока = Формат(Выборка.СрокИсполнения, "ДФ=dd.MM.yyyy");
			ОбъектДанных.ОбменДанными.Загрузка=Истина;
			ОбъектДанных.Записать();
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПерейтиНаВерсию_1_1_1_3() Экспорт

	Выборка = Справочники.ОбъектыМетаданныхКонфигураций.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ДатаДобавления='00010101' Тогда
			ОбъектДанных = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектДанных.ДатаДобавления = ПолучитьДатуПервогоИспользованияОбъектаМетаданных(Выборка.Ссылка);
			ОбъектДанных.ОбменДанными.Загрузка=Истина;
			ОбъектДанных.Записать();
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПерейтиНаВерсию_1_1_2_2() Экспорт

	Выборка = Справочники.Проекты.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не Выборка.ПометкаУдаления Тогда
			ОбъектДанных = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектДанных.Актуальность = Истина;
			ОбъектДанных.ОбменДанными.Загрузка=Истина;
			ОбъектДанных.Записать();
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПерейтиНаВерсию_1_1_3_5() Экспорт

	Выборка = Задачи.ЗадачиПользователя.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не Выборка.ПометкаУдаления Тогда
			ОбъектДанных = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектДанных.ОбменДанными.Загрузка=Истина;
			
			// Текущие согласователи 
			ОбъектДанных.РабочаяГруппаСтрока=""; сч=0;
			Для каждого стр Из ОбъектДанных.РабочаяГруппа Цикл
				сч=сч+1;
				Если Не стр.Пользователь.Пустая() Тогда
					ОбъектДанных.РабочаяГруппаСтрока = ОбъектДанных.РабочаяГруппаСтрока + стр.Пользователь + ?(сч=ОбъектДанных.РабочаяГруппа.Количество(),"","; "); 
				КонецЕсли;
			КонецЦикла;
			
			ОбъектДанных.Записать();
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПерейтиНаВерсию_1_1_4_2() Экспорт 
	
	ОбъектПроект = Справочники.Проекты.ИзбранныеПроекты.ПолучитьОбъект();	
	ОбъектПроект.Актуальность = Истина;
	ОбъектПроект.Записать();
	
	ОбъектПроект = Справочники.Проекты.БезПроекта.ПолучитьОбъект();	
	ОбъектПроект.Актуальность = Истина;
	ОбъектПроект.Записать();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_1_5_2() Экспорт 
	
	// Очистка ошибочных записей регистра сведений ИсторияСобытийЗадач
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсторияСобытийЗадач.Задача,
	               |	ИсторияСобытийЗадач.ДатаСобытия,
	               |	ИсторияСобытийЗадач.Пользователь,
	               |	ИсторияСобытийЗадач.Событие
	               |ИЗ
	               |	РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
	               |ГДЕ
	               |	ИсторияСобытийЗадач.Задача = ЗНАЧЕНИЕ(Задача.ЗадачиПользователя.ПустаяСсылка)";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		МенеджерЗаписи = РегистрыСведений.ИсторияСобытийЗадач.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задача = Задачи.ЗадачиПользователя.ПустаяСсылка();
		МенеджерЗаписи.ДатаСобытия = Выборка.ДатаСобытия;
		МенеджерЗаписи.Пользователь = Выборка.Пользователь;
		МенеджерЗаписи.Событие = Выборка.Событие;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_1_6_1() Экспорт 
	
	ОбъектПроект = Справочники.Проекты.БезПроекта.ПолучитьОбъект();	
	ОбъектПроект.Актуальность = Истина;
	ОбъектПроект.Записать();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_2_5_1() Экспорт 
	
	// заполнение затраченного времени у выполненных задач
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачиПользователя.Ссылка,
	               |	ЗадачиПользователя.Трудоемкость,
	               |	ЗадачиПользователя.Выполнена,
	               |	ЗадачиПользователя.ДатаВыполнения,
	               |	ЗадачиПользователя.Исполнитель
	               |ИЗ
	               |	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	               |ГДЕ
	               |	ЗадачиПользователя.Выполнена
	               |	И ЗадачиПользователя.Трудоемкость > 0";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НаборЗаписей = РегистрыСведений.ЗатраченноеВремяПоЗадачам.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();	
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Исполнитель.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ЗатраченноеВремяПоЗадачам.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.ДатаВыполнения;
		МенеджерЗаписи.Задача = Выборка.Ссылка;
		МенеджерЗаписи.Исполнитель = Выборка.Исполнитель;
		МенеджерЗаписи.ВидРаботы = Справочники.ВидыРабот.РаботаПоЗадаче;
		МенеджерЗаписи.ЗатраченноеВремя = Выборка.Трудоемкость;
		МенеджерЗаписи.АвторФиксацииВремени = Выборка.Исполнитель;
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_2_10_1() Экспорт 
	
	// Координатор выполнения задач
	РольКоординаторЗадач = Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения;
	
	Если РольКоординаторЗадач.Назначение.Количество()=0 Тогда
		// Для возможности выбора координатора задач необходимо наличие заполненной таблицы "Назначение"
		ОбъектРольКоординаторЗадач = РольКоординаторЗадач.ПолучитьОбъект();
		НовСтрока = ОбъектРольКоординаторЗадач.Назначение.Добавить();
		НовСтрока.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ОбъектРольКоординаторЗадач.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеБазовогоСценарияОбработкиЗадач() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.СценарииОбработкиЗадач.ЗаполнитьБазовыйСценарийОбработки(Справочники.СценарииОбработкиЗадач.БазовыйСценарийЗадач);
	
	// заполнить состояния
	ОбъектСостояние = Справочники.СостоянияЗадач.Зарегистрирована.ПолучитьОбъект();
	ОбъектСостояние.ЦветФонаСостояния = ЗначениеВСтрокуВнутр(Новый Цвет(244,236,197));
	ОбъектСостояние.Записать();
	
	ОбъектСостояние = Справочники.СостоянияЗадач.ВРаботе.ПолучитьОбъект();
	ОбъектСостояние.ЦветФонаСостояния = ЗначениеВСтрокуВнутр(Новый Цвет(255,255,224));
	ОбъектСостояние.УчитыватьПриРасчетеВремениВыполнения = Истина;
	ОбъектСостояние.Записать();
	
КонецПроцедуры

Процедура ЗаполнениеТекущегоСостоянияЗадач_1_2_17_1() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка КАК Ссылка,
	|	ЗадачиПользователя.Выполнена КАК Выполнена,
	|	ЗадачиПользователя.ПринятаКИсполнению КАК ПринятаКИсполнению,
	|	ЗадачиПользователя.ОтмененаЗадача КАК ОтмененаЗадача
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияЗадач КАК ТекущиеСостоянияЗадач
	|		ПО ТекущиеСостоянияЗадач.Задача = ЗадачиПользователя.Ссылка
	|ГДЕ
	|	ТекущиеСостоянияЗадач.Задача ЕСТЬ NULL";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Состояние = Справочники.СостоянияЗадач.Выполнена;
		
		Если Не Выборка.Выполнена И Выборка.ПринятаКИсполнению Тогда
			Состояние = Справочники.СостоянияЗадач.ВРаботе;
		ИначеЕсли Не Выборка.Выполнена Тогда
			Состояние = Справочники.СостоянияЗадач.Зарегистрирована;
		ИначеЕсли Выборка.ОтмененаЗадача Тогда
			Состояние = Справочники.СостоянияЗадач.ОтмененоВыполнение;
		КонецЕсли;
		
		РегистрыСведений.ТекущиеСостоянияЗадач.ОбновитьТекущееСостояниеЗадачи(Выборка.Ссылка,Состояние,,НСтр("ru = 'Обновлено автоматически при переходе на версию 1.2.17.1'"));
	
	КонецЦикла;

КонецПроцедуры

Процедура ПерейтиНаВерсию_1_2_19_1() Экспорт 
	
	// заполнение реквизита "Получатель услуг" в задачах
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачиПользователя.Ссылка КАК Ссылка,
	               |	ЗадачиПользователя.Инициатор КАК Инициатор,
	               |	ЗадачиПользователя.ПолучательУслуг КАК ПолучательУслуг
	               |ИЗ
	               |	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	               |ГДЕ
	               |	ЗадачиПользователя.ПолучательУслуг = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |	И ЗадачиПользователя.Инициатор <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ОбъектЗадача = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектЗадача.ПолучательУслуг = Выборка.Инициатор;
		ОбъектЗадача.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеНастроекДоступностиПоСостояниюЗадачи() Экспорт 
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	// порядок состояния задач
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СостоянияЗадач.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СостоянияЗадач КАК СостоянияЗадач
	|ГДЕ
	|	СостоянияЗадач.РеквизитДопУпорядочивания = 0";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСостояния = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Ссылка = Справочники.СостоянияЗадач.Зарегистрирована Тогда
			 ОбъектСостояния.РеквизитДопУпорядочивания = 1;
		ИначеЕсли Выборка.Ссылка = Справочники.СостоянияЗадач.Согласование Тогда
			 ОбъектСостояния.РеквизитДопУпорядочивания = 2;
		ИначеЕсли Выборка.Ссылка = Справочники.СостоянияЗадач.ФормированиеТехническогоРешения Тогда
			 ОбъектСостояния.РеквизитДопУпорядочивания = 3;
		ИначеЕсли Выборка.Ссылка = Справочники.СостоянияЗадач.ВРаботе Тогда
			 ОбъектСостояния.РеквизитДопУпорядочивания = 4;
		ИначеЕсли Выборка.Ссылка = Справочники.СостоянияЗадач.НаБизнесТестировании Тогда
			 ОбъектСостояния.РеквизитДопУпорядочивания = 5;
		ИначеЕсли Выборка.Ссылка = Справочники.СостоянияЗадач.Приостановлена Тогда
			 ОбъектСостояния.РеквизитДопУпорядочивания = 6;
		ИначеЕсли Выборка.Ссылка = Справочники.СостоянияЗадач.НаУточнении Тогда
			 ОбъектСостояния.РеквизитДопУпорядочивания = 7;
		ИначеЕсли Выборка.Ссылка = Справочники.СостоянияЗадач.ОжиданиеПереносаИзменений Тогда
			 ОбъектСостояния.РеквизитДопУпорядочивания = 8;
		ИначеЕсли Выборка.Ссылка = Справочники.СостоянияЗадач.Выполнена Тогда
			 ОбъектСостояния.РеквизитДопУпорядочивания = 9;
		ИначеЕсли Выборка.Ссылка = Справочники.СостоянияЗадач.ОтмененоВыполнение Тогда
			 ОбъектСостояния.РеквизитДопУпорядочивания = 10;
		КонецЕсли;
		
		Если ОбъектСостояния.РеквизитДопУпорядочивания > 0 Тогда
			ОбъектСостояния.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// заполнить настройки доступности по умолчанию
	Для каждого ТекТипПользователя Из Перечисления.ТипыПользователейЗадач Цикл
	
		СуществующаяДоступностьПоСостоянию = Справочники.НастройкиДоступностиПоСостояниюЗадачи.НайтиПоРеквизиту("ТипПользователяЗадач", ТекТипПользователя);
		Если ЗначениеЗаполнено(СуществующаяДоступностьПоСостоянию) Тогда
			Продолжить;	
		КонецЕсли;
		
		ОбъектДоступностиПоСостоянию = Справочники.НастройкиДоступностиПоСостояниюЗадачи.СоздатьЭлемент();
		ОбъектДоступностиПоСостоянию.Наименование = "" + ТекТипПользователя;
		ОбъектДоступностиПоСостоянию.ТипПользователяЗадач = ТекТипПользователя;
		ОбъектДоступностиПоСостоянию.ПоВсемПроектам = Истина;
		
		Справочники.НастройкиДоступностиПоСостояниюЗадачи.СценарийПоУмолчаниюДляТипаПользователяЗадач(ОбъектДоступностиПоСостоянию, ТекТипПользователя);
		
		Если ТекТипПользователя = Перечисления.ТипыПользователейЗадач.ИнициаторПолучательУслуг 
			Или ТекТипПользователя = Перечисления.ТипыПользователейЗадач.Исполнитель Тогда	
			
			// участники Все пользователи
			СтрокаИспользования = ОбъектДоступностиПоСостоянию.ИспользоватьДля.Добавить();
			СтрокаИспользования.Участник = Справочники.ГруппыПользователей.ВсеПользователи;
			
		КонецЕсли;
		
		ОбъектДоступностиПоСостоянию.Комментарий = НСтр("ru = '#Настройки по-умолчанию'");        
		
		ОбъектДоступностиПоСостоянию.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеУзлаОбмена() Экспорт
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	// Сформировать идентификатор узла обмена планах обмена РИБ.
	Выборка = ПланыОбмена.ОбменВРаспределеннойИнформационнойБазе.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ИдентификаторУзла <> ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектПланОбмена = Выборка.ПолучитьОбъект();
		ОбъектПланОбмена.ИдентификаторУзла = Новый УникальныйИдентификатор;
		ОбъектПланОбмена.Записать();
		
	КонецЦикла;
	
	
	// Заполнить узел обмена в задачах.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.УзелОбмена = &ПустойУзелОбмена";
	
	Запрос.УстановитьПараметр("ПустойУзелОбмена", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	// все задачи фиксируем по текущему узлу
	ТекущийУзелОбмена = ОбщегоНазначенияКупоросСервер.ЭтотУзелОбменаДляКупорос();
	
	Пока Выборка.Следующий() Цикл
	
		ОбъектЗадача = Выборка.Ссылка.ПолучитьОбъект();
		
		ОбъектЗадача.ОбменДанными.Загрузка = Истина;
		ОбъектЗадача.УзелОбмена = ТекущийУзелОбмена;
		
		ОбъектЗадача.Записать();
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_8_6() Экспорт 
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	// заполнение настройки доступности по-умолчанию "Оценка"
	Выборка = Справочники.НастройкиДоступностиПоСостояниюЗадачи.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НайденнаяОценка = Выборка.НастройкиДоступности.Найти("Оценка", "ИмяПоляКоманды");
		Если НайденнаяОценка <> Неопределено Тогда
			// если уже ранее была добавлена
			Продолжить;
		КонецЕсли;
		
		ОбъектДоступностиПоСостоянию = Выборка.ПолучитьОбъект();
		
		// обновить доступность
		Справочники.НастройкиДоступностиПоСостояниюЗадачи.ОбновитьНаСценарийПоУмолчаниюДляИмяПоляКоманды(ОбъектДоступностиПоСостоянию, Выборка.ТипПользователяЗадач, "Оценка");
		
		ОбъектДоступностиПоСостоянию.Записать();
	
	КонецЦикла;
	
	// заполнение настройки доступности по-умолчанию "ВидЗадачи"
	Выборка = Справочники.НастройкиДоступностиПоСостояниюЗадачи.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НайденнаяОценка = Выборка.НастройкиДоступности.Найти("ВидЗадачи", "ИмяПоляКоманды");
		Если НайденнаяОценка <> Неопределено Тогда
			// если уже ранее была добавлена
			Продолжить;
		КонецЕсли;
		
		ОбъектДоступностиПоСостоянию = Выборка.ПолучитьОбъект();
		
		// обновить доступность
		Справочники.НастройкиДоступностиПоСостояниюЗадачи.ОбновитьНаСценарийПоУмолчаниюДляИмяПоляКоманды(ОбъектДоступностиПоСостоянию, Выборка.ТипПользователяЗадач, "ВидЗадачи");
		
		ОбъектДоступностиПоСостоянию.Записать();
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_16_1() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение реквизита Спринт в документе Приоритизация.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриоритизацияЗадач.Ссылка,
		|	ПриоритизацияЗадач.Спринт
		|ИЗ
		|	Документ.ПриоритизацияЗадач КАК ПриоритизацияЗадач
		|ГДЕ
		|	ПриоритизацияЗадач.Спринт = ЗНАЧЕНИЕ(Справочник.Спринты.ПустаяСсылка)
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритизацияЗадач.Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		ОбъектПриоритизация = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		// определение спринта
		ПараметрыСпринта = Новый Структура("ДатаНачала, ТипСпринта", ОбъектПриоритизация.Дата, Перечисления.ТипыСпринтов.Месяц);
		ОбъектПриоритизация.Спринт = НайтиСоздатьСпринт(ПараметрыСпринта);
		
		ОбъектПриоритизация.Записать();
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_23_6() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение реквизита Пользователь в справочнике Имена пользователей.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИменаПользователей.Ссылка КАК Ссылка,
		|	ИменаПользователей.Пользователь КАК Пользователь,
		|	ИменаПользователей.Email КАК Email,
		|	ИменаПользователей.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ИменаПользователей КАК ИменаПользователей
		|ГДЕ
		|	ИменаПользователей.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И НЕ ИменаПользователей.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Email", ВыборкаДетальныеЗаписи.Email);
		
		РезультатПоискаПользователя = РаботаСоСтруктуройКаталоговAD.НайтиПользователя(ПараметрыПоиска);
		НайденныйПользователь = РезультатПоискаПользователя.Пользователь;
		
		Если Не ЗначениеЗаполнено(НайденныйПользователь) Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
			РезультатПоискаПользователя = РаботаСоСтруктуройКаталоговAD.НайтиПользователя(ПараметрыПоиска);
			НайденныйПользователь = РезультатПоискаПользователя.Пользователь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НайденныйПользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		// Фиксируем в справочнике Пользователи.
		ОбъектПользователь = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектПользователь.Пользователь = НайденныйПользователь; 
		
		ОбъектПользователь.Записать();
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_23_8() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение реквизита Пользователь в справочнике Имена пользователей.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИменаПользователей.Ссылка КАК Ссылка,
		|	ИменаПользователей.Пользователь КАК Пользователь,
		|	ИменаПользователей.Email КАК Email,
		|	ИменаПользователей.Наименование КАК Наименование,
		|	ИменаПользователей.УчетнаяЗаписьWindows КАК УчетнаяЗаписьWindows
		|ИЗ
		|	Справочник.ИменаПользователей КАК ИменаПользователей
		|ГДЕ
		|	НЕ ИменаПользователей.ПометкаУдаления
		|	И ИменаПользователей.ПользовательОС = """"
		|	И ИменаПользователей.ПринадлежитКAD
		|	И ИменаПользователей.УчетнаяЗаписьWindows <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// Фиксируем в справочнике Пользователи.
		ОбъектПользователь = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		// BSLLS:UsingHardcodePath-off
		ОбъектПользователь.ПользовательОС = СтрШаблон("\\%1\%2", Константы.ДоменПредприятия.Получить(), ВыборкаДетальныеЗаписи.УчетнаяЗаписьWindows); 
		// BSLLS:UsingHardcodePath-on
		
		ОбъектПользователь.Записать();
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_23_3() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление методов Телеграм
	РегистрыСведений.ТелеграмМетоды.ЗагрузитьСлепок("Обновление20220823", Ложь);
		
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_30_2() Экспорт

	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Интеграции.Ссылка КАК Ссылка,
	               |	Интеграции.ТочкиИнтеграции КАК ТочкиИнтеграции,
	               |	Интеграции.СписокТочекИнтеграции.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		ИнициаторОбмена КАК ИнициаторОбмена,
	               |		НаправлениеПотокаДанных КАК НаправлениеПотокаДанных,
	               |		МетодВызова КАК МетодВызова,
	               |		ТочкаИнтеграции КАК ТочкаИнтеграции,
	               |		Описание КАК Описание
	               |	) КАК СписокТочекИнтеграции
	               |ИЗ
	               |	Справочник.Интеграции КАК Интеграции
	               |ГДЕ
	               |	Интеграции.ТочкиИнтеграции = """"
	               |	И НЕ Интеграции.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаСписокТочекИнтеграции = Выборка.СписокТочекИнтеграции.Выбрать();
		Если ВыборкаСписокТочекИнтеграции.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСправочника.Записать();
	
	КонецЦикла;

КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьСоответствиеТипаОбъектаМетаданных(Ссылка) 
	
	Если Ссылка = Справочники.ТипОбъектаМетаданных.МодульСеанса Тогда 		Возврат "МодульСеанса";
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.МодульВнешнегоСоединения Тогда	Возврат "МодульВнешнегоСоединения";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.МодульУправляемогоРежима Тогда	Возврат "МодульУправляемогоПриложения";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.МодульОбычногоРежима Тогда	Возврат "МодульОбычногоПриложения";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ОбщийМодуль Тогда	Возврат "ОбщийМодуль";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ОбщийРеквизит Тогда	Возврат "ОбщийРеквизит";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Роль Тогда	Возврат "Роль";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ПланОбмена Тогда	Возврат "ПланОбмена";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ОбщаяФорма Тогда	Возврат "ОбщаяФорма";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ОбщаяКоманда Тогда	Возврат "ОбщаяКоманда";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Константа Тогда	Возврат "Константа";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Справочник Тогда	Возврат "Справочник";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Документ Тогда	Возврат "Документ";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Перечисление Тогда	Возврат "Перечисление";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Отчет Тогда	Возврат "Отчет";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Обработка Тогда	Возврат "Обработка";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ПланВидовХарактеристик Тогда	Возврат "ПланВидовХарактеристик";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ПланСчетов Тогда	Возврат "ПланСчетов";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ПланВидовРасчета Тогда	Возврат "ПланВидовРасчета";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.РегистрСведений Тогда	Возврат "РегистрСведений";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.РегистрНакопления Тогда	Возврат "РегистрНакопления";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.РегистрБухгалтерии Тогда	Возврат "РегистрБухгалтерии";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.РегистрРасчета Тогда	Возврат "РегистрРасчета";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.БизнесПроцесс Тогда	Возврат "БизнесПроцесс";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Задача Тогда	Возврат "Задача";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ЖурналДокументов Тогда	Возврат "ЖурналДокументов";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.WebСервисы Тогда	Возврат "WebСервисы";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.КритерийОтбора Тогда	Возврат "КритерийОтбора";	
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ОпределитьСоответствиеТипаОбъектаМетаданныхАнгл(Ссылка) 
	
	Если Ссылка = Справочники.ТипОбъектаМетаданных.МодульСеанса Тогда 		Возврат "SessionModule";
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.МодульВнешнегоСоединения Тогда	Возврат "ExternalConnectionModule";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.МодульУправляемогоРежима Тогда	Возврат "ManagedApplicationModule";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.МодульОбычногоРежима Тогда	Возврат "OrdinaryApplicationModule";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ОбщийМодуль Тогда	Возврат "CommonModule";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ОбщийРеквизит Тогда	Возврат "ОбщийРеквизит";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Роль Тогда	Возврат "Role";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ПланОбмена Тогда	Возврат "ExchangePlan";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ОбщаяФорма Тогда	Возврат "CommonForm";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ОбщаяКоманда Тогда	Возврат "CommonCommand";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Константа Тогда	Возврат "Constant";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Справочник Тогда	Возврат "Catalog";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Документ Тогда	Возврат "Document";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Перечисление Тогда	Возврат "Enum";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Отчет Тогда	Возврат "Report";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Обработка Тогда	Возврат "DataProcessor";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ПланВидовХарактеристик Тогда	Возврат "ChartOfCharacteristicTypes";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ПланСчетов Тогда	Возврат "ChartOfAccounts";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ПланВидовРасчета Тогда	Возврат "ChartOfCalculationTypes";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.РегистрСведений Тогда	Возврат "InformationRegister";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.РегистрНакопления Тогда	Возврат "AccumulationRegister";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.РегистрБухгалтерии Тогда	Возврат "AccountingRegister";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.РегистрРасчета Тогда	Возврат "CalculationRegister";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.БизнесПроцесс Тогда	Возврат "BusinessProcess";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.Задача Тогда	Возврат "Task";	
	ИначеЕсли Ссылка = Справочники.ТипОбъектаМетаданных.ЖурналДокументов Тогда	Возврат "DocumentJournal";	
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ДобавитьЭтапПроверкиОбъектов(Наименование, НаименованиеПолное, КомментарийПоПроверке, ТипИнцидента = "")

	НайденнаяСсылка = Справочники.ЭтапыПроверкиОбъектов.НайтиПоНаименованию(Наименование);
	Если НайденнаяСсылка.Пустая() Тогда
		Об = Справочники.ЭтапыПроверкиОбъектов.СоздатьЭлемент();	
	Иначе
		Об = НайденнаяСсылка.ПолучитьОбъект();
		Об.Заблокировать();
	КонецЕсли;
	
	Об.Наименование = Наименование;
	Об.ПолноеНаименование = ?(НаименованиеПолное="",Наименование,НаименованиеПолное);
	Об.КомментарийПоПроверке = КомментарийПоПроверке;
	Об.ТипИнцидента = ТипИнцидента;	
	Об.Записать();
	
КонецПроцедуры

Процедура ДобавитьЭтапПроверки(Объект,ЭтапПроверкиНаименование)

	СтрокаДанных = Объект.ЭтапыПроверки.Добавить();
	СтрокаДанных.ЭтапПроверки = Справочники.ЭтапыПроверкиОбъектов.НайтиПоНаименованию(ЭтапПроверкиНаименование);

КонецПроцедуры

Процедура ДобавитьТипичнуюОшибку(Объект,ТипичнаяОшибка,КомментарийТипичнойОшибки)

	СтрокаДанных = Объект.ТипичныеОшибки.Добавить();
	СтрокаДанных.ОписаниеОшибки    = ТипичнаяОшибка;
	СтрокаДанных.КомментарийОшибки = КомментарийТипичнойОшибки;

КонецПроцедуры

Функция ПолучитьДатуПервогоИспользованияОбъектаМетаданных(ОбъектМетаданныхКонфигурации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	МИНИМУМ(УчетВерсийКонфигурации.ВерсияКонфигурации.ДатаОбновления) КАК ДатаОбновления,
	               |	УчетВерсийКонфигурации.ОбъектМетаданных
	               |ИЗ
	               |	РегистрСведений.УчетВерсийКонфигурации КАК УчетВерсийКонфигурации
	               |ГДЕ
	               |	УчетВерсийКонфигурации.ОбъектМетаданных = &ОбъектМетаданных
	               |	И УчетВерсийКонфигурации.ВерсияКонфигурации.ДатаОбновления <> ДАТАВРЕМЯ(1, 1, 1)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УчетВерсийКонфигурации.ОбъектМетаданных";
	
	Запрос.УстановитьПараметр("ОбъектМетаданных", ОбъектМетаданныхКонфигурации);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.ДатаОбновления;
	
	КонецЕсли;
	
	
	Возврат ТекущаяДатаСеанса();	

КонецФункции // ПолучитьДатуПервогоИспользованияОбъектаМетаданных()

Функция НайтиСоздатьСпринт(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Спринты.Ссылка КАК Ссылка,
		|	Спринты.ДатаНачала КАК ДатаНачала,
		|	Спринты.ТипСпринта КАК ТипСпринта
		|ИЗ
		|	Справочник.Спринты КАК Спринты
		|ГДЕ
		|	Спринты.ДатаНачала = &ДатаНачала
		|	И Спринты.ТипСпринта = &ТипСпринта";
	
	Запрос.УстановитьПараметр("ТипСпринта", Параметры.ТипСпринта);
	Запрос.УстановитьПараметр("ДатаНачала", Параметры.ДатаНачала);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СпринтСсылка = Справочники.Спринты.ПустаяСсылка();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпринтСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СпринтСсылка) Тогда
		
		ОбъектСпринт = Справочники.Спринты.СоздатьЭлемент();
		
		ЗаполнитьЗначенияСвойств(ОбъектСпринт, Параметры);
		
		ОбъектСпринт.ДатаОкончания = КонецМесяца(Параметры.ДатаНачала);
		
		ОбъектСпринт.Записать();
		
		СпринтСсылка = ОбъектСпринт.Ссылка;
		
	КонецЕсли;
	
	Возврат СпринтСсылка;
	
КонецФункции

#КонецОбласти
