////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ ПОДСИСТЕМЫ "Учет задач пользователей" (ВЫЗОВ СЕРВЕРА)
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЗАДАЧАМИ

// См. описание РаботаСЗадачами.ЭтоПолноправныйПользовательЗадач()
// 
Функция ЭтоПолноправныйПользовательЗадач() Экспорт

	Возврат РаботаСЗадачами.ЭтоПолноправныйПользовательЗадач();
	
КонецФункции // ЭтоПолноправныйПользовательЗадач()

// Выполнить задачу ЗадачаСсылка, при необходимости выполнив обработчик.
// ОбработкаВыполненияПоУмолчанию модуля менеджера бизнес-процесса, к которому относится задача ЗадачаСсылка.
//
// Параметры:
//  ЗадачаСсылка		 - ЗадачаСсылка.ЗадачиПользователя 
//  ДействиеПоУмолчанию	 - Булево 
//
Процедура ОтменитьЗадачу(ЗадачаСсылка, ДействиеПоУмолчанию = Ложь) Экспорт

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачиПользователя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗадачаСсылка);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
		ЗадачаОбъект.Прочитать();
		Если ДействиеПоУмолчанию И ЗадачаОбъект.БизнесПроцесс <> Неопределено 
			И НЕ ЗадачаОбъект.БизнесПроцесс.Пустая() Тогда
			ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(ЗадачаОбъект.БизнесПроцесс));
			БизнесПроцессы[ТипБизнесПроцесса.Имя].ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка,
				ЗадачаОбъект.БизнесПроцесс, ЗадачаОбъект.ТочкаМаршрута);
		КонецЕсли;
		ЗадачаОбъект.ДатаВыполнения = ТекущаяДатаСеанса();	
		ЗадачаОбъект.Выполнена = Ложь;
		ЗадачаОбъект.ОтмененаЗадача = Истина;  //!
		ЗадачаОбъект.ВыполнитьЗадачу();
		
		Комментарий = НСтр("ru = 'Отменил: %Исполнитель%'");
		Комментарий = СтрЗаменить(Комментарий, "%Исполнитель%", Строка(Пользователи.ТекущийПользователь()));
		ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
			ЗадачаСсылка, 
			Перечисления.ВидыСобытийЗадач.Отменена, 
			Комментарий);
			
		РегистрыСведений.ТекущиеСостоянияЗадач.ОбновитьТекущееСостояниеЗадачи(ЗадачаСсылка,Справочники.СостоянияЗадач.ОтмененоВыполнение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

// Объединение в одну массива задач
//
// Параметры:
//  МассивЗадач	 - Массив - массив ссылок ЗадачаСсылка.ЗадачиПользователя 
//
Процедура ОбъединитьЗадачи(МассивЗадач) Экспорт

	Если МассивЗадач.Количество()<2 Тогда
		Возврат;
	КонецЕсли;	
	
	ДобавляемыйТекстОписания = "";
	ГлавнаяЗадача = Задачи.ЗадачиПользователя.ПустаяСсылка();
	
	Для каждого ТекЗначение Из МассивЗадач Цикл
		
		Если МассивЗадач[0] = ТекЗначение Тогда
			// главная задач
			ГлавнаяЗадача = ТекЗначение;
			Продолжить;
		КонецЕсли;
		
		ТекстКомментария = "Запрос №"+ТекЗначение.Номер+ " с "+Формат(ТекЗначение.ДатаНачала, "ДФ=dd.MM.yyyy")+" по "+Формат(ТекЗначение.СрокИсполнения, "ДФ=dd.MM.yyyy");
		
		ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(110, ДопустимаяДлина.Фиксированная));
		ТекстРазделителя = "// ОБЪЕДИНЕННАЯ ЗАДАЧА"+", " + ТекущаяДатаСеанса() + "   " + Символы.ПС + ТекстКомментария;
		ТекстРазделителя = ТипСтрока.ПривестиЗначение(ТекстРазделителя) + "//";
		ТекстРазделителя = ТекстРазделителя+Символы.ПС + "// Наименование задачи: " + ТекЗначение.Наименование;
		ТекстРазделителя = ТекстРазделителя+Символы.ПС + "// Автор: " + ТекЗначение.Инициатор;
		ТекстРазделителя = ТекстРазделителя+Символы.ПС + "// Исполнитель: " + ТекЗначение.Исполнитель;
		ТекстРазделителя = ТекстРазделителя+Символы.ПС + "// Дата создания: " + ТекЗначение.ДатаНачала;
		ТекстРазделителя = ТекстРазделителя+Символы.ПС + "// Срок исполнения: " + ТекЗначение.СрокИсполнения;
	
		ТекстРазделителя = Символы.ПС + ТекстРазделителя + Символы.ПС + Символы.ПС;
		
		ДобавляемыйТекстОписания = ДобавляемыйТекстОписания + ТекстРазделителя + ТекЗначение.Описание;
		
		// перенос вложенных файлов
		МассивФайловДляПереноса = Новый Массив;
	    РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ТекЗначение, МассивФайловДляПереноса);
		ИзменитьВладельцаФайловНаДругого(МассивФайловДляПереноса, ГлавнаяЗадача);
		
	КонецЦикла;
	
	
	// заполнение нового описания в основной задаче
	ОсновнаяЗадачаОбъект = МассивЗадач[0].ПолучитьОбъект();
	ОсновнаяЗадачаОбъект.Заблокировать();
	ОсновнаяЗадачаОбъект.Описание = ОсновнаяЗадачаОбъект.Описание + ДобавляемыйТекстОписания;
	ОсновнаяЗадачаОбъект.Записать();
	
	// удаление дополнительных задач
	Для каждого ТекЗначение Из МассивЗадач Цикл
		
		Если ОсновнаяЗадачаОбъект.Ссылка=ТекЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектУдаления = ТекЗначение.ПолучитьОбъект();
		ОбъектУдаления.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСЗадачами.ТаблицаИзбранныхПроектовТекущегоПользователя()
//
Функция ТаблицаИзбранныхПроектовТекущегоПользователя() Экспорт

	Возврат РаботаСЗадачами.ТаблицаИзбранныхПроектовТекущегоПользователя();
	
КонецФункции // ТаблицаИзбранныхПроектовТекущегоПользователя()

// См. ТаблицаИзбранныхПроектовТекущегоПользователя()
//
Функция МассивИзбранныхПроектовТекущегоПользователя() Экспорт

	ТаблицаИзбранныхПроектов = ТаблицаИзбранныхПроектовТекущегоПользователя();
	
	Возврат ТаблицаИзбранныхПроектов.ВыгрузитьКолонку("Проект");

КонецФункции // МассивИзбранныхПроектовТекущегоПользователя()


//////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЭЛЕКТРОННОЙ ПОЧТОЙ ЗАДАЧ

// См. РаботаСЗадачами.ОтправитьСообщениеПоЗадачамПользователямВыполнение() 
//
Процедура ОтправитьСообщениеПоЗадачамПользователям(ДанныеЗадачи, ПараметрыУведомленияЗадач, ПараметрыОбсуждения = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Константы.ОтправкаСообщенийПоЗадачамВФоне.Получить() Тогда
		// Формирование фонового задания по отправке электронной почты (для клиент-серверных информационных баз).
		
		Параметры = Новый Массив;
		Параметры.Добавить(ДанныеЗадачи);
		Параметры.Добавить(ПараметрыУведомленияЗадач);
		Параметры.Добавить(ПараметрыОбсуждения);
		
		ФоновыеЗадания.Выполнить("РаботаСЗадачами.ОтправитьСообщениеПоЗадачамПользователямВыполнение",Параметры,,"ОтправкаСообщенийПоЗадачамПользователям");

	Иначе
		
		// стандартное выполнение
		РаботаСЗадачами.ОтправитьСообщениеПоЗадачамПользователямВыполнение(ДанныеЗадачи, ПараметрыУведомленияЗадач, ПараметрыОбсуждения);	
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - Перед открытием формы отправки письма задачи
//
// Параметры:
//  Задача				 - ЗадачаСсылка.ЗадачиПользователя 
//  ПараметрыОтправки    - Структура - см. описание в РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо 
//
Процедура ПередОткрытиемФормыОтправкиПисьмаЗадачи(Задача, ПараметрыОтправки) Экспорт

	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Ссылка, Номер, Наименование, Инициатор");
	
	// - Формирование данных.
	ТемаПисьма = СтрШаблон(НСтр("ru = 'Запрос №%1: %2'"),Формат(РеквизитыЗадачи.Номер, "ЧГ=0"), РеквизитыЗадачи.Наименование);
	
	ТелоПисьма = РаботаСЗадачами.УстановитьТекстHTMLПоля(Задача, Неопределено, Неопределено);
	
	// Доп. подготовка к выводу форматированного документа.
	// не воспринимает теги Table. Добавляем перед tr br
	ТелоПисьма = СтрЗаменить(ТелоПисьма, "<tr>", "<tr><br>");
	// косяки с размерами, поэтому очищаем
	ТелоПисьма = СтрЗаменить(ТелоПисьма, "face=Verdana size=2", "");
	ТелоПисьма = СтрЗаменить(ТелоПисьма, "size=2", "");
	ТелоПисьма = СтрЗаменить(ТелоПисьма, "size=3", "");
	
	АдресОтветаАвтора = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыЗадачи.Инициатор, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя"));
	Если АдресОтветаАвтора <> "" Тогда
		АдресОтвета = АдресОтветаАвтора;
	КонецЕсли;
	
	// адреса инициаторов и рабочей группы
	МассивАдресов = Новый Массив;
	МассивАдресов = РаботаСЗадачами.ДополнитьМассивАдресовИнициаторамиИРабочейГруппойЗадачи(Задача, МассивАдресов, Истина, Истина);
	
	// адреса исполнителей задачи
	МассивАдресов = РаботаСЗадачами.ДополнитьМассивАдресовИсполнителямиЗадачи(Задача, МассивАдресов);
	
	// формирование списка адресов
	СтрокаАдресов = СтрСоединить(МассивАдресов, ";");
	ПриведенныйПочтовыйАдресПолучателей = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СокрЛП(СтрокаАдресов));
	
	// - Заполнение ПараметрыОтправки.
    // из РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма()
	ПараметрыОтправки.Вставить("Отправитель", АдресОтвета);
	ПараметрыОтправки.Вставить("Получатель", ПриведенныйПочтовыйАдресПолучателей);
	ПараметрыОтправки.Вставить("Тема", ТемаПисьма);
	ПараметрыОтправки.Вставить("Текст", ТелоПисьма);
	ПараметрыОтправки.Вставить("Предмет", Задача);
	ПараметрыОтправки.Вставить("НеКонвертироватьВHTML", Истина); // доп.параметр 
	
	РаботаСЗадачами.ДобавитьВложенияВПисьмо(Задача, ПараметрыОтправки, Истина);
	Если ПараметрыОтправки.Свойство("Вложения") Тогда
		ПараметрыОтправки.Вложения = РаботаСПочтовымиСообщениямиСлужебный.ОписанияВложений(ПараметрыОтправки.Вложения);
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФАЙЛАМИ ЗАДАЧ

// Возвращает список присоединенных файлов
//
// Параметры:
//  ВладелецФайла	 - ЗадачаСсылка.ЗадачиПользователя 
// 
// Возвращаемое значение:
//  СписокЗначений - список ссылок СправочникСсылка.ЗадачиПользователяПрисоединенныеФайлы
//
Функция СписокПрисоединенныхФайлов(ВладелецФайла) Экспорт
	
	СписокФайлов = Новый СписокЗначений;
	
	Если ТипЗнч(ВладелецФайла) <> Тип("ЗадачаСсылка.ЗадачиПользователя") Тогда
		Возврат СписокФайлов;
	КонецЕсли;
	
	МетаданныеВладельца = ВладелецФайла.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиПользователяПрисоединенныеФайлы.Ссылка,
	|	ЗадачиПользователяПрисоединенныеФайлы.Наименование,
	|	ЗадачиПользователяПрисоединенныеФайлы.Расширение
	|ИЗ
	|	Справочник.ЗадачиПользователяПрисоединенныеФайлы КАК ЗадачиПользователяПрисоединенныеФайлы
	|ГДЕ
	|	ЗадачиПользователяПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И НЕ ЗадачиПользователяПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗадачиПрисоединенныеФайлы", МетаданныеВладельца.Имя + "ПрисоединенныеФайлы");
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Картинка = КартинкаДляФайла(Выборка.Расширение);
		
		Если Картинка = БиблиотекаКартинок.ФорматНеизвестный Тогда
			
			ПрефиксНазвания = "(" + Выборка.Расширение + ") ";
			
		Иначе
			
			ПрефиксНазвания = "";
			
		КонецЕсли;
		
		НовыйЭлемент = СписокФайлов.Добавить(Выборка.Ссылка, ПрефиксНазвания + Выборка.Наименование, , Картинка);
		
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьВладельцаФайловНаДругого(МассивПрисоединенныхФайлов, НовыйВладелецФайлов)
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого ТекПрисоединенныйФайл Из МассивПрисоединенныхФайлов Цикл
			
			ОбъектПрисоединенныйФайл = ТекПрисоединенныйФайл.ПолучитьОбъект();
			ОбъектПрисоединенныйФайл.Заблокировать();
			ОбъектПрисоединенныйФайл.ВладелецФайла = НовыйВладелецФайлов;
			ОбъектПрисоединенныйФайл.Записать();
			
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Функция КартинкаДляФайла(Расширение)
	
	Если ПустаяСтрока(Расширение) Тогда
		
		Картинка = БиблиотекаКартинок.ФорматПустой;
		
	ИначеЕсли ВРег(Расширение) = "BMP" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматBMP;
		
	ИначеЕсли ВРег(Расширение) = "XLS" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматExcel;
		
	ИначеЕсли ВРег(Расширение) = "XLSX" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматExcel2007;
		
	ИначеЕсли ВРег(Расширение) = "PPT" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматPowerPoint;
		
	ИначеЕсли ВРег(Расширение) = "PPTX" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматPowerPoint2007;
		
	ИначеЕсли ВРег(Расширение) = "GIF" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматGIF;
		
	ИначеЕсли ВРег(Расширение) = "HTM"
		Или ВРег(Расширение) = "HTML" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматHTML;
		
	ИначеЕсли ВРег(Расширение) = "JPG"
		Или ВРег(Расширение) = "JPEG" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматJPG;
		
	ИначеЕсли ВРег(Расширение) = "MXL" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматMXL;
		
	ИначеЕсли ВРег(Расширение) = "PDF" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматPDF;
		
	ИначеЕсли ВРег(Расширение) = "PNG" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматPNG;
		
	ИначеЕсли ВРег(Расширение) = "TIF"
		Или ВРег(Расширение) = "TIFF" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматTIF;
		
	ИначеЕсли ВРег(Расширение) = "TXT" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматTXT;
		
	ИначеЕсли ВРег(Расширение) = "DOC" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматWord;
		
	ИначеЕсли ВРег(Расширение) = "DOCX" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматWord2007;
		
	ИначеЕсли ВРег(Расширение) = "RAR"
		Или ВРег(Расширение) = "ZIP"
		Или ВРег(Расширение) = "7Z" Тогда
		
		Картинка = БиблиотекаКартинок.ФорматАрхив;
		
	Иначе
		
		Картинка = БиблиотекаКартинок.ФорматНеизвестный;
		
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

Функция ВнешняяСсылкаНаОбъект(СсылкаНаОбъект) Экспорт
    
    АдресСервера = Константы.АдресПубликацииИнформационнойБазыВИнтернете.Получить();
    АдресСсылки = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
    ВнешняяСсылка = АдресСервера + "#" + АдресСсылки;
    
    Возврат ВнешняяСсылка;
    
КонецФункции

#КонецОбласти

