////////////////////////////////////////////////////////////////////////////////
// МОНИТОРИНГ РАБОТЫ СИСТЕМЫ, Версия 1.0 от Август 2022
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Регламентное задание. Мониторинг регламентных заданий на ошибки
Процедура МониторингРегламентныхЗаданийНаОшибки() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.МониторингОшибокРегламентныхЗаданий);

	ЗаписьЖурналаРегистрацииРасширенная("Администрирование.МониторингРегламентныхЗаданийНаОшибки", 
			"Начало работы регламентного задания", 
			УровеньЖурналаРегистрации.Информация);
	
		
	КолВоРегламентныхЗаданийСОшибками = 0;
	ЗапускМониторингаРегламентныхЗаданийНаОшибки(КолВоРегламентныхЗаданийСОшибками);
	
	ТекстИнформации = СтрШаблон(НСтр("ru = 'Конец работы регламентного задания. Мониторинг регламентных заданий на ошибки успешно выполнен. Кол-во ошибок: %1'"), 
		КолВоРегламентныхЗаданийСОшибками);
	
	ЗаписьЖурналаРегистрацииРасширенная("Администрирование.МониторингРегламентныхЗаданийНаОшибки", 
			ТекстИнформации, 
			УровеньЖурналаРегистрации.Информация);
	
КонецПроцедуры	

// Быстрая запись в журнал регистрации. Использовать из шаблона разработчика.
//
// Параметры:
//  ИмяСобытияВход				 - Строка - Состоит из <Подразделение>.<Функционал/Процедура> 
//  ТекстОписания				 - Строка - любое текстовое пояснение
//  Уровень						 - УровеньЖурналаРегистрации - для ошибок: УровеньЖурналаРегистрации.Ошибка
//  ВыводитьПредставлениеОшибки	 - Булево - если процедура вызывается в исключении попытки, то устанавливать Истина для вывода информации по ошибке
//
Процедура ЗаписьЖурналаРегистрацииРасширенная(ИмяСобытияВход, ТекстОписания, Уровень, ВыводитьПредставлениеОшибки = Ложь) Экспорт

	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ИмяСобытия = СтрШаблон(НСтр("ru = '%1'", КодЯзыка), ИмяСобытияВход);
	
	Если ВыводитьПредставлениеОшибки Тогда
	
		ТекстКомментария = НСтр("ru = '%1 
                    |%2'", КодЯзыка);

		КомментарийДляЖурнала = СтрШаблон(ТекстКомментария,
									ТекстОписания,	
									ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	Иначе
									
		ТекстКомментария = НСтр("ru = '%1'", КодЯзыка);

		КомментарийДляЖурнала = СтрШаблон(ТекстКомментария,
									ТекстОписания);
	
	КонецЕсли;
									
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень,,, КомментарийДляЖурнала);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МониторингОшибокРегламентныхЗаданий

Процедура ЗапускМониторингаРегламентныхЗаданийНаОшибки(КолВоРегламентныхЗаданийСОшибками = 0)

	СтруктураПараметров = СтруктураПараметровДанныеМониторингаРегламентныхЗаданий();
	
	ЗаполнитьОшибкиВыполненияРегламентныхЗаданий(СтруктураПараметров);
	
	ОтправитьПисьмоОшибкаМониторингаРегламентныхЗаданий(СтруктураПараметров);
	
	КолВоРегламентныхЗаданийСОшибками = СтруктураПараметров.КолВоРегламентныхЗаданийСОшибками; 
	
КонецПроцедуры

// Возвращает структуру параметров для заполнения ошибок выполнения регл.заданий
// 
// Возвращаемое значение:
//  Структура:
//		* ТекущаяДата - Дата
//		* УчетнаяЗаписьПочты - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//		* МассивОшибокРегламентныхЗаданий - Массив - содержит перечень строк всех ошибок по текущим регламентным заданиям
//		* КолВоРегламентныхЗаданийСОшибками - Число
//
Функция СтруктураПараметровДанныеМониторингаРегламентныхЗаданий()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	
	МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	УчетнаяЗапись = МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	СтруктураПараметров.Вставить("УчетнаяЗаписьПочты", УчетнаяЗапись);
	СтруктураПараметров.Вставить("МассивОшибокРегламентныхЗаданий", Новый Массив);
	СтруктураПараметров.Вставить("КолВоРегламентныхЗаданийСОшибками", 0);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ЗаполнитьОшибкиВыполненияРегламентныхЗаданий(СтруктураПараметров)
	
	КолВоРегламентныхЗаданийСОшибками = 0;
	
	СтруктураПараметровРегламентногоЗадания = Новый Структура("Использование", Истина);
	МассивРегламентныхЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураПараметровРегламентногоЗадания);
	Для Каждого ТекРеглЗадание Из МассивРегламентныхЗаданий Цикл
		
		СообщенияОбОшибке = РегламентныеЗаданияСлужебный.СообщенияИОписанияОшибокРегламентногоЗадания(ТекРеглЗадание);
		Если Не ЗначениеЗаполнено(СообщенияОбОшибке) Тогда
			Продолжить;
		КонецЕсли;	
			
		КолВоРегламентныхЗаданийСОшибками = КолВоРегламентныхЗаданийСОшибками + 1;
		
		ТекстДляВставки = СтрШаблон(НСтр("ru = 'Имя регламентного задания ''%1''
			|Текст ошибки ''%2'''"), ТекРеглЗадание.Метаданные.Имя, СообщенияОбОшибке);
		
		СтруктураПараметров.МассивОшибокРегламентныхЗаданий.Добавить(ТекстДляВставки);
		
	КонецЦикла;	

	СтруктураПараметров.КолВоРегламентныхЗаданийСОшибками   = КолВоРегламентныхЗаданийСОшибками;
	
КонецПроцедуры	

// Возвращает имя информационной базы из строки соединения
// 
// Возвращаемое значение:
//  Строка - имя информационной базы
//
Функция ИмяИнформационнойБазы()
	
	СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы) Тогда
	
		Возврат СтрокаСоединенияИнформационнойБазы;	
	
	КонецЕсли;
	
	Позиция = СтрНайти(СтрокаСоединенияИнформационнойБазы, "Ref=""");
	СтрокаИмяИнформационнойБазы = Сред(СтрокаСоединенияИнформационнойБазы, Позиция + 5);
	Позиция = СтрНайти(СтрокаИмяИнформационнойБазы, """");
	ИмяИнформационнойБазы = Лев(СтрокаИмяИнформационнойБазы, Позиция - 1);
	
	Возврат ИмяИнформационнойБазы;

КонецФункции // ИмяИнформационнойБазы()

Процедура ОтправитьПисьмоОшибкаМониторингаРегламентныхЗаданий(СтруктураПараметров)
	
	Если СтруктураПараметров.КолВоРегламентныхЗаданийСОшибками = 0 Тогда
		// выход при отсутствии ошибок
		Возврат;
	КонецЕсли;	
	
	Кому = МассивПользователейДляРассылокОшибокРеглЗаданий();
	
	Если Кому.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекПолучатель Из Кому Цикл
	
		ОтправитьПисьмоПоОшибкамПолучателю(ТекПолучатель, СтруктураПараметров);	
	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОтправитьПисьмоПоОшибкамПолучателю(ТекПолучатель, СтруктураПараметров)
	
	// Формирование текста письма с учетом исключений.
	МассивОшибокДляОтправкиПолучателю = Новый Массив;
	Если ЗначениеЗаполнено(ТекПолучатель.МассивИсключений) Тогда
		
		Для каждого ТекОшибка Из СтруктураПараметров.МассивОшибокРегламентныхЗаданий Цикл
		
			ЕстьВхождения = Ложь;
			Для каждого ТекИсключение Из ТекПолучатель.МассивИсключений Цикл
				
				НайденнаяПозиция = СтрНайти(ТекОшибка, СокрЛП(ТекИсключение));
				Если НайденнаяПозиция > 0 Тогда
					ЕстьВхождения = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЕстьВхождения Тогда
				// Если исключений не найдено, то добавляем для отправки.
				МассивОшибокДляОтправкиПолучателю.Добавить(ТекОшибка);	
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		
		МассивОшибокДляОтправкиПолучателю = СтруктураПараметров.МассивОшибокРегламентныхЗаданий;
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(МассивОшибокДляОтправкиПолучателю)  Тогда
		// Не определено ошибок для отправки получателю.
		Возврат;
	КонецЕсли;
	
	// Формирования текста ошибок регламентных заданий.
	ТекстОшибокРегламентныхЗаданий = "";
	
	Для каждого ТекОшибка Из МассивОшибокДляОтправкиПолучателю Цикл
	
		ТекстОшибокРегламентныхЗаданий = СтрШаблон(НСтр("ru = '%1
			|
			| - 
			|%2'"), ТекстОшибокРегламентныхЗаданий, ТекОшибка);
	
	КонецЦикла;
	
	// Формирование письма.
	ПараметрыПисьма = Новый Структура;
	
	Кому = Новый Массив;
	Кому.Добавить(ТекПолучатель);
	
	ПараметрыПисьма.Вставить("Кому", Кому);
	ПараметрыПисьма.Вставить("Важность", ВажностьИнтернетПочтовогоСообщения.Высокая);
	
	СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	ИмяИнформационнойБазы = ИмяИнформационнойБазы();
	ТемаПисьма = СтрШаблон(НСтр("ru = 'Ошибки (%1) регламентных заданий на [%2]. %3'"), 
		МассивОшибокДляОтправкиПолучателю.Количество(), 
		ИмяИнформационнойБазы, 
		СтруктураПараметров.ТекущаяДата);
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	   
	ТелоПисьма = СтрШаблон(НСтр("ru = '%1 
                                 |- %2'"), СтрокаСоединенияИнформационнойБазы, ТекстОшибокРегламентныхЗаданий);
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	
	ПараметрыПисьма.Вставить("ТипТекста", "ПростойТекст");
	
	// Отправка письма.
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СтруктураПараметров.УчетнаяЗаписьПочты, ПараметрыПисьма);

КонецПроцедуры

// Возвращает массив пользователей для рассылок ошибок регл заданий
// 
// Возвращаемое значение:
//  Массив из Структур:
//		* Представление - Строка
//		* Адрес - Строка
//		* МассивИсключений - Массив - массив заданных исключений для перебора
//
Функция МассивПользователейДляРассылокОшибокРеглЗаданий()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПользователиМониторингаДляРассылок.ТипРассылок КАК ТипРассылок,
	               |	ПользователиМониторингаДляРассылок.Пользователь КАК Пользователь,
	               |	ПользователиМониторингаДляРассылок.СписокИсключений КАК СписокИсключений
	               |ИЗ
	               |	РегистрСведений.ПользователиМониторингаДляРассылок КАК ПользователиМониторингаДляРассылок
	               |ГДЕ
	               |	ПользователиМониторингаДляРассылок.ТипРассылок = ЗНАЧЕНИЕ(Перечисление.ТипыРассылокМониторинга.ОшибкиВыполненияРегламентныхЗаданий)
	               |	И НЕ ПользователиМониторингаДляРассылок.Пользователь.Недействителен
	               |	И НЕ ПользователиМониторингаДляРассылок.Пользователь.ПометкаУдаления";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивРезультата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Выборка.Пользователь, УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));
		
		ДанныеПользователя = Новый Структура;
		ДанныеПользователя.Вставить("Представление", Адрес);
		ДанныеПользователя.Вставить("Адрес", "" + Адрес);
		
		// Анализ на список исключений.
		МассивИсключений = Новый Массив;
		Если ЗначениеЗаполнено(Выборка.СписокИсключений) Тогда
			
			МассивИсключений = СтрРазделить(Выборка.СписокИсключений, ",", Ложь); 
			МассивИсключений = ?(ЗначениеЗаполнено(МассивИсключений), 
				МассивИсключений,
				СтрРазделить(Выборка.СписокИсключений, ";", Ложь));
			
		КонецЕсли;
		
		ДанныеПользователя.Вставить("МассивИсключений", МассивИсключений);
		
		МассивРезультата.Добавить(ДанныеПользователя);
		
	КонецЦикла;
	
	Возврат МассивРезультата;

КонецФункции // МассивПользователейДляРассылокОшибокРеглЗаданий()

#КонецОбласти 

#КонецОбласти
