
#Область ПрограммныйИнтерфейс

//////////////////////////////////////////////////////////////////////////////////////////
// ВНЕШНИЕ ФАЙЛЫ

// Процедура - Показывает присоединенные файлы в контекстном меню
//
// Параметры:
//  Форма			 
//  ВладелецФайла	 - СправочникСсылка.ЗадачиПользователяПрисоединенныеФайлы
//
Процедура ПоказатьПрисоединенныеФайлы(Форма, ВладелецФайла) Экспорт
	
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СписокФайлов = РаботаСЗадачамиВызовСервера.СписокПрисоединенныхФайлов(ВладелецФайла);
	
	Если СписокФайлов.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюСпискаФайлов", ЭтотОбъект, Форма);
	Форма.ПоказатьВыборИзМеню(Оповещение, СписокФайлов, Форма.Элементы.ДекорацияКоличествоФайлов);
	
КонецПроцедуры

// Продолжение по оповещению ПоказатьПрисоединенныеФайлы()
//
// Параметры:
//  Результат	 - ЭлементСпискаЗначений - элемент списка типа СправочникСсылка.ЗадачиПользователяПрисоединенныеФайлы 
//  Параметры	 - Структура 
//
Процедура ПослеВыбораИзМенюСпискаФайлов(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(Результат.Значение, Параметры.УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С БУФЕРОМ ОБМЕНА

// Вставка текст из внешнего буфера обмена
// 
// Возвращаемое значение:
//  Строка - текст из буфера обмена 
//
Функция ВставитьТекстИзБуфераОбмена() Экспорт
	
	#Если ТонкийКлиент Или ТолстыйКлиентУправляемоеПриложение Или ТолстыйКлиентОбычноеПриложение Тогда
    ОбъектБуфер = Новый COMОбъект("htmlfile");
    Текст = ОбъектБуфер.ParentWindow.ClipboardData.getData("Text");
    ОбъектБуфер.Close();
    ОбъектБуфер = Неопределено;
	#Иначе
	Текст = "";	
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на данном клиенте.'");
	#КонецЕсли 
   
    Возврат Текст;
    
КонецФункции

// Процедура копирует текст во внешний буфер обмена Windows
//
// Параметры:
//  Текст	 - Строка - копируемый в буфер текст 
//
Процедура СкопироватьТекстВБуферОбмена(Текст) Экспорт
    
 	#Если ТонкийКлиент Или ТолстыйКлиентУправляемоеПриложение Или ТолстыйКлиентОбычноеПриложение Тогда
	ОбъектБуфер = Новый COMОбъект("htmlfile");
    ОбъектБуфер.ParentWindow.ClipboardData.setData("Text", Текст);
    ОбъектБуфер.Close();
    ОбъектБуфер = Неопределено;
	#Иначе
	Текст = "";	
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на данном клиенте.'");
	#КонецЕсли 
    
КонецПроцедуры

// Процедура - Копирует внешнюю ссылку на объект в буфер-обмена
//
// Параметры:
//  СсылкаНаОбъект	 - ЛюбаяСсылка 
//
Процедура СкопироватьВнешнююСсылкуВБуфер(СсылкаНаОбъект) Экспорт
    
    ВнешняяСсылка = РаботаСЗадачамиВызовСервера.ВнешняяСсылкаНаОбъект(СсылкаНаОбъект);
    СкопироватьТекстВБуферОбмена(ВнешняяСсылка);
    
КонецПроцедуры

// Копирует расширенный результат задачи во внешний буфер обмена по правилам conventionalcommits.org
//
// Параметры:
//  Задача  - ЗадачаОбъект.ЗадачиПользователя
//
Процедура СкопироватьРасширенноеОписаниеРезультатаЗадачиВБуфер(Задача) Экспорт
    
	ТекстДляБуфераОбмена = НСтр("ru = '%7: %4
                                 |
                                 |--
                                 |Проект: %3%6
                                 |%1 от %2
                                 |Ссылка: %5'");
	
	ТекстВидаЗадачи = ?(ЗначениеЗаполнено(Задача.ВидЗадачи), 
			СтрШаблон(НСтр("ru = ', Вид задачи: %1'"), Задача.ВидЗадачи), 
			"");
			
	СтрокаОписания = Задача.Наименование; 
			
	ТекстОтвета = ?(ЗначениеЗаполнено(Задача.Ответ),
			Задача.Ответ,
			СтрокаОписания);
			
	ТипКоммитаВидаЗадачи = ОбщегоНазначенияКупоросВызовСервера.ЗначениеРеквизитаОбъекта(Задача.ВидЗадачи, "ТипКоммита");
	ТипКоммита = ?(ЗначениеЗаполнено(ТипКоммитаВидаЗадачи), 
		ТипКоммитаВидаЗадачи, 
		"feat");
			
	ТекстДляБуфераОбмена = СтрШаблон(ТекстДляБуфераОбмена,
		Задача.Номер,
		Задача.ДатаНачала,
		Задача.Проект,
		ТекстОтвета,
		ПолучитьНавигационнуюСсылку(Задача.Ссылка),
		ТекстВидаЗадачи,
		ТипКоммита);
	
	СкопироватьТекстВБуферОбмена(ТекстДляБуфераОбмена);

КонецПроцедуры // СкопироватьРасширенноеОписаниеРезультатаЗадачиВБуфер()


//////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЗАДАЧАМИ

Процедура ПереключитьХронометраж(Форма) Экспорт
	
	ПараметрыОповещения = Неопределено;
	СсылкаНаЗадачу = Форма.Объект.Ссылка;

	Форма.ПереключитьХронометражСервер(ПараметрыОповещения);
	ПоказатьОповещение(ПараметрыОповещения, Форма.ВключенХронометраж, СсылкаНаЗадачу);

КонецПроцедуры

// Показать оповещение после записи в отчет
Процедура ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект) Экспорт
	
	// покажем оповещение
	Если ПараметрыОповещения <> Неопределено Тогда 
	
		Если ПараметрыОповещения.Свойство("КлючЗаписи") Тогда
			ТекстОповещения = НСтр("ru = 'Создание:'");
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.КлючЗаписи);
			ПоказатьОповещениеПользователя(ТекстОповещения, НавигационнаяСсылка, ПараметрыОповещения.Представление, БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
		Если ПараметрыОповещения.Свойство("СсылкаНаОтчет") Тогда
			ТекстОповещения = "";
			Если ПараметрыОповещения.СозданОтчет Тогда
				ТекстОповещения = НСтр("ru = 'Создание:'");
			Иначе
				ТекстОповещения = НСтр("ru = 'Изменение:'");
			КонецЕсли;			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.СсылкаНаОтчет);
			ПоказатьОповещениеПользователя(ТекстОповещения, НавигационнаяСсылка, ПараметрыОповещения.ПредставлениеСсылки, БиблиотекаКартинок.Информация32);
		КонецЕсли;	
		
		ПараметрОповещения = Неопределено;
		ПараметрИзменение_ФактическиеТрудозатратыЗадачи = "Изменение_ФактическиеТрудозатратыЗадачи";
		Если ПараметрыОповещения.Свойство(ПараметрИзменение_ФактическиеТрудозатратыЗадачи, ПараметрОповещения) Тогда
			Оповестить(ПараметрИзменение_ФактическиеТрудозатратыЗадачи, ПараметрОповещения);
		КонецЕсли;	
		
		ПараметрОповещения = Неопределено;
		Если ПараметрыОповещения.Свойство("Изменение_ФактическиеТрудозатратыПроектнойЗадачи", ПараметрОповещения) Тогда
			Оповестить("Изменение_ФактическиеТрудозатратыПроектнойЗадачи", ПараметрОповещения);
		КонецЕсли;
		
	ИначеЕсли ВключенХронометраж Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(Объект));
		Состояние(Текст);
		
	ИначеЕсли Не ВключенХронометраж Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выключен хронометраж по ""%1""'"), Строка(Объект));
		Состояние(Текст);
		
		Оповестить(ПараметрИзменение_ФактическиеТрудозатратыЗадачи, ПараметрОповещения, Объект);
		
	Иначе
		
		// Без обработки.
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПрименениеНастроекОграниченияВидимостиПользовательскихПолейДляФормыЗадачи(Форма, НастройкиДоступностиЭлементов) Экспорт

	Для каждого ТекСтрока Из НастройкиДоступностиЭлементов Цикл
	
		// идентификация элемента формы для установки видимости
		НайденныйЭлементФормы = Форма.Элементы.Найти(ТекСтрока.ИмяПоляНаФорме);
		
		Если НайденныйЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ВариантОграниченияНаФормеЗадачи) 
			Или ТекСтрока.ВариантОграниченияНаФормеЗадачи = ПредопределенноеЗначение("Перечисление.ВариантыОграниченияДоступаНаФорме.Видимость") Тогда
			
			НайденныйЭлементФормы.Видимость = ПроверкаНаДоступностьПоля(ТекСтрока.Доступность); 
			
		КонецЕсли;
		
		Если ТекСтрока.ВариантОграниченияНаФормеЗадачи = ПредопределенноеЗначение("Перечисление.ВариантыОграниченияДоступаНаФорме.ТолькоПросмотр") Тогда
			
			Если Тип("ПолеФормы") = ТипЗнч(НайденныйЭлементФормы) Тогда
				НайденныйЭлементФормы.ТолькоПросмотр = Не ПроверкаНаДоступностьПоля(ТекСтрока.Доступность);
			Иначе
				НайденныйЭлементФормы.Доступность = ПроверкаНаДоступностьПоля(ТекСтрока.Доступность); 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;				

КонецПроцедуры

Функция ДоступРазрешенПоНастройкамДоступности(НастройкиДоступностиЭлементов, ИмяЭлементаФормы) Экспорт

	Если НастройкиДоступностиЭлементов.Количество() = 0 Тогда
		// у пустой настройки доступ разрешен для всех случаев
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИмяПоляНаФорме", ИмяЭлементаФормы);
	НайденныеСтроки = НастройкиДоступностиЭлементов.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НайденныеСтроки[0].Доступность = ПредопределенноеЗначение("Перечисление.ДоступностьПолей.Недоступно") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ДоступРазрешенПоНастройкамДоступности()

#Область ДляВызоваИзДругихПодсистем

// См. СтандартныеПодсистемыКлиент.ПриПолученииСерверногоОповещения
Процедура ПриПолученииСерверногоОповещения(ИмяОповещения, Результат) Экспорт
	
	Если ИмяОповещения = "УчетЗадачПользователей.ПроверитьЗадачиБезОценки" Тогда
		
		Оповестить("Обновление_КоличествоЗадачБезОценки", Результат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверкаНаДоступностьПоля(Доступность)

	Возврат Доступность <> ПредопределенноеЗначение("Перечисление.ДоступностьПолей.Недоступно");

КонецФункции 

#КонецОбласти