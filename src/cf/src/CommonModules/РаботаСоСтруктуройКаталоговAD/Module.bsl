////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ ВЗАИМОДЕЙСТВИЯ c Active Directory
//	- Функции добавления пользователей в БД на основе данных AD
//	- Функции работы со списком баз пользователей 1С
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//////////////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНЫЕ ЗАДАНИЯ

// Регламентное задание. Обработчик регламентного задания АктуализацияДанныхИзActiveDirectory.
Процедура АктуализацияДанныхИзActiveDirectory() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АктуализацияДанныхИзActiveDirectory);
	
	ОбновлениеДанныхИзActiveDirectory();
		
КонецПроцедуры

// Регламентное задание. Обработчик регламентного задания ОбновлениеСправочникаСпискаОбщихБазПользователей.
Процедура ОбновлениеСправочникаСпискаОбщихБазПользователей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеСправочникаСпискаОбщихБазПользователей);
	
	// Создание общих баз для новых пользователей AD.
	СозданиеСпискаОбщихБазПользователей();
	
	// Обновление по факту даты изменения справочника "СписокИнформационныхБаз1С".
	ОбновлениеСпискаОбщихБазПользователей();
	
	// Остаточное обновление пользователей общих баз по которым установлен реквизит "ТребуетсяОбновитьСписокИБ".
	ОбновлениеСпискаОбщихБазИзмененныхОбъектовДоступа();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ФУНКЦИИ УПРАВЛЕНИЯ AD

// Основная процедура актуализации данных по пользователям из AD.
//
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, сформировать структуру каталогов
//  РучнойЗапуск  - Булево
//
Процедура ОбновлениеДанныхИзActiveDirectory(Подразделение = "", РучнойЗапуск = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеСетью") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ЗагружатьПользователейИзAD.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на заполненность основных констант домена и пути к корневому каталогу.
	ДоменПредприятия = Константы.ДоменПредприятия.Получить();
	Если ДоменПредприятия = "" Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнен домен предприятия в настройках программы.'"));
		Возврат;
		
	КонецЕсли;
		
	// Индивидуальная работа с таблицей пользователей из AD
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Ссылка,
	               |	СтруктураПредприятия.Наименование КАК Наименование,
	               |	СтруктураПредприятия.ГруппаAD КАК ГруппаAD,
	               |	СтруктураПредприятия.ДобавлятьПользователейАвтоИБ КАК ДобавлятьПользователейАвтоИБ
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ СтруктураПредприятия.Ссылка = &Подразделение
	               |		КОНЕЦ
	               |	И НЕ СтруктураПредприятия.ПометкаУдаления
	               |	И СтруктураПредприятия.ДобавлятьПользователейАвтоИБ
	               |	И СтруктураПредприятия.ГруппаAD <> """"
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СтруктураПредприятия.Наименование ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Подразделение", ?(Подразделение = "", Справочники.СтруктураПредприятия.ПустаяСсылка(), Подразделение));
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Получение данных из AD по пользователям.
		ТаблицаПользователей = ЗаполнитьТаблицуПользователей(Выборка.ГруппаAD, Истина);
		
		// Загрузка пользователей из AD по подразделениям.
		ДобавлениеВСправочникИменаПользователей(ТаблицаПользователей, Выборка.Ссылка);
		
		// Отключение недействительных пользователей.
		ОтключитьНедействительныхПользователей(ТаблицаПользователей, Выборка.Ссылка);
		
		// Актуализация справочника "Группы пользователей AD"
		АктуализацияСправочникаГруппыПользователейAD();
		
		// Установка доступов пользователям в справочнике "Имена пользователей" по данным справочника "Группы пользователей AD".
		УстановитьШаблонДоступаПоГруппеПользователейAD();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу пользователей по строке соединения из справочника "Группы пользователей AD"
//
// Параметры:
//  СтрокаДляСоединения	 - Строка - см. формирование строки соединения в справочнике "Группы пользователей AD"
// 
// Возвращаемое значение:
//   ТаблицаЗначений - содержит колонки:
//		* ADsPath - Строка
//		* Имя - Строка
//		* Аккаунт - Строка
//		* Email - Строка
//		* ИмяПользователя - СправочникСсылка.ИменаПользователей - идентифицированный по аккаунту пользователь
//
Функция ЗагрузитьПользователейИзГруппыAD(СтрокаДляСоединения) Экспорт
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	// АПК:1297-выкл Не проверять на локализацию 
	ТаблицаПользователей.Колонки.Добавить("ADsPath",, "ADsPath");
	ТаблицаПользователей.Колонки.Добавить("Имя",, "Имя пользователя");
	ТаблицаПользователей.Колонки.Добавить("Аккаунт",, "Аккаунт Windows");
	ТаблицаПользователей.Колонки.Добавить("Email",, "Электронная почта");
	ТаблицаПользователей.Колонки.Добавить("ИмяПользователя",, "Имя пользователя");
	// АПК:1297-вкл  
	
	// Подключение к ADODB.
	РезультатПодключения = ПодключениеКActiveDirectory(СтрокаДляСоединения, "Администрирование.УправлениеСетью.ЗагрузитьПользователейИзГруппыAD");
	
	conn = РезультатПодключения.ПодключениеADODB;
	rs = РезультатПодключения.ЗаписиADODB;
	
	// Обход цикла результата.
	Сч = 0;
	Пока Не rs.EOF Цикл  
		
		НоваяСтрока = ТаблицаПользователей.Добавить();
		
		НоваяСтрока.ADsPath 		= rs.Fields("ADsPath").Value;
		НоваяСтрока.Имя 			= rs.Fields("DisplayName").Value;
		НоваяСтрока.Аккаунт 		= rs.Fields("sAMAccountName").Value;
		НоваяСтрока.Email 			= rs.Fields("Mail").Value;
		
		ИмяПользователя = Справочники.ИменаПользователей.НайтиПоРеквизиту("УчетнаяЗаписьWindows", НоваяСтрока.Аккаунт);
		НоваяСтрока.ИмяПользователя = ИмяПользователя;
		
		Попытка 
		
			rs.MoveNext();
			Сч = Сч + 1;
			
		Исключение
			// Делаем заглушку на ограничение MaxPageSize в политике ADSI.
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Данные получены не полностью (%1 записей). Ограничьте размер выборки.'"), Сч);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
			ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Администрирование.УправлениеСетью.ЗаполнитьТаблицуПользователей", 
			ТекстОшибки, 
			УровеньЖурналаРегистрации.Ошибка,
			Истина);
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	rs.Close();
	rs = Неопределено;
	
	conn.Close();
	conn = Неопределено;

	Возврат ТаблицаПользователей;	

КонецФункции

// Основная функция, которая создает нового пользователя в текущей информационной базе 1С
//	Администраторов не изменяет.
//
// Параметры:
//  ТехническийПользовательОбмена  - СправочникСсылка.ИменаПользователей - пользователь на основе которого формируется пользователь ИБ
//  ГруппаДоступа  - СправочникСсылка.ГруппыДоступа - группа доступа, в которую необходимо добавить нового пользователя
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи - ссылка на созданного пользователя.
//
Функция СоздатьНовогоПользователяИБ(ТехническийПользовательОбмена, ГруппаДоступа = "", Организация = "", УжеНайденныйПользователь = "") Экспорт

	// - Поиск в справочнике Пользователи.
	ПользовательСправочника = ?(ЗначениеЗаполнено(УжеНайденныйПользователь), УжеНайденныйПользователь, Справочники.Пользователи.ПустаяСсылка());
	
	Если Не ПользовательСправочника.Пустая() Тогда
		// Определяем полные данные по найденному в Пользователе.
		ПараметрыПоиска = Новый Структура("Пользователь", ПользовательСправочника);
		РезультатПоиска = НайтиПользователя(ПараметрыПоиска);
	КонецЕсли;
	
	Если ПользовательСправочника.Пустая() Тогда
		ПараметрыПоиска = Новый Структура("Email", ТехническийПользовательОбмена.Email);
		РезультатПоиска = НайтиПользователя(ПараметрыПоиска);
		ПользовательСправочника = РезультатПоиска.Пользователь;
	КонецЕсли;
	
	Если ПользовательСправочника.Пустая() Тогда
		// Поиск по Наименование + ПользовательОС
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Наименование", ТехническийПользовательОбмена.Наименование);
		ПараметрыПоиска.Вставить("ПользовательОС", ТехническийПользовательОбмена.ПользовательОС);
		
		РезультатПоиска = НайтиПользователя(ПараметрыПоиска);
		ПользовательСправочника = РезультатПоиска.Пользователь;
	КонецЕсли;
	
	Если Не ПользовательСправочника.Пустая()
		И ПользовательАдминистратор(ПользовательСправочника) Тогда
		// Администраторов не изменяем.
		Возврат ПользовательСправочника;
	КонецЕсли;
	
	// - Поиск пользователя ИБ по идентификатору.
	Если Не ПользовательСправочника.Пустая() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ПользовательСправочника["ИдентификаторПользователяИБ"]);	
	КонецЕсли;
	
	// - Параметры текущего пользователя по справочнику Пользователи и Пользователи ИБ
	ДанныеТекущегоПользователя = ПараметрыЗаполненияТекущегоПользователя();	
	ДанныеТекущегоПользователя.СправочникПользователи_Ссылка = ПользовательСправочника;
	ДанныеТекущегоПользователя.СправочникПользователи_Email = РезультатПоиска.Email;
	ДанныеТекущегоПользователя.ПользовательИБ = ПользовательИБ;
	
	// - Проверка на наличие отличий Данных текущего пользователя от Технического пользователя из обмена.
	ДанныеПоИзменениямПользователяИБ = НаличиеОтличийДанныхТекущегоПользователя(ДанныеТекущегоПользователя, ТехническийПользовательОбмена);
	
	Если ДанныеПоИзменениямПользователяИБ.ПользовательИБСуществует 
		И Не ДанныеПоИзменениямПользователяИБ.ЕстьИзменения Тогда
	    // Прерываем функцию, т.к. пользователь уже существует и по нему нет изменений.
		Возврат ПользовательСправочника;
	
	КонецЕсли;
	
	// - Создание/обновление пользователя ИБ.
	ДанныеНовогоПользователяИБ = СозданиеПользователяИБ(ПользовательИБ, ТехническийПользовательОбмена);
	
	ПользовательИБ = ДанныеНовогоПользователяИБ.ПользовательИБ;	
	Пользователь = ДанныеНовогоПользователяИБ.СвязанныйСправочникПользователи_Ссылка;
	
	// - Создание/обновление пользователя в справочнике Пользователи. 
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
	Иначе
		Пользователь = Пользователь.ПолучитьОбъект();
		Пользователь.Недействителен = Ложь;
	КонецЕсли;
	
	Пользователь.Организация  = Организация;
	Пользователь.Наименование = ПользовательИБ.ПолноеИмя;
	
	ОписаниеПользователяИБ = Новый Структура;
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	ОписаниеПользователяИБ.Вставить(
		"УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	
	Пользователь.ДополнительныеСвойства.Вставить(
		"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		
	// Заполнение контактной информации.
	Пользователь.КонтактнаяИнформация.Очистить();
	
	// добавление email
	ДобавитьEmailПользователя(Пользователь, ТехническийПользовательОбмена.Email);
	
	Попытка
	 	Пользователь.Записать(); 
		
		Если ДанныеПоИзменениямПользователяИБ.ЕстьИзменения Тогда
			ДействиеТекст = СтрШаблон(НСтр("ru = 'Обновлен (реквизиты: %1)'"), ДанныеПоИзменениямПользователяИБ.ИзмененныеРеквизиты);	
		Иначе
			ДействиеТекст = НСтр("ru = 'Создан'");	
		КонецЕсли;
		
		ТекстИнформации = СтрШаблон(НСтр("ru = '%1 %2 по учетной записи %3.'"), 
			ДействиеТекст, ТехническийПользовательОбмена.Наименование, ТехническийПользовательОбмена.УчетнаяЗаписьWindows); 
			
		ОбщегоНазначения.СообщитьПользователю(ТекстИнформации);
		
		ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Администрирование.УправлениеСетью.СоздатьНовогоПользователяИБ", 
				ТекстИнформации, 
				УровеньЖурналаРегистрации.Информация);
				
	Исключение
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при попытке записи пользователя %1'"), Пользователь.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Администрирование.УправлениеСетью.СоздатьНовогоПользователяИБ", 
				ТекстОшибки, 
				УровеньЖурналаРегистрации.Ошибка,
				Истина);
				
	КонецПопытки;
	
	// - Добавление в группу доступа.
	Если ЗначениеЗаполнено(ГруппаДоступа) Тогда
		
		ОбъектГруппаДоступа = ГруппаДоступа.ПолучитьОбъект();
		СтрокаПользователей = ОбъектГруппаДоступа.Пользователи.Добавить();
		СтрокаПользователей.Пользователь = Пользователь.Ссылка;
		ОбъектГруппаДоступа.Записать();
		
	КонецЕсли;
	
	// - Обновление ролей доступа.
	ПользователиДляОбновления = Новый Массив;
	ПользователиДляОбновления.Добавить(Пользователь.Ссылка);
		
	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
	МодульУправлениеДоступом.ОбновитьРолиПользователей(ПользователиДляОбновления);
	
	Возврат Пользователь.Ссылка;
	
КонецФункции

// Процедура отключает пользователя от текущей информационной базы 1С:Купорос
//
// Параметры:
//  ПользовательДанных  - СправочникСсылка.ИменаПользователей
//
Процедура ОтключитьПользователяОтИБ(ПользовательДанных) Экспорт

	РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПользовательДанных, "Пользователь, Пользователь.Недействителен");
	
	// идентификация пользователя
	Если Не ЗначениеЗаполнено(РеквизитыПользователя.Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПользовательАдминистратор(РеквизитыПользователя.Пользователь) Тогда
		// Администраторов не отключаем.
		Возврат;
	КонецЕсли;
	
	Если РеквизитыПользователя.ПользовательНедействителен = Истина Тогда
		// уже был ранее отключен
		Возврат;
	КонецЕсли;
	
	// Отключение пользователя от ИБ
	ОбъектПользователь = РеквизитыПользователя.Пользователь.ПолучитьОбъект();
	ОбъектПользователь.Недействителен = Истина;
	Попытка
		
		ОбъектПользователь.Записать();
		
	Исключение
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при попытке отключения пользователя: %1'"), РеквизитыПользователя.Пользователь);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Администрирование.УправлениеСетью.ОтключениеПользователя", 
				ТекстОшибки, 
				УровеньЖурналаРегистрации.Ошибка,
				Истина);
		
	КонецПопытки;
	
КонецПроцедуры

// Поиск пользователя в справочнике Пользователи по параметрам
//
// Параметры:
//  ПараметрыПоиска	 - Структура - варианты ключей: Email, Наименование, Пользователь
//  * Email - Строка - поиск только по емайлу
//  * Наименование - Строка - поиск только по Наименование пользователя (обычно ФИО)
//  * ПользовательОС - Строка - опционально может использоваться для поиска вместе с Наименование
//  * Пользователь - СправочникСсылка.Пользователи - поиск только по ссылке справочника Пользователи
// 
// Возвращаемое значение:
//  Структура - найденный пользователь с Email. Если не найден, то пустая ссылка
//  * Пользователь - СправочникСсылка.Пользователи
//  * Email - Строка - емайл найденного пользователя
//
Функция НайтиПользователя(ПараметрыПоиска) Экспорт
	
	ЛитералПользователь = "Пользователь";
	ЛитералНаименование = "Наименование";
	ЛитералИстина = "ИСТИНА";
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить(ЛитералПользователь, Справочники.Пользователи.ПустаяСсылка());
	РезультатПоиска.Вставить("Email", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Пользователи.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(ПользователиКонтактнаяИнформация.АдресЭП, """") КАК Email,
	               |	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	               |		ПО (ПользователиКонтактнаяИнформация.Ссылка = Пользователи.Ссылка)
	               |			И (ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))
	               |ГДЕ
	               |	ИСТИНА";
	
	Если ПараметрыПоиска.Свойство("Email") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЛитералИстина, "ИСТИНА И ПользователиКонтактнаяИнформация.АдресЭП = &АдресЭП");
		Запрос.УстановитьПараметр("АдресЭП", ПараметрыПоиска.Email);
		
	ИначеЕсли ПараметрыПоиска.Свойство(ЛитералНаименование) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЛитералИстина, "ИСТИНА И Пользователи.Наименование = &Наименование");
		Запрос.УстановитьПараметр(ЛитералНаименование, ПараметрыПоиска.Наименование);
		
	ИначеЕсли ПараметрыПоиска.Свойство(ЛитералПользователь) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЛитералИстина, "ИСТИНА И Пользователи.Ссылка = &Пользователь");
		Запрос.УстановитьПараметр(ЛитералПользователь, ПараметрыПоиска.Пользователь);
		
	Иначе
		
		Возврат РезультатПоиска;
		
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ПараметрыПоиска.Свойство(ЛитералНаименование) 
			И ПараметрыПоиска.Свойство("ПользовательОС") Тогда
			// Если найден по наименованию: сравнивать по ПользовательОС из ПользовательИБ.
			
			Если Не ЗначениеЗаполнено(ПараметрыПоиска.ПользовательОС) Тогда
				Продолжить;
			КонецЕсли;

			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				Выборка.ИдентификаторПользователяИБ);	
				
			Если ВРЕГ(ПользовательИБ.ПользовательОС) <> ВРЕГ(ПараметрыПоиска.ПользовательОС) Тогда
				// не равны учетные записи.
				Продолжить;	
			КонецЕсли;
				
		КонецЕсли;
		
		РезультатПоиска.Пользователь = Выборка.Ссылка;
		РезультатПоиска.Email = Выборка.Email;
	
	КонецЦикла;
	
	Возврат РезультатПоиска;

КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СПИСКОМ ЗАПУСКА ИНФОРМАЦИОННЫХ БАЗ 1С 

// Обновление файлов настроек списка баз пользователей по списку пользователей
//
// Параметры:
//  МассивПользователей	 - Массив из СправочникСсылка.СтруктураПредприятия
//						 - Массив из СправочникСсылка.ГруппыПользователей
//						 - Массив из СправочникСсылка.Пользователи
//
Процедура ОбновитьФайлыНастроекСпискаБазПользователейПоСписку(МассивПользователей) Экспорт
	// МассивПользователей:
	//  ОбъектДоступа (Подразделение/ГруппыПользователей/Пользователь)
	
	Для каждого ТекСтрока Из МассивПользователей Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ОбновитьФайлыНастроекСпискаБазПользователейПоПодразделению(ТекСтрока);
		ИначеЕсли ТипЗнч(ТекСтрока) = Тип("СправочникСсылка.ГруппыПользователей") Тогда	
			ОбновитьФайлыНастроекСпискаБазПользователейПоГруппеПользователей(ТекСтрока);	
		ИначеЕсли ТипЗнч(ТекСтрока) = Тип("СправочникСсылка.ГруппыПользователейAD") Тогда
			ОбновитьФайлыНастроекСпискаБазПользователейПоГруппыПользователейAD(ТекСтрока);
		Иначе
			// Пользователь
			ОбновитьФайлНастроекСпискаБазПользователя(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Основная процедура обновления файла настроек списка баз пользователей
Процедура ОбновитьФайлНастроекСпискаБазПользователя(ПользовательСсылка) Экспорт
	
	ПутьКСлужебномуКаталогу = ПолучитьСлужебнуюПапкуПодразделения(ПользовательСсылка.Подразделение);
	
	Если ПутьКСлужебномуКаталогу = "" 
		Или (Не ПроверитьНаличиеФайлаИлиКаталога(ПутьКСлужебномуКаталогу)) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Путь к служебной папке не настроен.'"));
		Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	// Получить список используемых информационных баз пользователя.
	Запрос = Новый Запрос;
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СписокИнформационныхБаз1ССписокПравДоступа.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СписокИнформационныхБаз1С.СписокПравДоступа КАК СписокИнформационныхБаз1ССписокПравДоступа
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СписокИнформационныхБаз1С КАК СписокИнформационныхБаз1С
	               |		ПО СписокИнформационныхБаз1ССписокПравДоступа.Ссылка = СписокИнформационныхБаз1С.Ссылка
	               |ГДЕ
	               |	(СписокИнформационныхБаз1ССписокПравДоступа.ОбъектДоступа ССЫЛКА Справочник.СтруктураПредприятия
	               |				И СписокИнформационныхБаз1ССписокПравДоступа.ОбъектДоступа В (&ОбъектДоступаПодразделение)
	               |			ИЛИ СписокИнформационныхБаз1ССписокПравДоступа.ОбъектДоступа ССЫЛКА Справочник.ИменаПользователей
	               |				И СписокИнформационныхБаз1ССписокПравДоступа.ОбъектДоступа = &ОбъектДоступа
	               |			ИЛИ СписокИнформационныхБаз1ССписокПравДоступа.ОбъектДоступа ССЫЛКА Справочник.ГруппыПользователей
	               |				И СписокИнформационныхБаз1ССписокПравДоступа.ОбъектДоступа В (&ОбъектДоступаГруппыПользователя))
	               |	И СписокИнформационныхБаз1С.Используется
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СписокИнформационныхБаз1ССписокПравДоступа.Ссылка.Родитель.Наименование,
	               |	СписокИнформационныхБаз1ССписокПравДоступа.Ссылка.Наименование";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on	
	Запрос.УстановитьПараметр("ОбъектДоступа", ПользовательСсылка);
	
	СписокПодразделений = Новый СписокЗначений;
	ТекущееПодразделение = ПользовательСсылка.Подразделение;	
	Пока Не ТекущееПодразделение.Пустая() Цикл
		СписокПодразделений.Вставить(0, ТекущееПодразделение);
		ТекущееПодразделение = ТекущееПодразделение.Родитель;
	КонецЦикла;
	Запрос.УстановитьПараметр("ОбъектДоступаПодразделение", СписокПодразделений);
	Запрос.УстановитьПараметр("ОбъектДоступаГруппыПользователя", 
		РаботаСЗадачами.ПолучитьСписокГруппПользователя(Справочники.Пользователи.НайтиПоНаименованию(ПользовательСсылка.Наименование)));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	// обновление файла настроек
	ТекстовыйФайлНастроек = Новый ТекстовыйДокумент;
	
	ИмяФайла = ПользовательСсылка.УчетнаяЗаписьWindows + "Cfg1C.cfg";
	ПолныйПутьКФайлу = ПутьКСлужебномуКаталогу + "\" + ИмяФайла;
	
	ФайлДанных = Новый Файл(ПолныйПутьКФайлу);
	Если ФайлДанных.Существует() Тогда
		 ТекстовыйФайлНастроек.Прочитать(ПолныйПутьКФайлу, КодировкаТекста.UTF8);
		 ТекстовыйФайлНастроек.Очистить();
	КонецЕсли; 
	
	Для каждого ТекСтрокаВыборки Из Выборка Цикл
	
		ТекстовыйФайлНастроек.ДобавитьСтроку("CommonInfoBases=" + ТекСтрокаВыборки.Ссылка.ПутьКФайлуБазы_v8i);
	
	КонецЦикла;
	
	ТекстовыйФайлНастроек.Записать(ПолныйПутьКФайлу, КодировкаТекста.UTF8);
	
	Результат = Истина;
	
КонецПроцедуры

// Возвращает список пользователей по массиву объектов доступа
//
// Параметры:
//  МассивДанных - Массив Из см. Справочник.СписокИнформационныхБаз1С.СписокПравДоступа.ОбъектДоступа
// 
// Возвращаемое значение:
//  ТаблицаЗначений - содержит колонки: 
//		* Пользователь - СправочникСсылка.Пользователи - пользователи из разных данных
//
Функция СписокПользователейПоМассивуОбъектовДоступа(МассивДанных) Экспорт
	
	ЛитералПользователь = "Пользователь";
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить(ЛитералПользователь);
	
	МассивПользователей = Новый Массив;
	
	Для каждого ТекСтрока Из МассивДанных Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока) Тогда
			Продолжить;		
		КонецЕсли;
		
		МассивНовый = Новый Массив;
		Если ТипЗнч(ТекСтрока) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ТаблицаДляОбработки = ТаблицаПользователейПоПодразделению(ТекСтрока);
			МассивНовый = ТаблицаДляОбработки.ВыгрузитьКолонку(ЛитералПользователь);
		ИначеЕсли ТипЗнч(ТекСтрока) = Тип("СправочникСсылка.ГруппыПользователей") Тогда	
			ТаблицаДляОбработки = ТаблицаПользователейПоПоГруппеПользователей(ТекСтрока);
			МассивНовый = ТаблицаДляОбработки.ВыгрузитьКолонку(ЛитералПользователь);
		ИначеЕсли ТипЗнч(ТекСтрока) = Тип("СправочникСсылка.ГруппыПользователейAD") Тогда
			ТаблицаДляОбработки = ТаблицаПользователейПоГруппыПользователейAD(ТекСтрока);
			МассивНовый = ТаблицаДляОбработки.ВыгрузитьКолонку(ЛитералПользователь);
		Иначе
			// Пользователь
			МассивНовый.Добавить(ТекСтрока);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПользователей, МассивНовый, Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаПользователей, МассивПользователей, ЛитералПользователь);
	
	Возврат ТаблицаПользователей;

КонецФункции

// Сравнение таблиц и при разнице обновляет у пользователей список общих баз (справочник СписокОбщихБазПользователей)
//  Работает только для уже ранее созданных записей в справочнике СписокОбщихБазПользователей
//
// Параметры:
//  НачальнаяТаблица - ТаблицаЗначений - содержит колонки:
//		* Пользователь
//  КонечнаяТаблица	 - ТаблицаЗначений - содержит колонки: 
//		* Пользователь
//
Процедура СравнениеТаблицДляОбновленияСпискаОбщихБазПользователей(НачальнаяТаблица, КонечнаяТаблица) Экспорт

	ТаблицаРезультата = ОбщегоНазначенияКупоросСервер.РазницаТаблицЗначений(НачальнаяТаблица, КонечнаяТаблица);
	
	Для каждого ТекСтрока Из ТаблицаРезультата Цикл
	
		НайденныйПользовательСпискаБаз = Справочники.СписокОбщихБазПользователей.НайтиСписокПоПользователю(ТекСтрока.Пользователь);
		Если ЗначениеЗаполнено(НайденныйПользовательСпискаБаз) Тогда
			ОбъектСписокОбщихБаз = НайденныйПользовательСпискаБаз.ПолучитьОбъект();
		Иначе
			Продолжить;
		КонецЕсли;
		
		ОбъектСписокОбщихБаз.ТребуетсяОбновитьСписокИБ = Истина;
		
		// "Код списка" не нужно обновлять, т.к. он обновится при обработке признака ТребуетсяОбновитьСписокИБ
		ОбъектСписокОбщихБаз.ДополнительныеСвойства.Вставить("ОбновлятьКодСписка", Ложь);
		
		ОбъектСписокОбщихБаз.Записать();
	
	КонецЦикла;

КонецПроцедуры 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Ожидание в секундах
//
// Параметры:
//  сек	 - Число - количество секунд 
//
Процедура Sleep(сек) Экспорт
    
    Начало = ТекущаяДатаСеанса();
	сч = 0;
    Пока ТекущаяДатаСеанса() - Начало < сек Цикл
    	сч = сч + 1;
    КонецЦикла; 
  
КонецПроцедуры

// Функция возвращает Истина, если файл существует
//
// Параметры:
//  ПутьКФайлу	 - Строка - путь к файлу
// 
// Возвращаемое значение:
//   Булево - возвращает Истина, если файл существует
//
Функция ПроверитьНаличиеФайлаИлиКаталога(ПутьКФайлу) Экспорт

	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		Возврат Истина;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьНаличиеФайлаКаталога()

// Установливает шаблон доступа пользователям в спр.ИменаПользователей по группе пользователей AD
//
// Параметры:
//  ГруппаДоступаAD	 - СправочникСсылка.ГруппыПользователейAD - Если не задан, то анализ всех групп доступа (необязательный параметр)
//
Процедура УстановитьШаблонДоступаПоГруппеПользователейAD(ГруппаДоступаAD = Неопределено) Экспорт

	// Список пользователей	на установку доступа
	СписокДоступовПользователейДляОбновления = СписокПользователейГруппыADСШаблонамиДоступа();
	
	Для каждого ТекСтрока Из СписокДоступовПользователейДляОбновления Цикл
		
		Если Не ТекСтрока.ТребуетсяДобавитьШаблонДоступа
			И Не ТекСтрока.ТребуетсяУдалитьШаблонДоступа Тогда
			Продолжить;		
		КонецЕсли;
		
		ОбъектПользователь = ТекСтрока.ИмяПользователя.ПолучитьОбъект();
		
		Если ТекСтрока.ТребуетсяДобавитьШаблонДоступа Тогда
			
			НоваяСтрока = ОбъектПользователь.ПраваПользователя.Добавить();
			НоваяСтрока.ШаблонДоступа = ТекСтрока.ШаблонДоступа;
			НоваяСтрока.Основание = ТекСтрока.ГруппаAD;
			
			ТекстКомментария = СтрШаблон(НСтр("ru = 'Добавлен шаблон доступа %1 по группе AD %2.'"), ТекСтрока.ШаблонДоступа, ТекСтрока.ГруппаAD);
			
		ИначеЕсли ТекСтрока.ТребуетсяУдалитьШаблонДоступа Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ШаблонДоступа", ТекСтрока.ШаблонДоступа);
			ПараметрыОтбора.Вставить("Основание", ТекСтрока.ГруппаAD);
			НайденнаяСтрока = ОбъектПользователь.ПраваПользователя.НайтиСтроки(ПараметрыОтбора);
			Для каждого ТекСтрокаПраваПользователя Из НайденнаяСтрока Цикл
				ОбъектПользователь.ПраваПользователя.Удалить(ТекСтрокаПраваПользователя);	
			КонецЦикла;
			
			ТекстКомментария = СтрШаблон(НСтр("ru = 'Удален шаблон доступа %1, т.к. не найден в основании группы AD %2.'"), ТекСтрока.ШаблонДоступа, ТекСтрока.ГруппаAD);
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		ОбъектПользователь.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии", ТекстКомментария);
		
		ОбъектПользователь.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

// Параметры таблицы пользователей
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. описание возвращаемого значения ЗаполнитьТаблицуПользователей()
//
Функция ПараметрыТаблицыПользователей() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	мОписаниеТиповБулево = Новый ОписаниеТипов(МассивТипов);    
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	// АПК:1297-выкл Не проверять на локализацию 
	ТаблицаПользователей.Колонки.Добавить("Пометка", мОписаниеТиповБулево, "");
	ТаблицаПользователей.Колонки.Добавить("ADsPath",, "ADsPath");
	ТаблицаПользователей.Колонки.Добавить("ОтображаемоеИмя",, "Отображаемое имя");
	ТаблицаПользователей.Колонки.Добавить("Аккаунт",, "Аккаунт Windows");
	ТаблицаПользователей.Колонки.Добавить("Домен",, "Домен");
	ТаблицаПользователей.Колонки.Добавить("Подразделение",, "Подразделение");
	ТаблицаПользователей.Колонки.Добавить("Служба",, "Служба");
	ТаблицаПользователей.Колонки.Добавить("Должность",, "Должность");
	ТаблицаПользователей.Колонки.Добавить("Email",, "Электронная почта");
	ТаблицаПользователей.Колонки.Добавить("РодительAD",, "Родитель AD");
	ТаблицаПользователей.Колонки.Добавить("ТелефонРабочий",, "Телефон рабочий");
	ТаблицаПользователей.Колонки.Добавить("ДомашнийТелефон",, "Домашний телефон");
	ТаблицаПользователей.Колонки.Добавить("Сотрудник",, "Сотрудник");  // Результат вывода ФИО
	ТаблицаПользователей.Колонки.Добавить("SID",, "SID");
	// АПК:1297-вкл  
	ТаблицаПользователей.Колонки.Добавить("Загружено", мОписаниеТиповБулево, "");
	
	Возврат ТаблицаПользователей;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеAD

//////////////////////////////////////////////////////////////////////////////////////////
// АКТУАЛИЗАЦИЯ ДАННЫХ ИЗ AD

// Формирование на основе данных LDAP AD таблицы значений ТаблицаПользователей
//
// Параметры:
//  LDAPText	 - Строка	 - LDAP строка AD
//  Рекурсивно	 - Булево	 - Истина, то выполнение вложенных боксов по параметру LDAPText
// 
// Возвращаемое значение:
//  ТаблицаЗначений - заполняемая таблица значений с колонками:
//  	* Пометка - Булево
//  	* ОтображаемоеИмя - Строка - отображаемое имя пользователя по AD, пример: Александр Иванович Прохоров
//  	* Аккаунт - Строка
//  	* Домен - Строка
//  	* Подразделение - Строка
//  	* Служба - Строка
//  	* Должность - Строка
//  	* Email - Строка
//  	* РодительAD - Строка
//  	* ТелефонРабочий - Строка
//  	* ДомашнийТелефон - Строка
//  	* Сотрудник - Строка - итоговое имя пользователя вида ФИО, пример: Прохоров Александр Иванович
//
Функция ЗаполнитьТаблицуПользователей(LDAPText, Рекурсивно = Ложь)             
	
	ТаблицаПользователей = ПараметрыТаблицыПользователей();
	
	Если ПустаяСтрока(LDAPText) Тогда
		Возврат ТаблицаПользователей;
	КонецЕсли;
	
	// Подключение к ADODB.
	ОтборыДанных = "(&(objectCategory=person)(objectClass=user)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))";
	ПоляДанных = "ADsPath, Name, DisplayName, Mail, Company, department, distinguishedName, telephoneNumber, homephone, sAMAccountName, title, objectsid"; 
	БазоваяСтрока = "<%1>;%2;%3;%4";
	СтрокаДляСоединения = СтрШаблон(БазоваяСтрока,
	                                СокрЛП(LDAPText), // 1 
									ОтборыДанных, 	  // 2
									ПоляДанных,   	  // 3
									?(Рекурсивно, "subtree", "onelevel") ); // 4
	
	
	РезультатПодключения = ПодключениеКActiveDirectory(СтрокаДляСоединения, "Администрирование.УправлениеСетью.ЗаполнитьТаблицуПользователей");
	
	conn = РезультатПодключения.ПодключениеADODB;
	rs = РезультатПодключения.ЗаписиADODB;

	// Обход цикла результата.
	Сч = 0;
	
	ТипРасположенияИмениВActiveDirectory = Константы.ТипРасположенияИмениВActiveDirectory.Получить();
	ТипРасположенияИмениВActiveDirectory = ?(ТипРасположенияИмениВActiveDirectory.Пустая(), 
		Перечисления.ТипыРасположенияИмениВActiveDirectory.ИмяОтчествоФамилия, ТипРасположенияИмениВActiveDirectory);
	
		
	Пока Не rs.EOF Цикл  
		
		АккаунтИмя = rs.Fields("sAMAccountName").Value;
		
		ADsPath = rs.Fields("ADsPath").Value;
		
		АккаунтДомен = АккаунтДоменИзADsPath(ADsPath);
		
		// { Каратаев Олег (3Logic) - 10.07.2024
		ДобавитьСтрокуТаблицы = Не ПустаяСтрока(АккаунтИмя); 
		
		// Добавлена проверка. Если нет email, то не добавлять в список пользователей.
		ДобавитьСтрокуТаблицы = ДобавитьСтрокуТаблицы И СокрЛП(rs.Fields("Mail").Value) <> "";	
		
		Если ДобавитьСтрокуТаблицы Тогда
			
			НоваяСтрока = ТаблицаПользователей.Добавить();
			Пользователь = Справочники.Пользователи.НайтиПоКоду(АккаунтИмя);
			НоваяСтрока.Загружено = Истина;
			Если Пользователь = Неопределено Или Пользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
				НоваяСтрока.Загружено = Ложь;
			КонецЕсли;
			НоваяСтрока.ADsPath 		= rs.Fields("ADsPath").Value;
			НоваяСтрока.ОтображаемоеИмя	= rs.Fields("DisplayName").Value;
			НоваяСтрока.Аккаунт 		= АккаунтИмя;
			НоваяСтрока.Домен 			= АккаунтДомен;
			НоваяСтрока.Email 			=  rs.Fields("Mail").Value;
			НоваяСтрока.Подразделение 	=  rs.Fields("Company").Value;
			НоваяСтрока.Должность 		=  rs.Fields("title").Value;
			НоваяСтрока.РодительAD 		=  rs.Fields("distinguishedName").Value;
			НоваяСтрока.Служба 			=  rs.Fields("department").Value;
			НоваяСтрока.SID 			=  ПреобразоватьSID(rs.Fields("objectsid").Value);
			
			// если выводимое имя: Иван Александрович Мухин 
			Если ТипРасположенияИмениВActiveDirectory = Перечисления.ТипыРасположенияИмениВActiveDirectory.ИмяОтчествоФамилия Тогда
				ФИО = НоваяСтрока.ОтображаемоеИмя;
				Имя = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ФИО);
				Отчество = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ФИО);
				Фамилия = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ФИО);
				
				Сотрудник = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
			Иначе
				Сотрудник = СокрЛП(НоваяСтрока.ОтображаемоеИмя);
			КонецЕсли;
	
			НоваяСтрока.Сотрудник = Сотрудник;
			
			telephoneNumber = rs.Fields("telephoneNumber").Value;
			НоваяСтрока.ТелефонРабочий  =  ?(ЗначениеЗаполнено(telephoneNumber), telephoneNumber, "");
			
			homephone = rs.Fields("homephone").Value;
			НоваяСтрока.ДомашнийТелефон =  ?(ЗначениеЗаполнено(homephone), homephone, "");
			
		КонецЕсли;
		
		Попытка 
			
			rs.MoveNext();
			Сч = Сч + 1;
			
		Исключение
			
			// Делаем заглушку на ограничение MaxPageSize в политике ADSI.
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Данные получены не полностью (%1 записей). Ограничьте размер выборки.'"), Сч);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
			ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Администрирование.УправлениеСетью.ЗаполнитьТаблицуПользователей", 
					ТекстОшибки, 
					УровеньЖурналаРегистрации.Ошибка,
					Истина);
			
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	rs.Close();
	rs = Неопределено;
	
	conn.Close();
	conn = Неопределено;
	
	ТаблицаПользователей.Сортировать("ОтображаемоеИмя Возр");
	
	Возврат ТаблицаПользователей;
	
КонецФункции 

// Загрузка пользователей из AD в справочник "Имена пользователей"
//
// Параметры:
//  ТаблицаПользователей  - ТаблицаЗначений - таблица пользователей из AD:
//		* Пометка - Булево
//		* Имя - Строка - выданное имя пользователя по AD, пример: Александр Иванович Прохоров
//		* Аккаунт - Строка
//		* Домен - Строка
//		* Подразделение - Строка
//		* Служба - Строка
//		* Должность - Строка
//		* Email - Строка
//		* РодительAD - Строка
//		* ТелефонРабочий - Строка
//		* ДомашнийТелефон - Строка
//		* SID - Строка - Идентификатор AD 
//		* Сотрудник - Строка - имя пользователя вида ФИО, пример: Прохоров Александр Иванович
//  Подразделение  - СправочникСсылка.СтруктураПредприятия - подразделение, по которому необходимо сформировать структуру каталогов
//
Процедура ДобавлениеВСправочникИменаПользователей(ТаблицаПользователей, Подразделение)
	
	Если Не Константы.ЗагружатьПользователейИзAD.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление списка актуальных пользователей.
	Для каждого ТекСтрока Из ТаблицаПользователей Цикл
	
		// Пример таблицы
		// ТаблицаПользователей.Колонки.Добавить("Пометка",мОписаниеТиповБулево,"");
		// ТаблицаПользователей.Колонки.Добавить("ADsPath",,"ADsPath");
		// ТаблицаПользователей.Колонки.Добавить("ОтображаемоеИмя",,"Имя пользователя");
		// ТаблицаПользователей.Колонки.Добавить("Аккаунт",,"Аккаунт Windows");
		// ТаблицаПользователей.Колонки.Добавить("Домен",,"Домен");
		// ТаблицаПользователей.Колонки.Добавить("Подразделение",,"Подразделение");
		// ТаблицаПользователей.Колонки.Добавить("Служба",,"Служба");
		// ТаблицаПользователей.Колонки.Добавить("Должность",,"Должность");
		// ТаблицаПользователей.Колонки.Добавить("Email",,"Электронная почта");
		// ТаблицаПользователей.Колонки.Добавить("РодительAD",,"Родитель AD");
		// ТаблицаПользователей.Колонки.Добавить("ТелефонРабочий",,"Телефон рабочий");
		// ТаблицаПользователей.Колонки.Добавить("ДомашнийТелефон",,"Домашний телефон");
		// ТаблицаПользователей.Колонки.Добавить("Сотрудник",,"Сотрудник");
		// ТаблицаПользователей.Колонки.Добавить("SID",,"SID");
		
		// - Определение подразделения.
		АктуальныйСписокПодразделенийСотрудника = СформироватьСписокПодразделенийИзADsPath(ТекСтрока.ADsPath);
		Если АктуальныйСписокПодразделенийСотрудника.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		АктуальноеПодразделение = АктуальныйСписокПодразделенийСотрудника[АктуальныйСписокПодразделенийСотрудника.Количество() - 1].Значение;
		
		// - Поиск пользователя в именах.
		НайденныйИменаПользователей = Справочники.ИменаПользователей.НайтиПоРеквизиту("ИдентификаторAD", ТекСтрока.SID);
		
		Если НайденныйИменаПользователей.Пустая() Тогда
			НайденныйИменаПользователей = Справочники.ИменаПользователей.НайтиПоРеквизиту("УчетнаяЗаписьWindows", ТекСтрока.Аккаунт);
		КонецЕсли;
	
		Если НайденныйИменаПользователей.Пустая() Тогда
			
			ТекОбъект = Справочники.ИменаПользователей.СоздатьЭлемент();
			ЭтоНовыйОбъект = Истина;
			
		Иначе
			
			ТекОбъект = НайденныйИменаПользователей.ПолучитьОбъект();
			ЭтоНовыйОбъект = Ложь;
			
		КонецЕсли;
		
		// - Анализ отличий.
		СтруктураОтличий = ЕстьОтличияСтарогоОтНовогоОбъекта(НайденныйИменаПользователей, ТекСтрока, АктуальноеПодразделение, Подразделение);
		
		Если ЭтоНовыйОбъект 
			Или СтруктураОтличий.ЕстьИзменения Тогда
			// в случае обнаружение отличий - актуализация ключевых данных
			
			ТекОбъект.Подразделение 	   = ПолучитьПодразделениеПользователяAD(ТекСтрока, АктуальноеПодразделение, Подразделение);
			ТекОбъект.УчетнаяЗаписьWindows = ТекСтрока.Аккаунт;
			ТекОбъект.ИдентификаторAD      = ТекСтрока.SID;
			// BSLLS:UsingHardcodePath-off
			ТекОбъект.ПользовательОС 	   = СтрШаблон("\\%1\%2", Константы.ДоменПредприятия.Получить(), ТекСтрока.Аккаунт);
			// BSLLS:UsingHardcodePath-on
			ТекОбъект.Должность 		   = ТекСтрока.Должность;
			ТекОбъект.Email	 			   = ТекСтрока.Email;
			ТекОбъект.Телефон			   = СокрЛП(СокрЛП(ТекСтрока.ТелефонРабочий) + " " + ТекСтрока.ДомашнийТелефон);
			
			СтруктураОтличий.ЕстьИзменения = Истина;
			СтруктураОтличий.ТребуетсяОбновлениеПрав = ?(ЭтоНовыйОбъект, Истина, СтруктураОтличий.ТребуетсяОбновлениеПрав);
			
		КонецЕсли;
		
		ТекОбъект.ПринадлежитКAD = Истина;
		Если ТекОбъект.Недействителен Тогда
			СтруктураОтличий.ЕстьИзменения = Истина;
			СтруктураОтличий.ТребуетсяОбновлениеПрав = Истина;
		КонецЕсли;
		ТекОбъект.Недействителен = Ложь;
		
		ТекОбъект.Наименование = ТекСтрока.Сотрудник;
	
		Если ТекОбъект.Подразделение.Пустая() Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдено подразделение %1 для сотрудника %2.'"), АктуальноеПодразделение, ТекСтрока.Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если СтруктураОтличий.ЕстьИзменения Тогда
			
			
			ТекОбъект.ДатаПоследнейАктуализацииAD = ТекущаяДатаСеанса();
			
			ТекстКомментария = СтрШаблон(НСтр("ru = '#%1'"), 
				?(ЭтоНовыйОбъект, НСтр("ru = 'Новый пользователь'"), НСтр("ru = 'Обновленный пользователь'")));
			ТекОбъект.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии", ТекстКомментария);
			
			ТекОбъект.Записать();
			
			РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекОбъект.Подразделение, "ДобавлятьПользователейАвтоИБ, Организация");
		
			Если РеквизитыПодразделения.ДобавлятьПользователейАвтоИБ = Истина Тогда
				
				// добавление/обновление  пользователя в текущей ИБ
				НовыйПользователь = СоздатьНовогоПользователяИБ(ТекОбъект.Ссылка,, РеквизитыПодразделения.Организация, ТекОбъект.Пользователь);
				
				Если НовыйПользователь <> ТекОбъект.Пользователь Тогда
					ТекОбъект.Пользователь = НовыйПользователь;
					
					ТекстКомментария = СтрШаблон(НСтр("ru = '#%1'"), НСтр("ru = 'Определен и добавлен пользователь'"));
					ТекОбъект.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии", ТекстКомментария);
					
					ТекОбъект.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; // СтруктураОтличий.ЕстьИзменения
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ОтключитьНедействительныхПользователей(ТаблицаПользователей, Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИменаПользователей.Ссылка КАК Ссылка,
	               |	ИменаПользователей.Подразделение КАК Подразделение,
	               |	ИменаПользователей.ИдентификаторAD КАК ИдентификаторAD,
	               |	ИменаПользователей.ПринадлежитКAD КАК ПринадлежитКAD,
	               |	ИменаПользователей.Недействителен КАК Недействителен,
	               |	СтруктураПредприятия.ДобавлятьПользователейАвтоИБ КАК ДобавлятьПользователейАвтоИБ,
	               |	СтруктураПредприятия.ГруппаAD КАК ГруппаAD
	               |ИЗ
	               |	Справочник.ИменаПользователей КАК ИменаПользователей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |		ПО ИменаПользователей.Подразделение = СтруктураПредприятия.Ссылка
	               |ГДЕ
	               |	ИменаПользователей.ПринадлежитКAD
	               |	И НЕ ИменаПользователей.Недействителен
	               |	И НЕ ИменаПользователей.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Подразделение) Тогда
			// Ошибочные значения. Необходимо их отдельно смотреть и анализировать причину почему они без подразделений.
			// Отключаем
		ИначеЕсли Выборка.Подразделение <> Подразделение 
			И ( (Не Выборка.Подразделение.ПринадлежитЭлементу(Подразделение)) 
					Или ЗначениеЗаполнено(Выборка.ГруппаAD) ) Тогда
			// Мимо, если подразделения отличны: не является подчиненным элементом или имеет заполненную определенную группу AD
			Продолжить;
		Иначе
			// Без обработки.
		КонецЕсли;
		
		НайденныйПользователь = ТаблицаПользователей.Найти(Выборка.ИдентификаторAD, "SID");
		
		Если НайденныйПользователь = Неопределено Тогда
			 // отключен от AD, т.к. не найден в списке актуальных пользователей
			 
			 Если Выборка.ДобавлятьПользователейАвтоИБ Тогда
				 
				 // отключение пользователя от ИБ
				 ОтключитьПользователяОтИБ(Выборка.Ссылка);
				 
			 КонецЕсли;
	 
			 Если Выборка.Подразделение <> Справочники.СтруктураПредприятия.ИсторияПредприятия
				 Или Не Выборка.Недействителен Тогда
			 
				 ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
				 ТекОбъект.Подразделение = Справочники.СтруктураПредприятия.ИсторияПредприятия;
				 ТекОбъект.Недействителен = Истина;
				 ТекОбъект.ДатаПоследнейАктуализацииAD = ТекущаяДатаСеанса();
				 ТекОбъект.Записать();
			 
			 КонецЕсли;
			 
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

Процедура АктуализацияСправочникаГруппыПользователейAD()

	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ГруппыПользователейAD.Ссылка КАК Ссылка,
	                |	ГруппыПользователейAD.Используется КАК Используется,
	                |	ГруппыПользователейAD.СтрокаСоединения КАК СтрокаСоединения
	                |ИЗ
	                |	Справочник.ГруппыПользователейAD КАК ГруппыПользователейAD
	                |ГДЕ
	                |	НЕ ГруппыПользователейAD.ПометкаУдаления
	                |	И ГруппыПользователейAD.Используется";
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
		 
		 СтрокаИмяПользователя = "ИмяПользователя";
		 
	 	 ТекущаяТаблица = Выборка.Ссылка.ПользователиГруппы.Выгрузить(, СтрокаИмяПользователя);
		 
		 НоваяТаблица = ЗагрузитьПользователейИзГруппыAD(Выборка.СтрокаСоединения);
		 НоваяТаблица = НоваяТаблица.Скопировать(, СтрокаИмяПользователя);
		 
		 СтруктураОтбора = Новый Структура(СтрокаИмяПользователя, Справочники.ИменаПользователей.ПустаяСсылка());
		 НоваяТаблица = ОбщегоНазначенияКупоросСервер.УдалитьПустыеСтрокиТаблицыЗначений(НоваяТаблица, СтруктураОтбора);
		 
		 // Сравнение таблиц на отличия.
		 Если ОбщегоНазначенияКупоросСервер.ТаблицыЗначенийРавны(ТекущаяТаблица, НоваяТаблица) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 НачальнаяТаблица = ТаблицаПользователейПоГруппыПользователейAD(Выборка.Ссылка);
		 НачальнаяТаблица = НачальнаяТаблица.Скопировать(, "Пользователь");
		 
		 // Если есть новые пользователи в Группе AD, то актуализируем группу свежими данными.
		 ОбъектДанных = Выборка.Ссылка.ПолучитьОбъект();
		 ОбъектДанных.ПользователиГруппы.Загрузить(НоваяТаблица);
		 ОбъектДанных.Записать();
		 
		 // Установка требования обновления списка баз в СписокОбщихБазПользователей для измененных пользователей.
		 КонечнаяТаблица = ТаблицаПользователейПоГруппыПользователейAD(ОбъектДанных.Ссылка);
		 КонечнаяТаблица = КонечнаяТаблица.Скопировать(, "Пользователь");
		 
		 СравнениеТаблицДляОбновленияСпискаОбщихБазПользователей(НачальнаяТаблица, КонечнаяТаблица); 
		 
	 КонецЦикла;
	
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ AD

Функция ПодключениеКActiveDirectory(СтрокаДляСоединения, ИмяОперации = "Подключение к AD")
	
	РезультатПодключения = Новый Структура;
	РезультатПодключения.Вставить("ПодключениеADODB", "");
	РезультатПодключения.Вставить("ЗаписиADODB", "");
	
	Попытка 
		
		КомандаАДО 					= Новый COMОбъект("ADODB.Command");
		ПодключениеADODB 			= Новый COMОбъект("ADODB.Connection");
		ПодключениеADODB.Provider 	= "ADsDSOObject";
		ПодключениеADODB.Open("Active Directory Provider");
		КомандаАДО.ActiveConnection = ПодключениеADODB;
		
		КомандаАДО.CommandText 	= СтрокаДляСоединения;
		КомандаАДО.Properties("Page Size").Value = 100;
		КомандаАДО.Properties("Timeout").Value = 30;
		КомандаАДО.Properties("Cache Results").Value = Ложь;
		ЗаписиADODB = КомандаАДО.Execute();		
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить LDAP запрос'"); 
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная(ИмяОперации, 
				ТекстОшибки, 
				УровеньЖурналаРегистрации.Ошибка,
				Истина);
				
		ЗаписиADODB.Close();
		ЗаписиADODB = Неопределено;
		
		ПодключениеADODB.Close();
		ПодключениеADODB = Неопределено;
		
		ВызватьИсключение;

	КонецПопытки;
	
	РезультатПодключения.ПодключениеADODB = ПодключениеADODB;
	РезультатПодключения.ЗаписиADODB = ЗаписиADODB;
	
	Возврат РезультатПодключения;

КонецФункции

Функция АккаунтДоменИзADsPath(ADsPath)
	
	АккаунтДомен = "";
	Поз = СтрНайти(ADsPath, "DC=");
	Если Поз > 0 Тогда
		АккаунтДомен = Сред(ADsPath, Поз + 3);
		Поз = СтрНайти(АккаунтДомен, ",");
		Если Поз >  0 Тогда
			АккаунтДомен = Лев(АккаунтДомен, Поз - 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат АккаунтДомен;
	
КонецФункции

// Использована функция из публикации https://infostart.ru/public/275916/
//
// Параметры:
//  objectSid	 - ОбъектCOM 
// 
// Возвращаемое значение:
//  Строка - преобразованная строка SID
//
Функция ПреобразоватьSID(objectSid)
	
	Если Не ЗначениеЗаполнено(objectSid) Тогда
		Возврат "";
	КонецЕсли;
	
    SID = "S-";
    
    МассивSID    = Новый Массив;
    Для Каждого ЭлементSID Из objectSid Цикл
        МассивSID.Добавить(ЭлементSID);
    КонецЦикла;
	
	СтрокаНулеваяГруппировкаЧисла = "ЧГ=0";
	
	SID = SID + Формат(МассивSID[0], СтрокаНулеваяГруппировкаЧисла) + "-";
    
    КоличествоДашей = МассивSID[1];
    
    SECURITY_NT_AUTHORITY    = 0;
    Для Инд = 0 По 5 Цикл
        SECURITY_NT_AUTHORITY    = SECURITY_NT_AUTHORITY + МассивSID[2 + Инд] * Pow(2, (5 - Инд) * 8);
    КонецЦикла;
    SID = SID + Формат(SECURITY_NT_AUTHORITY, СтрокаНулеваяГруппировкаЧисла);
    
    Для Инд = 0 По КоличествоДашей - 1 Цикл
        SID    = SID + "-";
        Даш    = 0;
        Для ИндДаш = 0 По 3 Цикл
            Даш    = Даш + МассивSID[8 + 4 * Инд + ИндДаш] * Pow(2, (ИндДаш) * 8);
        КонецЦикла;
        SID    = SID + Формат(Даш, СтрокаНулеваяГруппировкаЧисла);
    КонецЦикла;
	
    Возврат SID;
	
КонецФункции

// Создание пользователя ИБ
//
// Параметры:
//  ПользовательИБ					 - ПользователиИнформационнойБазы
//									 - Неопределено
//  ТехническийПользовательОбмена	 - СправочникСсылка.ИменаПользователей
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//		* ПользовательИБ - ПользователиИнформационнойБазы
//		* СозданНовый - Булево
//		* ОбновленСуществующий - Булево
//		* СвязанныйСправочникПользователи_Ссылка - СправочникСсылка.Пользователи
//
Функция СозданиеПользователяИБ(ПользовательИБ, ТехническийПользовательОбмена)
	
	РезультатПользовательИБ = Новый Структура;
	РезультатПользовательИБ.Вставить("ПользовательИБ", ПользовательИБ);
	РезультатПользовательИБ.Вставить("СозданНовый", Ложь);
	РезультатПользовательИБ.Вставить("ОбновленСуществующий", Ложь);
	РезультатПользовательИБ.Вставить("СвязанныйСправочникПользователи_Ссылка", Справочники.Пользователи.ПустаяСсылка());
	
	СозданНовый = Ложь;
	ОбновленСуществующий = Ложь;
	
	Если ПользовательИБ = Неопределено Тогда
		// Создаем нового пользователя, т.к. не был найден.
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		
		КраткоеИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(ТехническийПользовательОбмена.Наименование);
		ПользовательБазыИмя = КраткоеИмя;
		Индекс = 0;
		
		Пока ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательБазыИмя) <> Неопределено Цикл
			Индекс = Индекс + 1;
			ПользовательБазыИмя = КраткоеИмя + Формат(Индекс, "ЧГ=");
		КонецЦикла;
		
		ПользовательИБ.Имя       = ПользовательБазыИмя;
		
		СозданНовый = Истина;
		
		ПользовательИБ.АутентификацияСтандартная = Ложь;
		ПользовательИБ.ПоказыватьВСпискеВыбора	 = Ложь;
		
	Иначе
		
		ОбновленСуществующий = Истина;	
		
	КонецЕсли;
	
	ПользовательИБ.ПолноеИмя = ТехническийПользовательОбмена.Наименование;
	Если ЗначениеЗаполнено(ТехническийПользовательОбмена.ПользовательОС) Тогда
		ПользовательИБ.ПользовательОС 	= ТехническийПользовательОбмена.ПользовательОС;
	КонецЕсли;
	
	ПользовательИБ.АдресЭлектроннойПочты = ТехническийПользовательОбмена.Email; // почта используется для восстановления пароля

	ПользовательИБ.Роли.Очистить();
	
	Если ЗначениеЗаполнено(ТехническийПользовательОбмена.УчетнаяЗаписьWindows) Тогда
		
		ПользовательИБ.АутентификацияОС = Истина;
		
		Попытка
			
			ПользовательИБ.Записать();                            
			
			// фиксация результата
			РезультатПользовательИБ.ПользовательИБ = ПользовательИБ;
			РезультатПользовательИБ.СозданНовый = СозданНовый;
			РезультатПользовательИБ.ОбновленСуществующий = ОбновленСуществующий;
			
		Исключение
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка работы системы при записи пользователя ИБ %1 с именем %2'"), 
				ТехническийПользовательОбмена.Наименование, ПользовательИБ.Имя);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
			ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Администрирование.УправлениеСетью.СоздатьНовогоПользователяИБ", 
				ТекстОшибки, 
				УровеньЖурналаРегистрации.Ошибка,
				Истина);
				
			Возврат РезультатПользовательИБ;
				
		КонецПопытки;
		
	КонецЕсли;
	
	// Идентификация пользователя в спр.Пользователи относительно идентификатора пользователя ИБ.
	Пользователь = Справочники.Пользователи.НайтиПоРеквизиту(
			"ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	
	Если Не ЗначениеЗаполнено(Пользователь)
		И ЗначениеЗаполнено(ТехническийПользовательОбмена.Пользователь) Тогда
		// Если ранее уже был определен в техническом справочнике, то используем.
		Пользователь = ТехническийПользовательОбмена.Пользователь; 
	КонецЕсли;

	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		// Поиск по ФИО + Пользователь ОС.
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Наименование", ПользовательИБ.ПолноеИмя);
		ПараметрыПоиска.Вставить("ПользовательОС", ПользовательИБ.ПользовательОС);
		РезультатПоиска = НайтиПользователя(ПараметрыПоиска);
		Пользователь = РезультатПоиска.Пользователь;
		
		ЕстьЗаполненныйИдентификаторПользователяИБ = ЗначениеЗаполнено(Пользователь)
		   И ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ);
		
		Если ЕстьЗаполненныйИдентификаторПользователяИБ
		   И Пользователь.ИдентификаторПользователяИБ <> ПользовательИБ.УникальныйИдентификатор
		   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		         Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда
			
			Пользователь = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	РезультатПользовательИБ.СвязанныйСправочникПользователи_Ссылка = Пользователь;	
	
	Возврат РезультатПользовательИБ;

КонецФункции

Процедура ДобавитьEmailПользователя(Пользователь, Email)

	// Добавление email.
	Если Не ЗначениеЗаполнено(Email) Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаКИ = Пользователь.КонтактнаяИнформация.Добавить();
	СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	СтрокаКИ.Представление = Email;
	СтрокаКИ.АдресЭП = Email;
	Поз = СтрНайти(СтрокаКИ.АдресЭП, "@");
	Если Поз <> 0 Тогда
		СтрокаКИ.ДоменноеИмяСервера = Сред(СтрокаКИ.АдресЭП, Поз + 1);
	КонецЕсли;

КонецПроцедуры 

Функция ПараметрыЗаполненияТекущегоПользователя()

	ДанныеТекущегоПользователя = Новый Структура;
	ДанныеТекущегоПользователя.Вставить("СправочникПользователи_Ссылка", Справочники.Пользователи.ПустаяСсылка());
	ДанныеТекущегоПользователя.Вставить("СправочникПользователи_Email", "");
	ДанныеТекущегоПользователя.Вставить("ПользовательИБ", Неопределено);
	
	Возврат ДанныеТекущегоПользователя;

КонецФункции

// Проверка на наличие отличий Данных текущего пользователя от Технического пользователя из обмена
//
// Параметры:
//  ДанныеТекущегоПользователя		 - см. функцию ПараметрыЗаполненияТекущегоПользователя() 
//  ТехническийПользовательОбмена	 - СправочникСсылка.ИменаПользователей
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//		* ПользовательИБСуществует - Булево
//		* ЕстьИзменения - Булево - флаг изменения
//		* ИзмененныеРеквизиты - Строка - Возвращает список измененных реквизитов
//
Функция НаличиеОтличийДанныхТекущегоПользователя(ДанныеТекущегоПользователя, ТехническийПользовательОбмена)
	
 	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ПользовательИБСуществует", Ложь);
	РезультатПроверки.Вставить("ЕстьИзменения", Ложь);
	РезультатПроверки.Вставить("ИзмененныеРеквизиты", "");
	
	ПользовательИБ = ДанныеТекущегоПользователя.ПользовательИБ;
	СправочникПользователи_Ссылка = ДанныеТекущегоПользователя.СправочникПользователи_Ссылка;
	
	ЕстьИзменения = Ложь;
	ИзмененныеРеквизиты = "";
	Если ПользовательИБ = Неопределено Тогда
		Возврат РезультатПроверки;	
	КонецЕсли;
		
	РезультатПроверки.ПользовательИБСуществует = Истина;
		
	ПользовательИБДляСравнения = Новый Структура;
	ПользовательИБДляСравнения.Вставить("Наименование",   ПользовательИБ.ПолноеИмя);
	ПользовательИБДляСравнения.Вставить("ПользовательОС", ПользовательИБ.ПользовательОС);
	ПользовательИБДляСравнения.Вставить("Email", 		  ДанныеТекущегоПользователя.СправочникПользователи_Email);
	ПользовательИБДляСравнения.Вставить("Недействителен", СправочникПользователи_Ссылка.Недействителен);
	
	СписокПолейСравнения = Новый Массив;
	СписокПолейСравнения.Добавить("Наименование");
	СписокПолейСравнения.Добавить("ПользовательОС");
	СписокПолейСравнения.Добавить("Недействителен");
	СписокПолейСравнения.Добавить("Email");
	ЕстьИзменения = ОбщегоНазначенияКупоросСервер.ЕстьИзмененияРеквизитовОбъекта(ПользовательИБДляСравнения, 
		ТехническийПользовательОбмена, СписокПолейСравнения,, ИзмененныеРеквизиты); 
	
	РезультатПроверки.ЕстьИзменения = ЕстьИзменения;
	РезультатПроверки.ИзмененныеРеквизиты = ИзмененныеРеквизиты;
		
	Возврат РезультатПроверки;

КонецФункции

Функция ПользовательАдминистратор(Пользователь)
	
	// - Классический БСП от 3.1
	ПрофильАдминистратора = УправлениеДоступом.ПрофильАдминистратор(); 
	Если Не ЗначениеЗаполнено(ПрофильАдминистратора) Тогда
		ВызватьИсключение НСтр("ru = 'Не определен профиль администратора. Необходима доработка конфигурации.'");
	КонецЕсли;

	ПрофилиАдминистраторов = Новый Массив;
	ПрофилиАдминистраторов.Добавить(ПрофильАдминистратора);
	
	МодульГруппыДоступа = ОбщегоНазначения.ОбщийМодуль("Справочники.ГруппыДоступа");
	МассивАдминистраторов = МодульГруппыДоступа.ПользователиДляОбновленияРолейПоПрофилю(ПрофилиАдминистраторов);
	ЭтоАдминистратор =  МассивАдминистраторов.Найти(Пользователь) <> Неопределено;
	
	Возврат ЭтоАдминистратор;
	
КонецФункции

Функция ПолучитьПодразделениеПользователяAD(ТекСтрока, АктуальноеПодразделение, ПодразделениеОсновное)

	 Запрос = Новый Запрос;
	 // BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	 Запрос.Текст = "ВЫБРАТЬ
	                |	СтруктураПредприятияСоответствиеСтруктуреAD.Ссылка КАК Ссылка,
	                |	1 КАК НомерСтроки,
	                |	СтруктураПредприятияСоответствиеСтруктуреAD.ИмяРеквизита КАК ИмяРеквизита,
	                |	СтруктураПредприятияСоответствиеСтруктуреAD.ТипРеквизита КАК ТипРеквизита
	                |ИЗ
	                |	Справочник.СтруктураПредприятия.СоответствиеСтруктуреAD КАК СтруктураПредприятияСоответствиеСтруктуреAD
	                |ГДЕ
	                |	СтруктураПредприятияСоответствиеСтруктуреAD.ИмяРеквизита = &ИмяРеквизитаДолжность
	                |	И СтруктураПредприятияСоответствиеСтруктуреAD.ТипРеквизита = ЗНАЧЕНИЕ(Перечисление.ТипРеквизитаAD.Должность)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	СтруктураПредприятияСоответствиеСтруктуреAD.Ссылка,
	                |	2,
	                |	СтруктураПредприятияСоответствиеСтруктуреAD.ИмяРеквизита,
	                |	СтруктураПредприятияСоответствиеСтруктуреAD.ТипРеквизита
	                |ИЗ
	                |	Справочник.СтруктураПредприятия.СоответствиеСтруктуреAD КАК СтруктураПредприятияСоответствиеСтруктуреAD
	                |ГДЕ
	                |	(СтруктураПредприятияСоответствиеСтруктуреAD.ИмяРеквизита = &ИмяРеквизитаСлужба
	                |				И СтруктураПредприятияСоответствиеСтруктуреAD.ТипРеквизита = ЗНАЧЕНИЕ(Перечисление.ТипРеквизитаAD.Подразделение)
	                |			ИЛИ СтруктураПредприятияСоответствиеСтруктуреAD.ИмяРеквизита = &АктуальноеПодразделение
	                |				И СтруктураПредприятияСоответствиеСтруктуреAD.ТипРеквизита = ЗНАЧЕНИЕ(Перечисление.ТипРеквизитаAD.Подразделение))
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	СтруктураПредприятия.Ссылка,
	                |	999,
	                |	СтруктураПредприятия.Наименование,
	                |	NULL
	                |ИЗ
	                |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	                |ГДЕ
	                |	СтруктураПредприятия.Наименование = &АктуальноеПодразделение
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	НомерСтроки";
	 // BSLLS:LogicalOrInTheWhereSectionOfQuery-on	 
	 Запрос.УстановитьПараметр("ИмяРеквизитаДолжность", ТекСтрока.Должность);
	 Запрос.УстановитьПараметр("ИмяРеквизитаСлужба", ТекСтрока.Служба);
	 Запрос.УстановитьПараметр("НаименованиеПодразделения", ТекСтрока.Служба);
	 Запрос.УстановитьПараметр("АктуальноеПодразделение", АктуальноеПодразделение);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Количество() = 0 Тогда
	 	Возврат ПодразделениеОсновное;
	 КонецЕсли;
	 
	 Пока Выборка.Следующий() Цикл
		 
		 Если Выборка.Ссылка <> ПодразделениеОсновное 
			 И (Не Выборка.Ссылка.ПринадлежитЭлементу(ПодразделениеОсновное)) Тогда
			Продолжить;
		КонецЕсли;

	 	Возврат Выборка.Ссылка;
	 
	 КонецЦикла;

КонецФункции // ПолучитьПодразделениеПользователяAD()

// TODO *Требуется рефакторинг функции. Возвращает результат проверки отличий старого от нового пользователя AD
//
// Параметры:
//  СтарыйПользователь  - СправочникСсылка.ИменаПользователей
//  НовыйПользовательИзAD  - СтрокаТаблицыЗначений  
//  ПодразделениеОсновное  - СправочникСсылка.СтруктураПредприятия - главное подразделение связанное с боксом AD
//
// Возвращаемое значение:
//   СтруктураОтличий - структура со свойствами:
//		* ЕстьИзменения - Булево
//		* ТребуетсяОбновлениеПрав - Булево
//
Функция ЕстьОтличияСтарогоОтНовогоОбъекта(СтарыйПользователь, НовыйПользовательИзAD, АктуальноеПодразделение, ПодразделениеОсновное)
	
	СтруктураОтличий = Новый Структура;
	СтруктураОтличий.Вставить("ЕстьИзменения", Ложь);
	СтруктураОтличий.Вставить("ТребуетсяОбновлениеПрав", Ложь);
	
	Если СтрНайти(НовыйПользовательИзAD.Аккаунт, "-old") > 0 Тогда
		Возврат СтруктураОтличий;
	КонецЕсли;
	
	Если СтарыйПользователь.Наименование <> НовыйПользовательИзAD.Сотрудник Тогда
		СтруктураОтличий.ЕстьИзменения = Истина;
		СтруктураОтличий.ТребуетсяОбновлениеПрав = Истина;
		Возврат СтруктураОтличий;
	КонецЕсли;
	
	Если СтарыйПользователь.Email <> НовыйПользовательИзAD.Email 
		И ЗначениеЗаполнено(НовыйПользовательИзAD.Email) Тогда
		СтруктураОтличий.ЕстьИзменения = Истина;
	КонецЕсли;
	
	НовыйТелефон = СокрЛП(СокрЛП(НовыйПользовательИзAD.ТелефонРабочий) + " " + НовыйПользовательИзAD.ДомашнийТелефон);
	Если СтарыйПользователь.Телефон <> НовыйТелефон 
		И ЗначениеЗаполнено(НовыйТелефон) Тогда
		СтруктураОтличий.ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если СтарыйПользователь.Подразделение <> ПолучитьПодразделениеПользователяAD(НовыйПользовательИзAD, АктуальноеПодразделение, ПодразделениеОсновное) Тогда
		СтруктураОтличий.ЕстьИзменения = Истина;
		СтруктураОтличий.ТребуетсяОбновлениеПрав = Истина;
		Возврат СтруктураОтличий;
	КонецЕсли;
	
	Если  СтарыйПользователь.УчетнаяЗаписьWindows <> НовыйПользовательИзAD.Аккаунт Тогда
		СтруктураОтличий.ЕстьИзменения = Истина;
		СтруктураОтличий.ТребуетсяОбновлениеПрав = Истина;
		Возврат СтруктураОтличий;
	КонецЕсли;
	
	Если СтарыйПользователь.ИдентификаторAD <> НовыйПользовательИзAD.SID Тогда
		СтруктураОтличий.ЕстьИзменения = Истина;
		Возврат СтруктураОтличий;
	КонецЕсли;
	
	Если СтарыйПользователь.Должность <> НовыйПользовательИзAD.Должность 
		И ЗначениеЗаполнено(НовыйПользовательИзAD.Должность) Тогда
		СтруктураОтличий.ЕстьИзменения = Истина;
		Возврат СтруктураОтличий;
	КонецЕсли;
	
	Если  СтарыйПользователь.УчетнаяЗаписьWindows <> НовыйПользовательИзAD.Аккаунт Тогда
		СтруктураОтличий.ЕстьИзменения = Истина;
		СтруктураОтличий.ТребуетсяОбновлениеПрав = Истина;
		Возврат СтруктураОтличий;
	КонецЕсли;
	
	// TODO: Проверить необходимость данного кода.
	//Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтарыйПользователь, "Подразделение.ДобавлятьПользователейАвтоИБ") = Истина Тогда
	//	// проверка на наличие в ИБ включенного пользователя
	//	
	//	ПользовательИБ = Неопределено;
	//	ПользовательСправочника = Справочники.Пользователи.НайтиПоНаименованию(НовыйПользовательИзAD.Сотрудник);
	//	Если Не ПользовательСправочника.Пустая() Тогда
	//		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательСправочника.ИдентификаторПользователяИБ);	
	//	КонецЕсли;
	//	
	//	Если Не (ПользовательИБ <> Неопределено
	//		И Пользователи.ВходВПрограммуРазрешен(ПользовательИБ)) Тогда
	//		// требуется включение пользователя
	//		СтруктураОтличий.ЕстьИзменения = Истина;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Возврат СтруктураОтличий;

КонецФункции // ЕстьОтличияСтарогоОтНовогоОбъекта()

Функция ПолучитьМассивПользователейДляТехУведомлений()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Ссылка,
	               |	Пользователи.Недействителен КАК Недействителен
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	НЕ Пользователи.Недействителен
	               |	И Пользователи.ТехУведомленияНаЭлектроннуюПочту";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	Если Выборка.Количество() > 0 Тогда
		Возврат Выборка.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции // ПолучитьМассивПользователейДляТехУведомлений()

// Функция выделяет из строки ADsPath подразделения
//  возвращает список значений подразделений в строковом типе
//
// Параметры:
//  ADsPath	 - Строка
// 
// Возвращаемое значение:
//  СписокЗначений - строковый список 
//
// Пример:
// После обработки "GC://CN=Ф И О,OU=Административно-хозяйственный отдел,OU=KREK,DC=ksk,DC=loc"	будет "Административно-хозяйственный отдел"
Функция СформироватьСписокПодразделенийИзADsPath(ADsPath)
	
	// Пример: GC://CN=Ф И О,OU=Административно-хозяйственный отдел,OU=KREK,DC=ksk,DC=loc	
	
	СписокЗначенийПодразделений = Новый СписокЗначений;
	
	ОбработаннаяСтрока = ADsPath;
	
	Пока СтрНайти(ОбработаннаяСтрока, "OU=") > 0 Цикл
		
		ОбработаннаяСтрока = Прав(ОбработаннаяСтрока, СтрДлина(ОбработаннаяСтрока) - СтрНайти(ОбработаннаяСтрока, "OU=") - 2);
		
		Подразделение = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ОбработаннаяСтрока, ",");
		
		СписокЗначенийПодразделений.Вставить(0, Подразделение);
		
	КонецЦикла;
	
	Возврат СписокЗначенийПодразделений;

КонецФункции // СформироватьДеревоПодразделенийИзADsPath()

#КонецОбласти

#Область ОбластьРаботыСоСпискомЗапускаИнформационныхБаз1С

Процедура ОбновитьФайлыНастроекСпискаБазПользователейПоПодразделению(Подразделение)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИменаПользователей.Ссылка КАК Ссылка,
	               |	ИменаПользователей.Подразделение КАК Подразделение
	               |ИЗ
	               |	Справочник.ИменаПользователей КАК ИменаПользователей
	               |ГДЕ
	               |	ИменаПользователей.Подразделение В ИЕРАРХИИ(&Подразделение)";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбновитьФайлНастроекСпискаБазПользователя(Выборка.Ссылка);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьФайлыНастроекСпискаБазПользователейПоГруппыПользователейAD(ГруппаAD)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователейADПользователиГруппы.ИмяПользователя КАК ИмяПользователя
	               |ИЗ
	               |	Справочник.ГруппыПользователейAD.ПользователиГруппы КАК ГруппыПользователейADПользователиГруппы
	               |ГДЕ
	               |	ГруппыПользователейADПользователиГруппы.Ссылка = &ГруппаAD";
	
	Запрос.УстановитьПараметр("ГруппаAD", ГруппаAD);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбновитьФайлНастроекСпискаБазПользователя(Выборка.ИмяПользователя);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьФайлыНастроекСпискаБазПользователейПоГруппеПользователей(ГруппаПользователей)

	МассивПользователей = РаботаСЗадачами.СписокПользователейПоГруппе(ГруппаПользователей);	
	
	Для каждого ТекСтрока Из МассивПользователей Цикл
	
		// определить пользователя в именах пользователей
		Пользователь = Справочники.ИменаПользователей.НайтиПоНаименованию(ТекСтрока.Наименование);
		Если (Не Пользователь.Пустая()) Тогда
		 	ОбновитьФайлНастроекСпискаБазПользователя(Пользователь);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаПользователейПоПодразделению(Подразделение)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИменаПользователей.Ссылка КАК Ссылка,
	               |	ИменаПользователей.Подразделение КАК Подразделение,
	               |	ИменаПользователей.Пользователь КАК Пользователь
	               |ИЗ
	               |	Справочник.ИменаПользователей КАК ИменаПользователей
	               |ГДЕ
	               |	ИменаПользователей.Подразделение В ИЕРАРХИИ(&Подразделение)";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Возврат Выборка;

КонецФункции

Функция ТаблицаПользователейПоГруппыПользователейAD(ГруппаAD)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователейADПользователиГруппы.Ссылка КАК Ссылка,
	               |	ГруппыПользователейADПользователиГруппы.ИмяПользователя КАК ИмяПользователя,
	               |	ГруппыПользователейADПользователиГруппы.ИмяПользователя.Пользователь КАК Пользователь
	               |ИЗ
	               |	Справочник.ГруппыПользователейAD.ПользователиГруппы КАК ГруппыПользователейADПользователиГруппы
	               |ГДЕ
	               |	ГруппыПользователейADПользователиГруппы.Ссылка = &ГруппаAD";
	
	Запрос.УстановитьПараметр("ГруппаAD", ГруппаAD);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Возврат Выборка;

КонецФункции

Функция ТаблицаПользователейПоПоГруппеПользователей(ГруппаПользователей)

	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Пользователь");
	
	МассивПользователей = РаботаСЗадачами.СписокПользователейПоГруппе(ГруппаПользователей);	
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаПользователей, МассивПользователей, "Пользователь");
	
	Возврат ТаблицаПользователей;
	
КонецФункции

// Создание списка общих баз пользователей по новым пользователям AD
//
Процедура СозданиеСпискаОбщихБазПользователей()

	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ИменаПользователей.Ссылка КАК Ссылка,
	                |	ИменаПользователей.Пользователь КАК Пользователь
	                |ИЗ
	                |	Справочник.ИменаПользователей КАК ИменаПользователей
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СписокОбщихБазПользователей КАК СписокОбщихБазПользователей
	                |		ПО ИменаПользователей.Пользователь = СписокОбщихБазПользователей.Пользователь
	                |ГДЕ
	                |	ИменаПользователей.ПринадлежитКAD
	                |	И НЕ ИменаПользователей.Недействителен
	                |	И НЕ ИменаПользователей.ПометкаУдаления
	                |	И СписокОбщихБазПользователей.Ссылка ЕСТЬ NULL
	                |	И ИменаПользователей.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
		СозданиеОбновлениеПользователяОбщихБаз(Выборка.Пользователь);
		
		ОбновлениеСпискаОбщихБазПользователей(Выборка.Пользователь);
		
	 КонецЦикла;
	 
КонецПроцедуры 

// Рекурсивная процедура. Обновление списка общих баз пользователей
//	Если не указан параметр Пользователь: 
//		* поиск по дате изменения списков информационных баз всех пользователей по которым нужно обновить данные
//		* у найденных вызов этой же процедуры с параметром Пользователь 
//  Если указан параметр Пользователь: поиск всех баз на данный момент привязанных к пользователю и обновление списка ИБ для них
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Необязательный параметр
//
Процедура ОбновлениеСпискаОбщихБазПользователей(Пользователь = "")
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ПараметрыПодсистемы = РегистрыСведений.ПараметрыКупорос.Параметры();
	
	ДатаНачалаЗагрузки = ПараметрыПодсистемы.ДатаОбновленияСпискаБазПользователей;
	ДатаНачалаЗагрузки = ДатаНачалаЗагрузки - 60 * 5; // уходим назад на 5 минут для страховки
	
	// - Обновление справочника СписокОбщихБазПользователей.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокИнформационныхБаз1С.Ссылка КАК Ссылка,
	               |	СписокИнформационныхБаз1ССписокПравДоступа.ОбъектДоступа КАК ОбъектДоступа
	               |ПОМЕСТИТЬ ВТ_СписокИзмененныхБаз
	               |ИЗ
	               |	Справочник.СписокИнформационныхБаз1С.СписокПравДоступа КАК СписокИнформационныхБаз1ССписокПравДоступа
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СписокИнформационныхБаз1С КАК СписокИнформационныхБаз1С
	               |		ПО СписокИнформационныхБаз1ССписокПравДоступа.Ссылка = СписокИнформационныхБаз1С.Ссылка
	               |ГДЕ
	               |	СписокИнформационныхБаз1С.ДатаИзмененияПараметровБазы >= &ДатаНачалаЗагрузки
	               |	И СписокИнформационныхБаз1С.Используется
	               |	И СписокИнформационныхБаз1С.ИспользоватьВебСервисДляОбновленияСпискаБаз
	               |	И НЕ СписокИнформационныхБаз1С.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИменаПользователей.Пользователь КАК Пользователь,
	               |	ИменаПользователей.Ссылка КАК ИмяПользователя
	               |ПОМЕСТИТЬ ВТ_ДанныеПользователя
	               |ИЗ
	               |	Справочник.ИменаПользователей КАК ИменаПользователей
	               |ГДЕ
	               |	НЕ ИменаПользователей.ПометкаУдаления
	               |	И ИменаПользователей.ПринадлежитКAD
	               |	И НЕ ИменаПользователей.Недействителен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Пользователи.Пользователь КАК Пользователь,
	               |	ВТ_СписокИзмененныхБаз.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_БазыИсходные
	               |ИЗ
	               |	ВТ_СписокИзмененныхБаз КАК ВТ_СписокИзмененныхБаз
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеПользователя КАК Пользователи
	               |		ПО ВТ_СписокИзмененныхБаз.ОбъектДоступа = Пользователи.Пользователь
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ДанныеПользователя.Пользователь,
	               |	ВТ_СписокИзмененныхБаз.Ссылка
	               |ИЗ
	               |	ВТ_ДанныеПользователя КАК ВТ_ДанныеПользователя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователей
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокИзмененныхБаз КАК ВТ_СписокИзмененныхБаз
	               |			ПО (ВТ_СписокИзмененныхБаз.ОбъектДоступа = ГруппыПользователей.Ссылка)
	               |		ПО ВТ_ДанныеПользователя.Пользователь = ГруппыПользователей.Пользователь
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ДанныеПользователя.Пользователь,
	               |	ВТ_СписокИзмененныхБаз.Ссылка
	               |ИЗ
	               |	ВТ_СписокИзмененныхБаз КАК ВТ_СписокИзмененныхБаз
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеПользователя КАК ВТ_ДанныеПользователя
	               |		ПО ВТ_СписокИзмененныхБаз.ОбъектДоступа = ВТ_ДанныеПользователя.ИмяПользователя
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ДанныеПользователя.Пользователь,
	               |	ВТ_СписокИзмененныхБаз.Ссылка
	               |ИЗ
	               |	ВТ_ДанныеПользователя КАК ВТ_ДанныеПользователя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователейAD.ПользователиГруппы КАК ГруппыПользователейAD
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокИзмененныхБаз КАК ВТ_СписокИзмененныхБаз
	               |			ПО ГруппыПользователейAD.Ссылка = ВТ_СписокИзмененныхБаз.ОбъектДоступа
	               |		ПО ВТ_ДанныеПользователя.ИмяПользователя = ГруппыПользователейAD.ИмяПользователя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_БазыИсходные.Пользователь КАК Пользователь,
	               |	ВТ_БазыИсходные.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Базы
	               |ИЗ
	               |	ВТ_БазыИсходные КАК ВТ_БазыИсходные
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Базы.Пользователь КАК Пользователь,
	               |	ИБ.Ссылка КАК Ссылка,
	               |	ИБ.ОписаниеВФормате_v8i КАК ОписаниеВФормате_v8i,
	               |	ИБ.Родитель КАК Группа,
	               |	ИБ.Родитель.Наименование КАК НаименованиеГруппы
	               |ИЗ
	               |	ВТ_Базы КАК ВТ_Базы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СписокИнформационныхБаз1С КАК ИБ
	               |		ПО ВТ_Базы.Ссылка = ИБ.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИБ.Родитель,
	               |	ИБ.Ссылка
	               |ИТОГИ
	               |	МАКСИМУМ(НаименованиеГруппы)
	               |ПО
	               |	Пользователь,
	               |	Группа
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНачалаЗагрузки", ДатаНачалаЗагрузки);
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СписокИнформационныхБаз1С.ДатаИзмененияПараметровБазы >= &ДатаНачалаЗагрузки", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИменаПользователей.ПринадлежитКAD", 
			"И ИменаПользователей.ПринадлежитКAD И ИменаПользователей.Пользователь = &Пользователь");
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаПоПользователям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПользователям.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПоПользователям.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
		    // Рекурсивный вызов.
			ОбновлениеСпискаОбщихБазПользователей(ВыборкаПоПользователям.Пользователь);
			Продолжить;
			
		КонецЕсли;
		
		СписокИБ = "";

		ВыборкаПоГруппам = ВыборкаПоПользователям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоГруппам.Следующий() Цикл
			
			
			Если ЗначениеЗаполнено(ВыборкаПоГруппам.Группа) Тогда
				ОписаниеГруппы = "[%1]
				|ID=%2";
				
				СписокИБ = СписокИБ + Символы.ПС + СтрШаблон(ОписаниеГруппы, ВыборкаПоГруппам.НаименованиеГруппы, 
					Строка(ВыборкаПоГруппам.Группа.УникальныйИдентификатор()));		
			КонецЕсли; 
			
			Выборка = ВыборкаПоГруппам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СписокИБ = СписокИБ + Символы.ПС + Выборка.ОписаниеВФормате_v8i;
				
			КонецЦикла; 
			
		КонецЦикла;
		
		// - Обновление справочника "Список общих баз пользователей".
		СозданиеОбновлениеПользователяОбщихБаз(ВыборкаПоПользователям.Пользователь, СписокИБ);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Пользователь) 
		И ВыборкаПоПользователям.Количество() = 0 Тогда
		// Если баз не выявлено у пользователя никаких, то обнуляем текущий список баз.
		СозданиеОбновлениеПользователяОбщихБаз(Пользователь, "");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
	
		// - Фиксация последней успешной загрузки изменений.
		МенеджерЗаписи = РегистрыСведений.ПараметрыКупорос.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ДатаОбновленияСпискаБазПользователей = ТекущаяДата;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;

КонецПроцедуры 

Процедура СозданиеОбновлениеПользователяОбщихБаз(Пользователь, СписокИБ = "")
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйПользовательСпискаБаз = Справочники.СписокОбщихБазПользователей.НайтиСписокПоПользователю(Пользователь);
	Если Не ЗначениеЗаполнено(НайденныйПользовательСпискаБаз) Тогда
		ОбъектСписокОбщихБаз = Справочники.СписокОбщихБазПользователей.СоздатьЭлемент();
		ОбъектСписокОбщихБаз.Код = Строка(Новый УникальныйИдентификатор());
		ОбъектСписокОбщихБаз.Пользователь = Пользователь;
	Иначе
		ОбъектСписокОбщихБаз = НайденныйПользовательСпискаБаз.ПолучитьОбъект();
	КонецЕсли;
	
	ОбъектСписокОбщихБаз.СписокИБ = СписокИБ;
	ОбъектСписокОбщихБаз.ТребуетсяОбновитьСписокИБ = Ложь;
	
	// "Код списка" и "Дата изменения" обновляются автоматически при записи.
	
	ОбъектСписокОбщихБаз.Записать();

КонецПроцедуры 

Процедура ОбновлениеСпискаОбщихБазИзмененныхОбъектовДоступа()

	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	СписокОбщихБазПользователей.Ссылка КАК Ссылка,
	                |	СписокОбщихБазПользователей.ТребуетсяОбновитьСписокИБ КАК ТребуетсяОбновитьСписокИБ,
	                |	СписокОбщихБазПользователей.Пользователь КАК Пользователь
	                |ИЗ
	                |	Справочник.СписокОбщихБазПользователей КАК СписокОбщихБазПользователей
	                |ГДЕ
	                |	СписокОбщихБазПользователей.ТребуетсяОбновитьСписокИБ
	                |	И НЕ СписокОбщихБазПользователей.ПометкаУдаления
	                |	И СписокОбщихБазПользователей.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
	 	ОбновлениеСпискаОбщихБазПользователей(Выборка.Пользователь);	
	 
	 КонецЦикла;
	
КонецПроцедуры 

Функция ПолучитьСлужебнуюПапкуПодразделения(Подразделение)
	
	ПутьККаталогуПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтруктураПредприятия.СлужебнаяПапка , "ПутьККаталогуПодразделения");
	
	Если (Не ЗначениеЗаполнено(Подразделение)) 
		Или Подразделение = Справочники.СтруктураПредприятия.СлужебнаяПапка Тогда
		Возврат Справочники.СтруктураПредприятия.СлужебнаяПапка.ПутьККаталогуПодразделения;
	КонецЕсли;
	
	Возврат ПутьККаталогуПодразделения;

КонецФункции // ПолучитьСлужебнуюПапкуПодразделения()

#КонецОбласти

#Область ШаблоныДоступа

// Возвращает список пользователей группы AD и необходимым действиям, которые нужно сделать для обновления
//
// Параметры:
//  ГруппаДоступаAD	 - СправочникСсылка.ГруппыПользователейAD - Если не задан, то анализ всех групп доступа (необязательный параметр) 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - содержит колонки:
//		* ИмяПользователя - СправочникСсылка.ИменаПользователей - ссылка на пользователя
//		* ГруппаAD - СправочникСсылка.ГруппыПользователейAD - ссылка на группу AD, в которой есть пользователь
//		* ШаблонДоступа - СправочникСсылка.ШаблоныДоступаПользователей - ссылка на доступ из группы AD
//		* ТребуетсяДобавитьШаблонДоступа - Булево - Истина, в случается отсутствия шаблона доступа у пользователя в справочнике ИменаПользователей
//		* ТребуетсяУдалитьШаблонДоступа - Булево - Истина, в случае если отсутствия шаблона доступа в Группе AD, но есть в справочнике ИменаПользователей
//
Функция СписокПользователейГруппыADСШаблонамиДоступа(ГруппаДоступаAD = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователейADПользователиГруппы.ИмяПользователя КАК ИмяПользователя,
	               |	ГруппыПользователейADПользователиГруппы.Ссылка КАК ГруппаAD
	               |ПОМЕСТИТЬ ВТ_ПользователиГруппы
	               |ИЗ
	               |	Справочник.ГруппыПользователейAD.ПользователиГруппы КАК ГруппыПользователейADПользователиГруппы
	               |ГДЕ
	               |	ГруппыПользователейADПользователиГруппы.Ссылка.УстанавливатьДоступыПользователям
	               |	И НЕ ГруппыПользователейADПользователиГруппы.Ссылка.ПометкаУдаления
	               |	И (ГруппыПользователейADПользователиГруппы.Ссылка = &ГруппаAD
	               |			ИЛИ &ГруппаAD В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ГруппыПользователейAD.ПустаяСсылка)))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПользователиГруппы.ИмяПользователя КАК ИмяПользователя,
	               |	ВТ_ПользователиГруппы.ГруппаAD КАК ГруппаAD,
	               |	ГруппыПользователейADДоступы.ШаблонДоступа КАК ШаблонДоступа,
	               |	ГруппыПользователейADДоступы.ШаблонДоступа.Недействителен КАК ШаблонДоступаНедействителен
	               |ПОМЕСТИТЬ ВТ_ПользователиГруппыСШаблономДоступа
	               |ИЗ
	               |	ВТ_ПользователиГруппы КАК ВТ_ПользователиГруппы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователейAD.Доступы КАК ГруппыПользователейADДоступы
	               |		ПО ВТ_ПользователиГруппы.ГруппаAD = ГруппыПользователейADДоступы.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИменаПользователейПраваПользователя.Ссылка КАК ИмяПользователя,
	               |	ИменаПользователейПраваПользователя.ШаблонДоступа КАК ШаблонДоступа,
	               |	ИменаПользователейПраваПользователя.Основание КАК Основание
	               |ПОМЕСТИТЬ ВТ_ОснованиеНеИмеетШаблонаДоступа
	               |ИЗ
	               |	Справочник.ИменаПользователей.ПраваПользователя КАК ИменаПользователейПраваПользователя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПользователиГруппыСШаблономДоступа КАК ВТ_ПользователиГруппыСШаблономДоступа
	               |		ПО ИменаПользователейПраваПользователя.Ссылка = ВТ_ПользователиГруппыСШаблономДоступа.ИмяПользователя
	               |			И ИменаПользователейПраваПользователя.Основание = ВТ_ПользователиГруппыСШаблономДоступа.ГруппаAD
	               |			И ИменаПользователейПраваПользователя.ШаблонДоступа = ВТ_ПользователиГруппыСШаблономДоступа.ШаблонДоступа
	               |ГДЕ
	               |	ВТ_ПользователиГруппыСШаблономДоступа.ИмяПользователя ЕСТЬ NULL
	               |	И НЕ ИменаПользователейПраваПользователя.Ссылка.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПользователиГруппыСШаблономДоступа.ИмяПользователя КАК ИмяПользователя,
	               |	ВТ_ПользователиГруппыСШаблономДоступа.ГруппаAD КАК ГруппаAD,
	               |	ВТ_ПользователиГруппыСШаблономДоступа.ШаблонДоступа КАК ШаблонДоступа,
	               |	ВЫБОР
	               |		КОГДА ИменаПользователейПраваПользователя.Ссылка ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ТребуетсяДобавитьШаблонДоступа,
	               |	ЛОЖЬ КАК ТребуетсяУдалитьШаблонДоступа
	               |ИЗ
	               |	ВТ_ПользователиГруппыСШаблономДоступа КАК ВТ_ПользователиГруппыСШаблономДоступа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИменаПользователей.ПраваПользователя КАК ИменаПользователейПраваПользователя
	               |		ПО ВТ_ПользователиГруппыСШаблономДоступа.ИмяПользователя = ИменаПользователейПраваПользователя.Ссылка
	               |			И ВТ_ПользователиГруппыСШаблономДоступа.ШаблонДоступа = ИменаПользователейПраваПользователя.ШаблонДоступа
	               |			И ВТ_ПользователиГруппыСШаблономДоступа.ГруппаAD = ИменаПользователейПраваПользователя.Основание
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОснованиеНеИмеетШаблонаДоступа.ИмяПользователя,
	               |	ВТ_ОснованиеНеИмеетШаблонаДоступа.Основание,
	               |	ВТ_ОснованиеНеИмеетШаблонаДоступа.ШаблонДоступа,
	               |	ЛОЖЬ,
	               |	ИСТИНА
	               |ИЗ
	               |	ВТ_ОснованиеНеИмеетШаблонаДоступа КАК ВТ_ОснованиеНеИмеетШаблонаДоступа";
	
	Запрос.УстановитьПараметр("ГруппаAD", ГруппаДоступаAD);
	Результат = Запрос.Выполнить();
	СписокПользователейГруппы = Результат.Выгрузить();
	
	Возврат СписокПользователейГруппы;

КонецФункции

#КонецОбласти

#КонецОбласти
