
#Область ПрограммныйИнтерфейс

Процедура ОбновитьСведенияОЗадаче(Исполнитель, Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Месяц КАК Месяц,
	|	СУММА(ВложенныйЗапрос.Запланировано) КАК Запланировано,
	|	СУММА(ВложенныйЗапрос.Затрачено) КАК Затрачено,
	|	МАКСИМУМ(ВложенныйЗапрос.ПлановаяДатаВыполнения) КАК ПлановаяДатаВыполнения
	|ПОМЕСТИТЬ ВТ_ДанныеПоМесяцам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланыПоЗадачам.Месяц КАК Месяц,
	|		ПланыПоЗадачам.Запланировано КАК Запланировано,
	|		0 КАК Затрачено,
	|		ПланыПоЗадачам.ПлановаяДатаВыполнения КАК ПлановаяДатаВыполнения
	|	ИЗ
	|		РегистрСведений.ПланыПоЗадачам КАК ПланыПоЗадачам
	|	ГДЕ
	|		ПланыПоЗадачам.Исполнитель = &Исполнитель
	|		И ПланыПоЗадачам.Задача = &Задача
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УчетРабочегоВремени.Месяц,
	|		0,
	|		УчетРабочегоВремени.Затрачено,
	|		ДАТАВРЕМЯ(1, 1, 1)
	|	ИЗ
	|		РегистрСведений.УчетРабочегоВремени КАК УчетРабочегоВремени
	|	ГДЕ
	|		УчетРабочегоВремени.Исполнитель = &Исполнитель
	|		И УчетРабочегоВремени.Задача = &Задача) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_ДанныеПоМесяцам.Затрачено) КАК Затрачено
	|ИЗ
	|	ВТ_ДанныеПоМесяцам КАК ВТ_ДанныеПоМесяцам";
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("Задача", Задача);
	
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	// СведенияОЗадачахСводные
	Выборка = РезультатЗапроса[1].Выбрать();
	Выборка.Следующий();
	
	МенеджерЗаписи = РегистрыСведений.СведенияОЗадачахСводные.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Исполнитель = Исполнитель;
	МенеджерЗаписи.Задача = Задача;
	МенеджерЗаписи.Затрачено = Выборка.Затрачено;
	МенеджерЗаписи.Записать();
	
	// СведенияОЗадачахПоМесяцам
	НаборЗаписей = РегистрыСведений.СведенияОЗадачахПоМесяцам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Исполнитель.Установить(Исполнитель);
	НаборЗаписей.Отбор.Задача.Установить(Задача);
	
	Выборка = РезультатЗапроса[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Исполнитель = Исполнитель;
		НоваяЗапись.Задача = Задача;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает затраченное время на работу в виде соответствия
//
// Параметры:
//  Исполнитель		 - СправочникСсылка.Пользователи 
//  ДатаНачала		 - Дата 
//  ДатаОкончания	 - Дата 
// 
// Возвращаемое значение:
//  Соответствие 
//
Функция ЗатраченноеВремяНаРаботу(Исполнитель, ДатаНачала, ДатаОкончания) Экспорт
	
	ГрафикРаботы = РегистрыСведений.СведенияОПользователяхКупорос.ГрафикРаботыПользователя(Исполнитель);
	СведенияОПользователе = РегистрыСведений.СведенияОПользователяхКупорос.СведенияОПользователе(Исполнитель);
	АвтоматическиУчитыватьОбеденноеВремя = СведенияОПользователе.АвтоматическиУчитыватьОбеденноеВремяПриРасчетеЗатраченногоВремени;
	
	ЗатраченноеВремя = Новый Соответствие;
	
	Если НачалоДня(ДатаОкончания) = НачалоДня(ДатаНачала) Тогда
		
		ДобавитьВремяЗаДень(ЗатраченноеВремя, НачалоДня(ДатаНачала), ГрафикРаботы, АвтоматическиУчитыватьОбеденноеВремя, ДатаНачала, ДатаОкончания);
		
	Иначе
		
		ДобавитьЗатраченноеВремяЗаПериод(ЗатраченноеВремя, ГрафикРаботы, АвтоматическиУчитыватьОбеденноеВремя, ДатаНачала, ДатаОкончания, Исполнитель);
		
	КонецЕсли;
	
	Возврат ЗатраченноеВремя;
	
КонецФункции

// Универсальная процедура. Определят разницу только времени от двух дат
//
// Параметры:
//  ДатаНачала		 - Дата - обязательно со временем 
//  ДатаОкончания	 - Дата - обязательно со временем
// 
// Возвращаемое значение:
//  Число - количество секунд 
//
Функция РазностьВремени(ДатаНачала, ДатаОкончания) Экспорт
	
	СекундДоДаты = ДатаНачала - НачалоДня(ДатаНачала);
	ВремяНачала = '00010101' + СекундДоДаты;
	СекундДоДаты = ДатаОкончания - НачалоДня(ДатаОкончания);
	ВремяОкончания = '00010101' + СекундДоДаты;
	ВремяЗаДень = (ВремяОкончания - ВремяНачала);
	
	Возврат ВремяЗаДень;
	
КонецФункции

// Поиск и добавление задачи в таблица (поиск по: внешней ссылке, внешнему идентификатору, внешнему номеру, номеру)
//
// Параметры:
//  Объект				 - ЛюбаяСсылка 
//  ИмяТаблицыЗадач		 - Строка - имя табличной части в объекте. Должна содержать колонки: Задача, Трудозатраты
//  ИдентификаторЗадачи	 - Строка - строка поиска 
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//		* РезультатТекст - Строка - варианты: "Задача добавлена." Или "Задача уже присутствует в списке." Или "Задача не найдена."
//		* ЗадачаДобавлена - Булево - Истина, в случае если ранее задачи не было и добавлена новая строка с задачей
//		* ИдентификаторСтрокиЗадачи - Число - идентификатор добавленной задачи (НоваяСтрока.ПолучитьИдентификатор()), для возможности позиционирования
//
Функция ДобавитьЗадачуПоНомеруСсылкеВТаблицу(Объект, ИмяТаблицыЗадач, ИдентификаторЗадачи) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("РезультатТекст", "");
	СтруктураРезультата.Вставить("ЗадачаДобавлена", Ложь);
	СтруктураРезультата.Вставить("ИдентификаторСтрокиЗадачи", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка КАК Ссылка,
	|	ЗадачиПользователя.ОстатокТрудозатрат КАК Трудозатраты,
	|	1 КАК Порядок
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ПОДСТРОКА(ЗадачиПользователя.ВнешняяСсылка, 1, 1000) = &ВнешняяСсылка
	|	И ЗадачиПользователя.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.ТипыЗадач.Разработка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка,
	|	ЗадачиПользователя.ОстатокТрудозатрат,
	|	2
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.ВнешнийИдентификатор В(&ВнешнийИдентификатор)
	|	И ЗадачиПользователя.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.ТипыЗадач.Разработка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка,
	|	ЗадачиПользователя.ОстатокТрудозатрат,
	|	3
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.ВнешнийНомер = &ВнешнийНомер
	|	И ЗадачиПользователя.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.ТипыЗадач.Разработка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка,
	|	ЗадачиПользователя.ОстатокТрудозатрат,
	|	4
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.Номер = &ВнешнийНомер
	|	И ЗадачиПользователя.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.ТипыЗадач.Разработка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("ВнешняяСсылка", ИдентификаторЗадачи);
	Запрос.УстановитьПараметр("ВнешнийНомер", ИдентификаторЗадачи);
	
	ВнешнийИдентификатор = Новый Массив;
	ВнешнийИдентификатор.Добавить(ИдентификаторЗадачи);
	
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 0, ДопустимыйЗнак.Неотрицательный));
	ИдентификаторЧисло = ТипЧисло.ПривестиЗначение(ИдентификаторЗадачи);
	
	Если ЗначениеЗаполнено(ИдентификаторЧисло) Тогда
		
		ВнешнийИдентификатор.Добавить(ИдентификаторЧисло);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВнешнийИдентификатор", ВнешнийИдентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ПараметрыОтбора = Новый Структура("Задача", Выборка.Ссылка);
		НайденныеСтроки = Объект[ИмяТаблицыЗадач].НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = Объект[ИмяТаблицыЗадач].Добавить();
			НоваяСтрока.Задача = Выборка.Ссылка;
			НоваяСтрока.Трудозатраты = Выборка.Трудозатраты;
			
			Если ИмяТаблицыЗадач = "СписокЗадач" Тогда
			    НоваяСтрока.ДатаДобавления = ТекущаяДатаСеанса();
			КонецЕсли;
			
			СтруктураРезультата.ИдентификаторСтрокиЗадачи = НоваяСтрока.ПолучитьИдентификатор();
			
			СтруктураРезультата.РезультатТекст = НСтр("ru = 'Задача добавлена.'");
			СтруктураРезультата.ЗадачаДобавлена = Истина;
			
		Иначе
			
			СтруктураРезультата.РезультатТекст = НСтр("ru = 'Задача уже присутствует в списке.'");
			
		КонецЕсли;
		
	Иначе
		
		СтруктураРезультата.РезультатТекст = НСтр("ru = 'Задача не найдена.'");
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Обновляет трудозатраты в таблице значений
//
// Параметры:
//  СписокЗадач			 - ТаблицаЗначений:
//		* Задача - ЗадачаСсылка.ЗадачиПользователя 
//		* УчитыватьТолькоВремяНаОценку - Булево 
//		* Трудозатраты - Число 
//  Задача				 - Неопределено
//						 - ЗадачаСсылка.ЗадачиПользователя 
//
Процедура ОбновитьТрудозатратыВЗадачах(СписокЗадач, Задача = Неопределено) Экспорт
	
	Если Задача = Неопределено Тогда
		
		МассивЗадач = СписокЗадач.ВыгрузитьКолонку("Задача");
		
	Иначе
		
		МассивЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача);
		
	КонецЕсли;
	
	ТрудозатратыПоЗадачам = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗадач, "ОстатокТрудозатрат, ТрудозатратыНаОценку, ТрудозатратыПланНаСпринт");
	
	Для каждого СтрокаТаблицы Из СписокЗадач Цикл
		
		ОписаниеЗадачи = ТрудозатратыПоЗадачам[СтрокаТаблицы.Задача];
		
		Если ОписаниеЗадачи = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.УчитыватьТолькоВремяНаОценку Тогда
			
			СтрокаТаблицы.Трудозатраты = ОписаниеЗадачи.ТрудозатратыНаОценку;
			
		Иначе
			
			СтрокаТаблицы.Трудозатраты = СкорректироватьТрудозатратыПоПлануНаСпринт(ОписаниеЗадачи.ОстатокТрудозатрат, ОписаниеЗадачи.ТрудозатратыПланНаСпринт);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает трудозатраты с поправкой на план спринта
//
// Параметры:
//  Трудозатраты			 - Число	 - Базовое число трудозатрат
//  ТрудозатратыПланНаСпринт - Число	 - План трудозатрат на текущий спринт
// 
// Возвращаемое значение:
//   Число - скорректированные трудозатраты
//
Функция СкорректироватьТрудозатратыПоПлануНаСпринт(Знач Трудозатраты, Знач ТрудозатратыПланНаСпринт) Экспорт

	Если ТрудозатратыПланНаСпринт = 0 Тогда
		Возврат Трудозатраты;
	КонецЕсли;
	
	Если Трудозатраты <= ТрудозатратыПланНаСпринт Тогда
		// Если план на спринт больше (или равен) остатку трудозатрат, то берётся остаток трудозатрат целиком.
		Возврат Трудозатраты;
	КонецЕсли;
	
	Возврат ТрудозатратыПланНаСпринт;	
	
КонецФункции 

// Фиксация трудозатрат за день
//
// Параметры:
//  Исполнитель			 - СправочникСсылка.Пользователи
//  Задача				 - ЗадачаСсылка.ЗадачиПользователя 
//  ДеньТрудозатрат		 - Дата 
//  ТрудозатратыЗаДень	 - ТаблицаЗначений - состоит из колонок:
//		* ТипРаботы - ПеречислениеСсылка.ТипыРаботПоЗадачам
//		* Затрачено - Число
//		* Комментарий - Строка
//
Процедура ФиксацияТрудозатратЗаДень(Исполнитель, Задача, ДеньТрудозатрат, ТрудозатратыЗаДень, Шаблон = Неопределено) Экспорт
	
	// Удалим строки с нулевыми трудозатратами.
	ПараметрыОтбора = Новый Структура("Затрачено", 0);
	СтрокиКУдалению = ТрудозатратыЗаДень.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
		
		ТрудозатратыЗаДень.Удалить(СтрокаТаблицы);
		
	КонецЦикла;
	
	НаборЗаписей = НаборЗаписейПоРегистру(Исполнитель, Задача, ДеньТрудозатрат, Шаблон);
	НаборЗаписей.Загрузить(ТрудозатратыЗаДень);
	
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		
		ЗаписьНабора.Исполнитель = Исполнитель;
		ЗаписьНабора.Задача = Задача;
		ЗаписьНабора.День = ДеньТрудозатрат;
		ЗаписьНабора.Месяц = НачалоМесяца(ДеньТрудозатрат);
		
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

// Создание набор записей по регистру УчетРабочегоВремени
//
// Параметры:
//  Исполнитель	- СправочникСсылка.Пользователи
//  Задача - ЗадачаСсылка.ЗадачиПользователя 
//  ОтборДень - Дата 
//  Шаблон - СправочникСсылка.ШаблоныПлановыхТрудозатрат
// 
// Возвращаемое значение:
//  НаборЗаписей - см. структуру регистра сведений УчетРабочегоВремени
//
Функция НаборЗаписейПоРегистру(Исполнитель, Задача, ОтборДень, Шаблон = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.УчетРабочегоВремени.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Исполнитель.Установить(Исполнитель);
	НаборЗаписей.Отбор.Задача.Установить(Задача);
	НаборЗаписей.Отбор.День.Установить(ОтборДень);
	
	Если Шаблон <> Неопределено Тогда
		НаборЗаписей.Отбор.ШаблонПлановыхЗатрат.Установить(Шаблон);
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЗатраченноеВремяЗаПериод(ЗатраченноеВремя, ГрафикРаботы, АвтоматическиУчитыватьОбеденноеВремя, ДатаНачала, ДатаОкончания, Исполнитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
	|ПОМЕСТИТЬ ВТ_РабочиеДни
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеПроизводственногоКалендаря.ВидДня В(&ВидыДней)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РабочиеДни.Дата КАК День
	|ПОМЕСТИТЬ ВТ_ОтсутствияИсполнителей
	|ИЗ
	|	РегистрСведений.ОтсутствияИсполнителей КАК ОтсутствияИсполнителей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РабочиеДни КАК ВТ_РабочиеДни
	|		ПО ОтсутствияИсполнителей.ДатаНачала <= ВТ_РабочиеДни.Дата
	|			И ОтсутствияИсполнителей.ДатаОкончания >= ВТ_РабочиеДни.Дата
	|ГДЕ
	|	ОтсутствияИсполнителей.Исполнитель = &Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РабочиеДни.Дата КАК Дата,
	|	ВТ_РабочиеДни.ВидДня КАК ВидДня
	|ИЗ
	|	ВТ_РабочиеДни КАК ВТ_РабочиеДни
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтсутствияИсполнителей КАК ВТ_ОтсутствияИсполнителей
	|		ПО ВТ_РабочиеДни.Дата = ВТ_ОтсутствияИсполнителей.День
	|ГДЕ
	|	ВТ_ОтсутствияИсполнителей.День ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ДеньНачала = НачалоДня(ДатаНачала);
	ДеньОкончания = НачалоДня(ДатаОкончания);
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("ДатаНачала", ДеньНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДеньОкончания);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", РегистрыСведений.ПараметрыПодсистемыПланированиеЗадач.ЗначениеПараметра("ПроизводственныйКалендарь"));
	
	ВидыДней = Новый Массив;
	ВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	ВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	Запрос.УстановитьПараметр("ВидыДней", ВидыДней);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дата = ДеньНачала Тогда
			
			Если Выборка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
				
				ДобавитьВремяЗаДень(ЗатраченноеВремя, Выборка.Дата, ГрафикРаботы, АвтоматическиУчитыватьОбеденноеВремя, ДатаНачала, ГрафикРаботы.КонецРабочегоДня - 3600);
				
			Иначе
				
				ДобавитьВремяЗаДень(ЗатраченноеВремя, Выборка.Дата, ГрафикРаботы, АвтоматическиУчитыватьОбеденноеВремя, ДатаНачала, ГрафикРаботы.КонецРабочегоДня);
				
			КонецЕсли;
			
		ИначеЕсли Выборка.Дата = ДеньОкончания Тогда
			
			ДобавитьВремяЗаДень(ЗатраченноеВремя, Выборка.Дата, ГрафикРаботы, АвтоматическиУчитыватьОбеденноеВремя, ГрафикРаботы.НачалоРабочегоДня, ДатаОкончания);
			
		Иначе
			
			Если Выборка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
				
				ЗатраченноеВремя.Вставить(Выборка.Дата, ГрафикРаботы.КоличествоРабочихЧасовВПредпраздничныйДень);
				
			Иначе
				
				ЗатраченноеВремя.Вставить(Выборка.Дата, ГрафикРаботы.КоличествоРабочихЧасовВРабочийДень);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВремяЗаДень(ЗатраченноеВремя, День, ГрафикРаботы, АвтоматическиУчитыватьОбеденноеВремя, ДатаНачала, ДатаОкончания)
	
	Если АвтоматическиУчитыватьОбеденноеВремя Тогда
		
		КоэффициентУчетаВремени = ГрафикРаботы.КоэффициентУчетаВремени;
		
	Иначе
		
		КоэффициентУчетаВремени = 1;
		
	КонецЕсли;
	
	ВремяВыполнения = РазностьВремени(ДатаНачала, ДатаОкончания) * КоэффициентУчетаВремени / 3600;
	
	Если ВремяВыполнения > 0 Тогда
		
		ЗатраченноеВремя.Вставить(День, ВремяВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
