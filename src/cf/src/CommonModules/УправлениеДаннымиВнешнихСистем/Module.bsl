////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ УПРАВЛЕНИЯ ВНЕШНИМИ СИСТЕМАМИ
//	- Функции веб-сервиса AccessControl. Пакет XDTO: AccessControlData
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаВебСервисаAccessControl

// Для операции GetActiveUsers. Возвращает таблицу действующих пользователей из справочника ГруппыПользователейAD
// В спр.ИменаПользователей для отборане должен быть установлен признак Недействителен
//
// Параметры:
//  ИД_Системы	 - Строка - Будет искать ИД_ИнформационнойБазы в справочнике СписокИнформационныхБаз1С
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ОбъектXDTO.AccessControlData.ActiveUser
//
Функция ТаблицаАктивныхПользователейПоГруппеAD(ИД_Системы) Экспорт
	
	Запрос = Новый Запрос;
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ГруппыПользователейADПользователиГруппы.ИмяПользователя КАК ИмяПользователя
	               |ПОМЕСТИТЬ ВТ_ИменаПользователей
	               |ИЗ
	               |	Справочник.ГруппыПользователейAD.ПользователиГруппы КАК ГруппыПользователейADПользователиГруппы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователейAD КАК ГруппыПользователейAD
	               |		ПО ГруппыПользователейADПользователиГруппы.Ссылка = ГруппыПользователейAD.Ссылка
	               |ГДЕ
	               |	НЕ ГруппыПользователейAD.ПометкаУдаления
	               |	И ГруппыПользователейAD.Используется
	               |	И (ГруппыПользователейAD.ИнформационнаяБаза.ИД_ИнформационнойБазы = &ИД_ИнформационнойБазы
	               |			ИЛИ ГруппыПользователейAD.ИнформационнаяБаза = ЗНАЧЕНИЕ(Справочник.СписокИнформационныхБаз1С.ПустаяСсылка)
	               |				И ГруппыПользователейAD.ИмяГруппыAD = &ИД_ИнформационнойБазы)
	               |	И НЕ ГруппыПользователейADПользователиГруппы.ИмяПользователя.Недействителен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИменаПользователей.Ссылка КАК Ссылка,
	               |	ИменаПользователей.Наименование КАК Name,
	               |	ИменаПользователей.УчетнаяЗаписьWindows КАК AccountLogin,
	               |	ИменаПользователей.Email КАК Email,
	               |	ИменаПользователей.ДатаПоследнейАктуализацииAD КАК DataChange,
	               |	ИменаПользователей.ПользовательОС КАК UserOS
	               |ИЗ
	               |	ВТ_ИменаПользователей КАК ВТ_ИменаПользователей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИменаПользователей КАК ИменаПользователей
	               |		ПО ВТ_ИменаПользователей.ИмяПользователя = ИменаПользователей.Ссылка";
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on	
	Запрос.УстановитьПараметр("ИД_ИнформационнойБазы", СокрЛП(ИД_Системы));
	
	Результат = Запрос.Выполнить();
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей = Результат.Выгрузить();
	
	ТаблицаПользователей.Колонки.Добавить("ID_User");
	
	Для каждого ТекСтрока Из ТаблицаПользователей Цикл
	
		ТекСтрока.ID_User = Строка(ТекСтрока.Ссылка.УникальныйИдентификатор());
		
	КонецЦикла;
	
	ТаблицаПользователейРезультат = ТаблицаПользователей.Скопировать( , "Name, AccountLogin, UserOS, Email, DataChange, ID_User");
	
	Возврат ТаблицаПользователейРезультат;

КонецФункции

// Для операции GetActiveUsers. Конвертированный в XDTO ответ по функции ТаблицаАктивныхПользователейПоГруппеAD()
//
// Параметры:
//  ТаблицаПользователей - см. ТаблицаАктивныхПользователейПоГруппеAD()
// 
// Возвращаемое значение:
//  ОбъектXDTO - см. ОбъектXDTO.AccessControlData.ResponseActiveUsers 
//
Функция ОтветResponseActiveUsers(ТаблицаПользователей) Экспорт

	ОтветТаблицаПользователей = НовыйОбъектXDTO("ResponseActiveUsers");
	
	Для каждого ТекСтрока Из ТаблицаПользователей Цикл
	
		СтрокаСписка = НовыйОбъектXDTO("ActiveUser");
		ЗаполнитьЗначенияСвойств(СтрокаСписка, ТекСтрока);
		ОтветТаблицаПользователей.ActiveUser.Добавить(СтрокаСписка);
	
	КонецЦикла;
	
	// Фиксация результата в OperationResult.
	ОтветТаблицаПользователей.OperationResult = РезультатОперации();
	
	Возврат ОтветТаблицаПользователей;

КонецФункции

// Для операции PutAccessPatterns. Импорт шаблонов доступа внешних систем
//
// Параметры:
//  ИД_Системы		 - Строка
//  ШаблоныДоступов	 - ОбъектXDTO - см. ОбъектXDTO.AccessControlData.AccessPatterns 
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//		* ЗагруженоУспешно - Булево
//		* ОшибкиЗагрузки - Строка
//
Функция ИмпортШаблоновДоступаВнешнихСистем(ИД_Системы, ШаблоныДоступов) Экспорт
	
	РезультатИмпорта = ПараметрыЗагрузкиШаблоновДоступа();
	
	ТекущаяСистема = Справочники.СписокИнформационныхБаз1С.НайтиПоРеквизиту("ИД_ИнформационнойБазы", ИД_Системы);
	Если Не ЗначениеЗаполнено(ТекущаяСистема) Тогда
		
		РезультатИмпорта.ЗагруженоУспешно = Ложь;
		РезультатИмпорта.ОшибкиЗагрузки = СтрШаблон(НСтр("ru = 'Не найдена система по идентификатору: %1'"), ИД_Системы);
		
		ТекстОшибки = РезультатИмпорта.ОшибкиЗагрузки; 
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Администрирование.УправлениеСетью.УправлениеДоступомПользователей.PutAccessPatterns", 
				ТекстОшибки, 
				УровеньЖурналаРегистрации.Ошибка);
		
		Возврат РезультатИмпорта;
		
	КонецЕсли;
	
	// Формирование таблицы значений для дальнейшей обработки.
	ТаблицаШаблонов = ТаблицаАктуальныхШаблоновДоступаИзОбъектаXDTO(ИД_Системы, ШаблоныДоступов.AccessPattern);
	
	// Загрузка таблицы шаблонов в справочник ШаблоныДоступаПользователей.
	РезультатИмпорта = ЗагрузкаШаблоновДоступа(ТекущаяСистема, ТаблицаШаблонов);
	
	Возврат РезультатИмпорта;

КонецФункции

// Возвращает пустую таблицу параметров шаблонов доступа
// 
// Возвращаемое значение:
//   ТаблицаЗначений - содержит реквизиты для возможности заполнения Справочник.ШаблоныДоступаПользователей:
//		* ИД_ИнформационнойБазы - Строка - для идентификации в Справочники.СписокИнформационныхБаз1С
//		* ИД_ШаблонаДоступа - Строка - уникальный идентфикатор шаблона доступа в 36 символов из другой системы
//		* Наименование - Строка
//		* ОписаниеДоступа - Строка - описана краткая информация по используемым профилям доступа в другой системе
//		* Недействителен - Булево
//		* Комментарий - Строка
//
Функция ПустаяТаблицаПараметровШаблоновДоступа() Экспорт
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка"); 
	
	ТаблицаШаблонов = Новый ТаблицаЗначений;
	ТаблицаШаблонов.Колонки.Добавить("ИД_ИнформационнойБазы", ОписаниеТипаСтрока);
	КвалификаторГУИДСтроки = Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная);
	ТаблицаШаблонов.Колонки.Добавить("ИД_ШаблонаДоступа", Новый ОписаниеТипов("Строка",,,, КвалификаторГУИДСтроки));
	ТаблицаШаблонов.Колонки.Добавить("Наименование", ОписаниеТипаСтрока);
	ТаблицаШаблонов.Колонки.Добавить("ОписаниеДоступа", ОписаниеТипаСтрока);
	ТаблицаШаблонов.Колонки.Добавить("Недействителен", Новый ОписаниеТипов("Булево"));
	ТаблицаШаблонов.Колонки.Добавить("Комментарий", ОписаниеТипаСтрока);
	
	Возврат ТаблицаШаблонов;

КонецФункции

// Загрузка таблицы шаблонов в справочник ШаблоныДоступаПользователей
//
// Параметры:
//  ТекущаяСистема		 - СправочникСсылка.СписокИнформационныхБаз1С 
//  НоваяТаблицаШаблонов - ТаблицаЗначений - см. возвращаемый результат от ТаблицаАктуальныхШаблоновДоступаИзОбъектаXDTO() 
// 
// Возвращаемое значение:
//  Структура - см. ИмпортШаблоновДоступаВнешнихСистем()
//
Функция ЗагрузкаШаблоновДоступа(ТекущаяСистема, НоваяТаблицаШаблонов) Экспорт

	РезультатИмпорта = ПараметрыЗагрузкиШаблоновДоступа();
	ОшибкиЗагрузки = "";

	МассивРеквизитовСравнения = Новый Массив;
	МассивРеквизитовСравнения.Добавить("Наименование");
	МассивРеквизитовСравнения.Добавить("ОписаниеДоступа");
	МассивРеквизитовСравнения.Добавить("Недействителен");
	МассивРеквизитовСравнения.Добавить("Комментарий");
	
	МассивСписокАктуальных = Новый Массив;
	МассивИзмененныхШаблонов = Новый Массив;
	
	// - Обработка актуальных шаблонов
	Для каждого ТекСтрока Из НоваяТаблицаШаблонов Цикл
	
		ИД_ШаблонаДоступа = Новый УникальныйИдентификатор(ТекСтрока.ИД_ШаблонаДоступа);
		СсылкаНаШаблонДоступа = Справочники.ШаблоныДоступаПользователей.ПолучитьСсылку(ИД_ШаблонаДоступа);
		
		МассивСписокАктуальных.Добавить(СсылкаНаШаблонДоступа);
		
		ЭтоНовыйОбъект = Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаШаблонДоступа);
		
		Если Не ЭтоНовыйОбъект
			И Не ОбщегоНазначенияКупоросСервер.ЕстьИзмененияРеквизитовОбъекта(ТекСтрока, СсылкаНаШаблонДоступа, МассивРеквизитовСравнения) Тогда
			// Нет изменений у объекта.
			Продолжить;
		КонецЕсли;
		
		Если ЭтоНовыйОбъект Тогда
			ОбъектШаблон = Справочники.ШаблоныДоступаПользователей.СоздатьЭлемент();
			ОбъектШаблон.УстановитьСсылкуНового(СсылкаНаШаблонДоступа);
		Иначе
			ОбъектШаблон = СсылкаНаШаблонДоступа.ПолучитьОбъект();
		КонецЕсли;
		
		ОбъектШаблон.ИнформационнаяБаза = ТекущаяСистема;
		
		ЗаполнитьЗначенияСвойств(ОбъектШаблон, ТекСтрока);
		
		Попытка
		
			ОбъектШаблон.Записать();
			
			Если Не ЭтоНовыйОбъект Тогда
				// Актуально в случае изменения реквизита ОписаниеДоступа, т.к. поменялись права и их надо переназначить.
				МассивИзмененныхШаблонов.Добавить(ОбъектШаблон.Ссылка);
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при записи %1 справочника ШаблоныДоступаПользователей от системы %2.'"), ТекСтрока.Наименование, ТекущаяСистема); 
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
			ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Администрирование.УправлениеСетью.УправлениеДоступомПользователей.PutAccessPatterns", 
					ТекстОшибки, 
					УровеньЖурналаРегистрации.Ошибка,
					Истина);
					
			ВызватьИсключение;
			//ОбщегоНазначенияКупоросКлиентСервер.ПрисоединитьСтроку(ОшибкиЗагрузки, ТекстОшибки, Символы.ПС);
		
		КонецПопытки;
		
	КонецЦикла;
	
	// - Установка недействительных шаблонов доступа.
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ШаблоныДоступаПользователей.Ссылка КАК Ссылка
	 |ИЗ
	 |	Справочник.ШаблоныДоступаПользователей КАК ШаблоныДоступаПользователей
	 |ГДЕ
	 |	НЕ ШаблоныДоступаПользователей.ПометкаУдаления
	 |	И ШаблоныДоступаПользователей.ИнформационнаяБаза = &ИнформационнаяБаза
	 |	И НЕ ШаблоныДоступаПользователей.Недействителен
	 |	И НЕ ШаблоныДоступаПользователей.Ссылка В (&СписокАктуальных)";
	 
	 Запрос.УстановитьПараметр("ИнформационнаяБаза", ТекущаяСистема);
	 Запрос.УстановитьПараметр("СписокАктуальных", МассивСписокАктуальных);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
		Попытка
			
			ОбъектШаблон = Выборка.Ссылка.ПолучитьОбъект();
			
			ОбъектШаблон.Недействителен = Истина;
			
			ОбъектШаблон.Записать();
		
		Исключение
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при записи не актуального шаблона %1 справочника ШаблоныДоступаПользователей от системы %2.'"), 
				Выборка.Ссылка, ТекущаяСистема); 
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
			ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Администрирование.УправлениеСетью.УправлениеДоступомПользователей.PutAccessPatterns", 
					ТекстОшибки, 
					УровеньЖурналаРегистрации.Ошибка,
					Истина);
					
			ОбщегоНазначенияКупоросКлиентСервер.ПрисоединитьСтроку(ОшибкиЗагрузки, ТекстОшибки, Символы.ПС);
					
		КонецПопытки;
 	
	КонецЦикла;
	
	// - Обновить справочник Имена пользователей по измененным шаблонам, для возможности передачи обновлений прав в приемник.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИменаПользователейПраваПользователя.ШаблонДоступа КАК ШаблонДоступа,
	               |	ИменаПользователейПраваПользователя.Ссылка КАК ИмяПользователя,
	               |	ИменаПользователейПраваПользователя.ШаблонДоступа.ИнформационнаяБаза КАК ИнформационнаяБаза
	               |ИЗ
	               |	Справочник.ИменаПользователей.ПраваПользователя КАК ИменаПользователейПраваПользователя
	               |ГДЕ
	               |	ИменаПользователейПраваПользователя.ШаблонДоступа В(&СписокШаблоновДоступа)";
	
	Запрос.УстановитьПараметр("СписокШаблоновДоступа", МассивИзмененныхШаблонов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ОбъектИмяПользователя = Выборка.ИмяПользователя.ПолучитьОбъект();
		
		Справочники.ИменаПользователей.ДобавитьБазуДляОбновленияПрав(ОбъектИмяПользователя, Выборка.ИнформационнаяБаза);
		
		ТекстКомментария = СтрШаблон(НСтр("ru = 'Загружена измененная информация по шаблону доступа %1 от системы %2. Требуется обновить права в приемнике.'"), 
			Выборка.ШаблонДоступа, Выборка.ИнформационнаяБаза);
		ОбъектИмяПользователя.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии", ТекстКомментария);
		
		ОбъектИмяПользователя.Записать();
	
	КонецЦикла;
	
	РезультатИмпорта.ЗагруженоУспешно = Не ЗначениеЗаполнено(ОшибкиЗагрузки);
	РезультатИмпорта.ОшибкиЗагрузки = ОшибкиЗагрузки;
	
	Возврат РезультатИмпорта;

КонецФункции

// Для операции PutAccessPatterns.
//
// Параметры:
//  Результат	 - Структура - содержит свойства:
//		* ЗагруженоУспешно - Булево
//		* ОшибкиЗагрузки - Строка
// 
// Возвращаемое значение:
//  ОбъектXDTO - см. ОбъектXDTO.AccessControlData.ResponseAccessPatterns 
//
Функция ОтветResponseAccessPatterns(Результат) Экспорт

	ResponseAccessPatterns = НовыйОбъектXDTO("ResponseAccessPatterns");
	
	ResponseAccessPatterns.Result = Результат.ЗагруженоУспешно;
	
	// Фиксация результата в OperationResult.
	ResponseAccessPatterns.OperationResult = РезультатОперации(Результат.ЗагруженоУспешно, Результат.ОшибкиЗагрузки);
	
	Возврат ResponseAccessPatterns;
	
КонецФункции

// Для операции GetAccessRights. Возвращает таблицу прав для обновления по данным справочника ИменаПользователей
//
// Параметры:
//  ИД_Системы	 - Строка	 - Будет искать ИД_ИнформационнойБазы в справочнике СписокИнформационныхБаз1С
// 
// Возвращаемое значение:
//  ТаблицаЗначений - содержит:
//  * Ссылка - СправочникСсылка.ИменаПользователей
//  * ШаблонДоступа - СправочникСсылка.ШаблоныДоступаПользователей
//  * Comment - Строка
//
Функция ТаблицаПравПользователяДляОбновления(ИД_Системы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИменаПользователейИнформационныеБазыДляОбновленияПрав.Ссылка КАК Ссылка,
	               |	ИменаПользователейИнформационныеБазыДляОбновленияПрав.ИнформационнаяБаза КАК ИнформационнаяБаза,
	               |	ИменаПользователейИнформационныеБазыДляОбновленияПрав.ОбновитьПрава КАК ОбновитьПрава
	               |ПОМЕСТИТЬ ВТ_СписокДляОбновленияПрав
	               |ИЗ
	               |	Справочник.ИменаПользователей.ИнформационныеБазыДляОбновленияПрав КАК ИменаПользователейИнформационныеБазыДляОбновленияПрав
	               |ГДЕ
	               |	ИменаПользователейИнформационныеБазыДляОбновленияПрав.ОбновитьПрава
	               |	И ИменаПользователейИнформационныеБазыДляОбновленияПрав.ИнформационнаяБаза.ИД_ИнформационнойБазы = &ИД_ИнформационнойБазы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ШаблоныДоступаПользователей.Ссылка КАК Ссылка,
	               |	ШаблоныДоступаПользователей.Недействителен КАК Недействителен,
	               |	ШаблоныДоступаПользователей.ПометкаУдаления КАК ПометкаУдаления
	               |ПОМЕСТИТЬ ВТ_ШаблоныДляОбновления
	               |ИЗ
	               |	Справочник.ШаблоныДоступаПользователей КАК ШаблоныДоступаПользователей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокДляОбновленияПрав КАК ВТ_СписокДляОбновленияПрав
	               |		ПО ШаблоныДоступаПользователей.ИнформационнаяБаза = ВТ_СписокДляОбновленияПрав.ИнформационнаяБаза
	               |ГДЕ
	               |	НЕ ШаблоныДоступаПользователей.ПометкаУдаления
	               |	И НЕ ШаблоныДоступаПользователей.Недействителен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИменаПользователейПраваПользователя.Ссылка КАК Ссылка,
	               |	ИменаПользователейПраваПользователя.ШаблонДоступа КАК ШаблонДоступа,
	               |	ИменаПользователейПраваПользователя.Комментарий КАК Comment
	               |ИЗ
	               |	Справочник.ИменаПользователей.ПраваПользователя КАК ИменаПользователейПраваПользователя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокДляОбновленияПрав КАК ВТ_СписокДляОбновленияПрав
	               |		ПО ИменаПользователейПраваПользователя.Ссылка = ВТ_СписокДляОбновленияПрав.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ШаблоныДляОбновления КАК ВТ_ШаблоныДляОбновления
	               |		ПО ИменаПользователейПраваПользователя.ШаблонДоступа = ВТ_ШаблоныДляОбновления.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_СписокДляОбновленияПрав.Ссылка,
	               |	""Нет шаблонов доступа"",
	               |	""""
	               |ИЗ
	               |	ВТ_СписокДляОбновленияПрав КАК ВТ_СписокДляОбновленияПрав
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИменаПользователей.ПраваПользователя КАК ИменаПользователейПраваПользователя
	               |		ПО ВТ_СписокДляОбновленияПрав.Ссылка = ИменаПользователейПраваПользователя.Ссылка
	               |ГДЕ
	               |	ИменаПользователейПраваПользователя.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ИД_ИнформационнойБазы", ИД_Системы);
	
	Результат = Запрос.Выполнить();
	ТаблицаПользователей = Результат.Выгрузить();
	
	ТаблицаПользователей.Колонки.Добавить("ID_User");
	ТаблицаПользователей.Колонки.Добавить("ID_Pattern");
	
	Для каждого ТекСтрока Из ТаблицаПользователей Цикл
	
		ТекСтрока.ID_User = Строка(ТекСтрока.Ссылка.УникальныйИдентификатор());
		
		Если ТекСтрока.ШаблонДоступа <> "Нет шаблонов доступа" Тогда
			ТекСтрока.ID_Pattern = Строка(ТекСтрока.ШаблонДоступа.УникальныйИдентификатор());
		Иначе
			ТекСтрока.ID_Pattern = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПользователей;

КонецФункции

// Для операции GetAccessRights. Конвертированный в XDTO ответ по функции ТаблицаПравПользователяДляОбновления()
//
// Параметры:
//  ТаблицаПользователей - ТаблицаЗначений - см. ТаблицаПравПользователяДляОбновления()
// 
// Возвращаемое значение:
//  ОбъектXDTO - см. ОбъектXDTO.AccessControlData.ResponseAccessRights
//
Функция ОтветResponseAccessRights(ТаблицаПользователей) Экспорт

	ОтветТаблицаПользователей = НовыйОбъектXDTO("ResponseAccessRights");
	
	Для каждого ТекСтрока Из ТаблицаПользователей Цикл
	
		СтрокаСписка = НовыйОбъектXDTO("AccessRight");
		ЗаполнитьЗначенияСвойств(СтрокаСписка, ТекСтрока);
		ОтветТаблицаПользователей.AccessRight.Добавить(СтрокаСписка);
	
	КонецЦикла;
	
	// Фиксация результата в OperationResult.
	ОтветТаблицаПользователей.OperationResult = РезультатОперации();
	
	Возврат ОтветТаблицаПользователей;

КонецФункции

// Снятие признака обновления прав по таблице пользователей
//
// Параметры:
//	ИД_Системы - Строка - Будет искать ИД_ИнформационнойБазы в справочнике СписокИнформационныхБаз1С
//  ТаблицаПользователей - ТаблицаЗначений - см. ТаблицаПравПользователяДляОбновления()  
//
Процедура СнятиеПризнакаОбновленияПрав(ИД_Системы, ТаблицаПользователей) Экспорт
	
	ТекущаяСистема = Справочники.СписокИнформационныхБаз1С.НайтиПоРеквизиту("ИД_ИнформационнойБазы", ИД_Системы);
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого ТекСтрока Из ТаблицаПользователей Цикл
				
		    ОбъектДанных = ТекСтрока.Ссылка.ПолучитьОбъект();
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИнформационнаяБаза", ТекущаяСистема);
			ПараметрыОтбора.Вставить("ОбновитьПрава", Истина);
		
			НайденныеСтроки = ОбъектДанных.ИнформационныеБазыДляОбновленияПрав.НайтиСтроки(ПараметрыОтбора);
			Для каждого СтрокаДляИзменения Из НайденныеСтроки Цикл
				СтрокаДляИзменения.ОбновитьПрава = Ложь;
			КонецЦикла;
			
			ТекстКомментария = СтрШаблон(НСтр("ru = 'Снят признак обновления прав, т.к. система %1 забрала информацию для обработки.'"), ТекущаяСистема);
			ОбъектДанных.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии", ТекстКомментария);
		
			ОбъектДанных.Записать();
	
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Ошибка работы системы при записи данных таблицы пользователей со снятым признаком обновления прав.'"); 
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Администрирование.УправлениеСетью.УправлениеДоступомПользователей.GetAccessRights", 
				ТекстОшибки, 
				УровеньЖурналаРегистрации.Ошибка,
				Истина);
		
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УниверсальныеФункцииXDTO

// Возвращает локальное пространство имен web-сервиса AccessControl
// 
// Возвращаемое значение:
//  Строка - Пространство имен
//
Функция ПространствоИмен()

	Возврат "https://kpkrs.site/AccessControl";

КонецФункции // ПространствоИмен()

// Возвращает тип XDTO внутреннего пространства имен по имени типа.
//
// Параметры:
//  ИмяТипа	- Строка - Имя типа.
//
// Возвращаемое значение:
//	ТипXDTO
//
Функция ТипXDTO(ИмяТипа)

	Возврат ФабрикаXDTO.Тип(ПространствоИмен(), ИмяТипа);

КонецФункции // ТипXDTO

// Создаёт объект XDTO внутреннего пространства имен по имени типа.
//
// Параметры:
//  ИмяТипа	- Строка - Имя типа нового объекта XDTO.
//
// Возвращаемое значение:
//	ОбъектXDTO
//
Функция НовыйОбъектXDTO(ИмяТипа)

	Возврат ФабрикаXDTO.Создать(ТипXDTO(ИмяТипа));

КонецФункции // НовыйОбъектXDTO()

// Универсальная функция описания результата OperationResult
//
// Параметры:
//  ЕстьОшибки	 - Булево 
//  Описание	 - Строка 
// 
// Возвращаемое значение:
//  ОбъектXDTO - см. ОбъектXDTO.AccessControlData.OperationResult 
//
Функция РезультатОперации(ЕстьОшибки = Ложь, Описание = "")
	
	OperationResult = НовыйОбъектXDTO("OperationResult");
	OperationResult.Error = ЕстьОшибки;
	OperationResult.Description = Описание;
	
	Возврат OperationResult;

КонецФункции

#КонецОбласти

#Область ФункцииИмпортаШаблоновДоступаВнешнихСистем

// Таблица шаблонов доступа из объекта XDTO
//
// Параметры:
//  ИД_Системы		 - Строка
//  СписокШаблонов	 - ОбъектXDTO	 - см. ОбъектXDTO.AccessControlData.AccessPattern
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ПустаяТаблицаПараметровШаблоновДоступа()
//
Функция ТаблицаАктуальныхШаблоновДоступаИзОбъектаXDTO(ИД_Системы, СписокШаблонов)
	
	ТаблицаШаблонов = ПустаяТаблицаПараметровШаблоновДоступа();
	
	Для каждого ТекСтрока Из СписокШаблонов Цикл
		
		НовСтрока = ТаблицаШаблонов.Добавить();
		НовСтрока.ИД_ШаблонаДоступа = ТекСтрока.ID_Pattern;
		НовСтрока.Наименование 		= ТекСтрока.Name;
		НовСтрока.ОписаниеДоступа 	= ТекСтрока.Description;
		НовСтрока.Комментарий 		= ТекСтрока.Comment;
		НовСтрока.ИД_ИнформационнойБазы = ИД_Системы;
		
		НовСтрока.Недействителен = Ложь;
		
	КонецЦикла;
	
	Возврат ТаблицаШаблонов;

КонецФункции

Функция ПараметрыЗагрузкиШаблоновДоступа()

	Результат = Новый Структура;
	Результат.Вставить("ЗагруженоУспешно", Ложь);
	Результат.Вставить("ОшибкиЗагрузки", "");
	
	Возврат Результат;

КонецФункции // ПараметрыШаблоновДоступа()

#КонецОбласти

#КонецОбласти