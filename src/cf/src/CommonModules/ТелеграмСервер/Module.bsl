
#Область ПрограммныйИнтерфейс

// Универсальная функция отправки сообщения по мессенджеру Телеграм пользователю чат-бота
//
// Параметры:
//  БотТелеграм		 - СправочникСсылка.ТелеграмБоты
//  Пользователь	 - СправочникСсылка.Пользователи - пользователь которому отправляем сообщения. Он должен быть указан в регистре "ТелеграмНастройкиПользователей"
//  ТекстСообщения	 - Строка						 - отправляемое сообщение. Если есть вложение, то это подпись.
//	ПользовательОтправитель - СправочникСсылка.Пользователи - кто отправил сообщение. Если не указано, то определяется текущий пользователь.
//	Вложение - Структура - не обязательный параметр. Содержит свойства:
//		* ТипФайла - ПеречислениеСсылка.ТипыСообщенийЧатБота - картинка, аудио, видео, файл
//		* ИмяФайла - Строка - имя файла с расширением
//		* АдресФайла - Строка - адрес двоичных данных файла во временном хранилище
// 
// Возвращаемое значение:
//   Структура - содержит свойства:
//		* РезультатОтправки - Булево - Истина, в случае если успешно
//		* ОписаниеРезультата - Строка - содержит информацию, в случае если сообщение не было отправлено
//
Функция ОтправитьСообщениеПользователю(БотТелеграм, Пользователь, ТекстСообщения = "", ПользовательОтправитель = Неопределено, Вложение = Неопределено) Экспорт
	
	ДанныеРезультатаОтправки = Новый Структура;
	ДанныеРезультатаОтправки.Вставить("РезультатОтправки", Ложь);  // по-умолчанию
	ДанныеРезультатаОтправки.Вставить("ОписаниеРезультата", "");
	
	Если Не ЗначениеЗаполнено(БотТелеграм) Тогда
		ДанныеРезультатаОтправки.ОписаниеРезультата = НСтр("ru = 'Ошибка: Не заполнен ТелеграмБоты.'"); 
		Возврат ДанныеРезультатаОтправки;	
	КонецЕсли;
	
	Если Не ОбщегоНазначения.СсылкаСуществует(БотТелеграм) Тогда
		ДанныеРезультатаОтправки.ОписаниеРезультата = НСтр("ru = 'Ошибка: Битая ссылка справочника ТелеграмБоты.'"); 
		Возврат ДанныеРезультатаОтправки;	
	КонецЕсли;
	
	Жетон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БотТелеграм, "Жетон");
	Если Не ЗначениеЗаполнено(Жетон) Тогда
		ДанныеРезультатаОтправки.ОписаниеРезультата = СтрШаблон(НСтр("ru = '%1: Не заполнен Жетон в справочнике ТелеграмБоты.'"), БотТелеграм); 
		Возврат ДанныеРезультатаОтправки;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		ДанныеРезультатаОтправки.ОписаниеРезультата = НСтр("ru = 'Не заполнен пользователь. Отправка отменена'"); 
		Возврат ДанныеРезультатаОтправки;	
	КонецЕсли;
	
	ДанныеБота = Новый Структура;
	ДанныеБота.Вставить("Жетон", Жетон);
	ДанныеБота.Вставить("Бот", БотТелеграм);
	ДанныеБота.Вставить("Пользователь", Пользователь);
	
	МассивИдентификаторовЧатаПользователя = ИдентификаторыЧатаПользователя(БотТелеграм, Пользователь); // поиск действующих идентификаторов чатов пользователя
	
	Если Не ЗначениеЗаполнено(МассивИдентификаторовЧатаПользователя) Тогда
		ДанныеРезультатаОтправки.ОписаниеРезультата = СтрШаблон(НСтр("ru = 'Пользователь %1 не зарегистрирован в Чат-боте ""%2""'"), Пользователь, БотТелеграм); 
		Возврат ДанныеРезультатаОтправки;	
	КонецЕсли;
	
	ОбработкаИдентификаторовЧатаПользователя(МассивИдентификаторовЧатаПользователя, ДанныеБота, ТекстСообщения, Вложение, ДанныеРезультатаОтправки);
	
	Возврат ДанныеРезультатаОтправки;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//////////////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ ПРОЦЕДУРЫ ТЕЛЕГРАМ-БОТА

// Регламентное задание. Получить обновления бота
//
// Параметры:
//  Бот	 - СправочникСсылка.ТелеграмБоты 
//
Процедура ПолучитьОбновленияБота(Бот) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ТелеграмПолучитьОбновленияБота);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Бот", Бот);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТелеграмБоты.Ссылка КАК Бот,
	|	ТелеграмБоты.Жетон КАК Жетон,
	|	ТелеграмБоты.Представление КАК Имя,
	|	ТелеграмБоты.КаталогСохраненияФайлов КАК КаталогСохраненияФайлов,
	|	ТелеграмБоты.ОграниченныйДоступ,
	|	ЕСТЬNULL(ТелеграмНастройкиБотов.Смещение, 0) КАК Смещение
	|ИЗ
	|	Справочник.ТелеграмБоты КАК ТелеграмБоты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелеграмНастройкиБотов КАК ТелеграмНастройкиБотов
	|		ПО ТелеграмБоты.Ссылка = ТелеграмНастройкиБотов.Бот
	|ГДЕ
	|	ТелеграмБоты.Ссылка = &Бот";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеБота = Новый Структура("Бот, Жетон, Имя, КаталогСохраненияФайлов, Смещение, ОграниченныйДоступ");
		ЗаполнитьЗначенияСвойств(ДанныеБота, Выборка);
		ВходящиеОбновления = ПолучитьВходящиеОбновленияБота(ДанныеБота);
		Если ТипЗнч(ВходящиеОбновления) = Тип("ОбъектXDTO") Тогда
			ОбработатьВходящиеОбновленияБота(ВходящиеОбновления, ДанныеБота);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеБотаПоКлючу(ВебхукКлюч) Экспорт
	
	Ответ = Неопределено; // ДанныеБота
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВебхукКлюч", ВебхукКлюч);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТелеграмБоты.Ссылка КАК Бот,
	|	ТелеграмБоты.Жетон КАК Жетон,
	|	ТелеграмБоты.Представление КАК Имя,
	|	ТелеграмБоты.КаталогСохраненияФайлов КАК КаталогСохраненияФайлов,
	|	ТелеграмБоты.ОграниченныйДоступ,
	|	ЕСТЬNULL(ТелеграмНастройкиБотов.Смещение, 0) КАК Смещение
	|ИЗ
	|	Справочник.ТелеграмБоты КАК ТелеграмБоты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелеграмНастройкиБотов КАК ТелеграмНастройкиБотов
	|		ПО ТелеграмБоты.Ссылка = ТелеграмНастройкиБотов.Бот
	|ГДЕ
	|	ТелеграмБоты.ВебхукКлюч = &ВебхукКлюч
	|	И ТелеграмБоты.Статус = ЗНАЧЕНИЕ(Перечисление.ТелеграмСтатусыИспользования.Используется)
	|	И ТелеграмБоты.СпособПолученияОбновлений = ЗНАЧЕНИЕ(Перечисление.ТелеграмСпособыПолученияОбновлений.Вебхуки)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Ответ = Новый Структура("Бот, Жетон, Имя, КаталогСохраненияФайлов, Смещение, ОграниченныйДоступ");
		ЗаполнитьЗначенияСвойств(Ответ, Выборка);
		Прервать;
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьДанныеБота(Бот) Экспорт
	
	Ответ = Неопределено; // ДанныеБота
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Бот", Бот);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТелеграмБоты.Ссылка КАК Бот,
	|	ТелеграмБоты.Жетон КАК Жетон,
	|	ТелеграмБоты.Представление КАК Имя,
	|	ТелеграмБоты.КаталогСохраненияФайлов КАК КаталогСохраненияФайлов,
	|	ТелеграмБоты.ОграниченныйДоступ,
	|	ЕСТЬNULL(ТелеграмНастройкиБотов.Смещение, 0) КАК Смещение
	|ИЗ
	|	Справочник.ТелеграмБоты КАК ТелеграмБоты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелеграмНастройкиБотов КАК ТелеграмНастройкиБотов
	|		ПО ТелеграмБоты.Ссылка = ТелеграмНастройкиБотов.Бот
	|ГДЕ
	|	ТелеграмБоты.Ссылка = &Бот";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Ответ = Новый Структура("Бот, Жетон, Имя, КаталогСохраненияФайлов, Смещение, ОграниченныйДоступ");
		ЗаполнитьЗначенияСвойств(Ответ, Выборка);
		Прервать;
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция ПараметрыЗаписиJSON() Экспорт
	
	ПереносСтрок = ПереносСтрокJSON.Авто;
	СимволыОтступа = Символы.Таб;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрок, СимволыОтступа);
	Возврат ПараметрыЗаписиJSON;
	
КонецФункции

Функция ФорматироватьСтрокуJSON(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	ЗначениеОбъект = ПрочитатьJSON(ЧтениеJSON);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON());
	ЗаписатьJSON(ЗаписьJSON, ЗначениеОбъект);
	РезультатФорматирования = ЗаписьJSON.Закрыть();
	
	Возврат РезультатФорматирования;
	
КонецФункции

Функция ПреобразоватьТаблицуКонтекстаВСоответствие(ТаблицаКонтекста) Экспорт
	
	Ответ = Новый Соответствие;
	ЕстьКолонкаЗначениеДляКэшПараметра = ТаблицаКонтекста.Колонки.Найти("ЗначениеДляКэшПараметра") <> Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаКонтекста Цикл
		
		Если ЕстьКолонкаЗначениеДляКэшПараметра 
			И СтрокаТаблицы.Параметр = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.КэшПараметров Тогда
			Ответ.Вставить(СтрокаТаблицы.Параметр, СтрокаТаблицы.ЗначениеДляКэшПараметра);
			Продолжить;	
		КонецЕсли;
		
		Ответ.Вставить(СтрокаТаблицы.Параметр, СтрокаТаблицы.Значение);
		
	КонецЦикла;
	Возврат Ответ;
	
КонецФункции

Функция ЗначениеСтрокой(ЛюбоеЗначение) Экспорт
	
	Ответ = "";
	Если ТипЗнч(ЛюбоеЗначение) = Тип("Число") Тогда
		Ответ = Формат(ЛюбоеЗначение, "ЧГ=");
	Иначе
		Ответ = Строка(ЛюбоеЗначение);
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

Функция СравнениеИстинно(ЛевоеЗначение, ВидСравнения, ПравоеЗначение) Экспорт
	
	Перем Ответ;
	
	ВидыСравнения = Перечисления.ТелеграмВидыСравнения;
	
	ТипЛ = ТипЗнч(ЛевоеЗначение);
	ТипП = ТипЗнч(ПравоеЗначение);
	
	ТипЧисло 	= Тип("Число");
	ТипБулево 	= Тип("Булево");
	ТипСтрока 	= Тип("Строка");
	ТипДата 	= Тип("Дата");
	
	Ответ = Ложь;
	
	Попытка
		
		Если ВидСравнения = ВидыСравнения.Больше  Тогда
			
			Ответ = ЛевоеЗначение > ПравоеЗначение;
			
		ИначеЕсли ВидСравнения = ВидыСравнения.БольшеИлиРавно  Тогда
			
			Ответ = ЛевоеЗначение >= ПравоеЗначение;
			
		ИначеЕсли ВидСравнения = ВидыСравнения.Заполнено  Тогда
			
			Ответ = ЗначениеЗаполнено(ЛевоеЗначение);
			
		ИначеЕсли ВидСравнения = ВидыСравнения.Меньше  Тогда
			
			Ответ = ЛевоеЗначение < ПравоеЗначение;
			
		ИначеЕсли ВидСравнения = ВидыСравнения.МеньшеИлиРавно  Тогда
			
			Ответ = ЛевоеЗначение <= ПравоеЗначение;
			
		ИначеЕсли ВидСравнения = ВидыСравнения.НачинаетсяС  Тогда
			
			Если ТипЛ = ТипСтрока И ТипП = ТипСтрока Тогда
				ДлинаП = СтрДлина(ПравоеЗначение);
				ЧастьЛ = Лев(ЛевоеЗначение, ДлинаП);
				Ответ = (ВРег(ЧастьЛ) = ВРег(ПравоеЗначение));
			КонецЕсли;
			
		ИначеЕсли ВидСравнения = ВидыСравнения.НеЗаполнено  Тогда
			
			Ответ = НЕ ЗначениеЗаполнено(ЛевоеЗначение);
			
		ИначеЕсли ВидСравнения = ВидыСравнения.НеНачинаетсяС  Тогда
			
			Если ТипЛ = ТипСтрока 
				И ТипП = ТипСтрока Тогда
				ДлинаП = СтрДлина(ПравоеЗначение);
				ЧастьЛ = Лев(ЛевоеЗначение, ДлинаП);
				Ответ = (ВРег(ЧастьЛ) <> ВРег(ПравоеЗначение));
			КонецЕсли;
			
		ИначеЕсли ВидСравнения = ВидыСравнения.НеРавно  Тогда
			
			Если ТипЗнч(ЛевоеЗначение) = ТипСтрока И ТипЗнч(ПравоеЗначение) = ТипСтрока Тогда
				Ответ = ВРег(ЛевоеЗначение) <> ВРег(ПравоеЗначение);
			КонецЕсли;
			
		ИначеЕсли ВидСравнения = ВидыСравнения.НеСодержит  Тогда
			
			Если ТипЛ = ТипСтрока И ТипП = ТипСтрока Тогда
				Ответ = (СтрНайти(ВРег(ЛевоеЗначение), ВРег(ПравоеЗначение)) = 0)
			КонецЕсли;
			
		ИначеЕсли ВидСравнения = ВидыСравнения.Равно  Тогда
			
			Если ТипЗнч(ЛевоеЗначение) = ТипСтрока 
				И ТипЗнч(ПравоеЗначение) = ТипСтрока Тогда
				Ответ = ВРег(ЛевоеЗначение) = ВРег(ПравоеЗначение);
			Иначе
				Ответ = (ЛевоеЗначение = ПравоеЗначение);
			КонецЕсли;
			
		ИначеЕсли ВидСравнения = ВидыСравнения.Содержит  Тогда
			
			Если ТипЛ = ТипСтрока И ТипП = ТипСтрока Тогда
				Ответ = (СтрНайти(ВРег(ЛевоеЗначение), ВРег(ПравоеЗначение)) > 0)
			КонецЕсли;
			
		Иначе
			
			Ответ = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		Ответ = Ложь;
		
	КонецПопытки;
	
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьВходящиеОбновленияБота(ДанныеБота) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Если ЗначениеЗаполнено(ДанныеБота.Смещение) Тогда
		СтруктураПараметров.Вставить("offset", ДанныеБота.Смещение + 1);
	КонецЕсли;
	
	СтрокаJSON = ТелеграмAPI.ВыполнитьМетод(ДанныеБота, "getUpdates", СтруктураПараметров, Перечисления.ТелеграмСпособыЗапросов.Простой);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	ВходящиеДанные = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
	Если ВходящиеДанные.ok = Ложь Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Сервер Telegram вернул ошибку: error_code: %1, description: %2'"), ВходящиеДанные.error_code, ВходящиеДанные.description);
		ВызватьИсключение ТекстИсключения;
	Иначе
		Возврат ВходящиеДанные.result;
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьВходящиеОбновленияБота(ВходящиеОбновления, ДанныеБота) Экспорт
	
	КоллекцияСвойств = ВходящиеОбновления.Свойства();
	Если КоллекцияСвойств.Получить("result") <> Неопределено Тогда
		
		Если ТипЗнч(ВходящиеОбновления.result) = Тип("ОбъектXDTO") Тогда
			Обновления = Новый Массив;
			Обновления.Добавить(ВходящиеОбновления.result);
		Иначе // СписокXDTO
			Обновления = ВходящиеОбновления.result;
		КонецЕсли;
		
		Для Каждого Обновление Из Обновления Цикл
			ОбработатьВходящееОбновлениеБота(Обновление, ДанныеБота);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Ключевая процедура обработки входящих обновлений бота
//
// Параметры:
//  Обновление	 - ОбъектXDTO - результат считывания JSON входящего сообщения 
//  ДанныеБота	 - Структура - см. данные ТелеграмСервер.ПолучитьДанныеБотаПоКлючу(..)
//
Процедура ОбработатьВходящееОбновлениеБота(Обновление, ДанныеБота) Экспорт
	
	ИдентификаторОбновления = Обновление.update_id;
	
	КоллекцияСвойств = Обновление.Свойства();
	ОтветКонтекстнойКлавиатуры = Неопределено;
	Если КоллекцияСвойств.Получить("message") <> Неопределено Тогда
		ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
		Сообщение = Обновление.message;
	ИначеЕсли КоллекцияСвойств.Получить("inline_query") <> Неопределено Тогда
		ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.ВстроенныйЗапрос;
		Сообщение = Неопределено;
	ИначеЕсли КоллекцияСвойств.Получить("chosen_inline_result") <> Неопределено Тогда
		ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.ВыбранныйЛинейныйРезультат;
		Сообщение = Неопределено;
	ИначеЕсли КоллекцияСвойств.Получить("callback_query") <> Неопределено Тогда
		ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры;
		КоллекцияСвойств = Обновление.callback_query.Свойства();
		Если КоллекцияСвойств.Получить("message") <> Неопределено Тогда
			Сообщение = Обновление.callback_query.message;
		Иначе
			Сообщение = Неопределено;
		КонецЕсли;
		ОтветКонтекстнойКлавиатуры = Обновление.callback_query.data;
	КонецЕсли;

	Если Сообщение = Неопределено Тогда
		ТекстСообщения = "";
		ИдентификаторЧата = Неопределено;
		ИдентификаторСообщения = Неопределено;
	Иначе
		КоллекцияСвойств = Сообщение.Свойства();
		Если КоллекцияСвойств.Получить("text") <> Неопределено Тогда
			ТекстСообщения = Сообщение.text;
		Иначе
			ТекстСообщения = "";
		КонецЕсли;
		ИдентификаторЧата = Сообщение.chat.id;
		ИдентификаторСообщения = Сообщение.message_id;
	КонецЕсли;
	
	ПозволитьДальнейшееОбщение = Истина;
	
	Если Сообщение <> Неопределено Тогда
		РегистрыСведений.ТелеграмСобеседники.ЗапомнитьСобеседника(Сообщение, ДанныеБота, ПозволитьДальнейшееОбщение);
	КонецЕсли;
	
	// Структура настроек пользователя. Состав структуры изменяется в РегистрыСведений.ТелеграмНастройкиПользователей.ПолучитьСоставНастроек().
	НастройкиПользователя = РегистрыСведений.ТелеграмНастройкиПользователей.ПолучитьНастройкиПользователя(ДанныеБота.Бот, ИдентификаторЧата);
			
	НакопленныеДанные = Новый Структура;
	НакопленныеДанные.Вставить("ДанныеБота", 					ДанныеБота);
	НакопленныеДанные.Вставить("ИдентификаторОбновления",		ИдентификаторОбновления);
	НакопленныеДанные.Вставить("ИдентификаторСообщения",		ИдентификаторСообщения);
	НакопленныеДанные.Вставить("ИдентификаторЧата", 			ИдентификаторЧата);
	НакопленныеДанные.Вставить("ВидВходящегоОбновления", 		ВидВходящегоОбновления);
	НакопленныеДанные.Вставить("Обновление", 					Обновление);
	НакопленныеДанные.Вставить("Сообщение", 					Сообщение);
	НакопленныеДанные.Вставить("ТекстСообщения",				ТекстСообщения);
	НакопленныеДанные.Вставить("НастройкиПользователя",			НастройкиПользователя);
	НакопленныеДанные.Вставить("ОтветКонтекстнойКлавиатуры",	ОтветКонтекстнойКлавиатуры);			
	НакопленныеДанные.Вставить("ДатаФиксации",					ТекущаяДатаСеанса());	// для проверки на дубль одинаковой команды.		
	
	РегистрыСведений.ТелеграмНастройкиБотов.СохранитьНастройкиБота(НакопленныеДанные); // Зафиксировать смещение до формирования ответа.
	
	// Проверка на дубль команды от Телеграм в течении 10 секунд. Защита от повторных срабатываний.
	Если ЕстьДубльНакопленныхДанных(НакопленныеДанные) Тогда
		// Отмена дальнейшей обработки, т.к. обнаружен дубль ранее отправленного сообщения.
		Возврат;
	КонецЕсли;
	
	Если ДанныеБота.ОграниченныйДоступ = Истина 
		И ПозволитьДальнейшееОбщение = Ложь Тогда
		
		// Если ограниченный доступ, то вручную необходимо установить признак "ПозволятьОбщение" в регистре "ТелеграмСобеседники".
		Сообщение = Новый Структура;
		Сообщение.Вставить("ТекстСообщения", НСтр("ru = 'Доступ к боту ограничен его настройками. Обратитесь к администратору бота, и после получения разрешения заново введите команду /start'"));
		ОтправитьСообщение(Сообщение, НакопленныеДанные);
		Возврат;
		
	КонецЕсли;
	
	// Добавление входящего сообщения в историю сообщений (СообщенияЧатБота).
	ДобавитьВходящееВИсториюСообщений(НакопленныеДанные, НакопленныеДанные.НастройкиПользователя.Пользователь);
	
	ТелеграмСервисы = Справочники.ТелеграмСервис.ПолучитьСервисыДляВыполнения(НакопленныеДанные);
	
	//Попытка
		
		ВыполнениеОбработокВходящегоОбновленияБота(ТелеграмСервисы, НакопленныеДанные);
		
	//Исключение
	//	
	//	Сообщение = Новый Структура;
	//	Сообщение.Вставить("ТекстСообщения", СтрШаблон(НСтр("ru = 'При формировании ответа возникла ошибка: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()))); 
	//	ОтправитьСообщение(Сообщение, НакопленныеДанные);
	//	ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); // Передать ошибку дальше, в фоновое задание.
	//	
	//КонецПопытки;
	
КонецПроцедуры

Функция ВставитьЭмодзи(РезультатСборки) Экспорт
	
	Ответ = РезультатСборки;
	
	МассивЭмодзи = Новый Массив;
	
	ИскатьС = 1;
	Позиция = СтрНайти(РезультатСборки, "Эмодзи_", , ИскатьС);
	Пока Позиция > 0 Цикл
		Эмодзи = Сред(РезультатСборки, Позиция, 12);
		МассивЭмодзи.Добавить(Эмодзи);
		ИскатьС = Позиция + 1;
		Позиция = СтрНайти(РезультатСборки, "Эмодзи_", , ИскатьС);
	КонецЦикла;
	
	Для Каждого Эмодзи Из МассивЭмодзи Цикл
		Представление = Сред(Эмодзи, 8);
		СпрЭмодзи = Справочники.ТелеграмЭмодзи.НайтиПоНаименованию(Представление, Истина);
		КодЭмодзи = СпрЭмодзи.Код;
		Юникод = "";
		Если ЗначениеЗаполнено(КодЭмодзи) Тогда
			Если СтрДлина(КодЭмодзи) = 4 Тогда
				Юникод = "\u" + КодЭмодзи;
			Иначе // 8
				Юникод = "\u" + Лев(КодЭмодзи, 4) + "\u" + Сред(КодЭмодзи, 5);
			КонецЕсли;
		КонецЕсли;
		Ответ = СтрЗаменить(Ответ, Эмодзи, Юникод);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьМодельДляСборкиМетода(Метод) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Метод", Метод);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелеграмМетоды.Метод КАК Метод,
	|	ТелеграмМетоды.Параметр КАК Параметр,
	|	ТелеграмМетоды.Параметр1С КАК Параметр1С,
	|	ТелеграмМетоды.ОбязательныйДляЗаполнения КАК ОбязательныйДляЗаполнения,
	|	ТелеграмМетоды.ОбязательныйДляПередачи КАК ОбязательныйДляПередачи,
	|	ТелеграмМетоды.ОсобеннаяСборка КАК ОсобеннаяСборка
	|ИЗ
	|	РегистрСведений.ТелеграмМетоды КАК ТелеграмМетоды
	|ГДЕ
	|	ТелеграмМетоды.Метод = &Метод
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТелеграмМетоды.Сортировка";
	Результат = Запрос.Выполнить();
	МодельДляСборки = Результат.Выгрузить();
	Возврат МодельДляСборки;
	
КонецФункции

Процедура ОсобеннаяСборкаПараметра(СтруктураОтправки, Сообщение, ЭлементМодели, НакопленныеДанные) Экспорт
	
	Если ЭлементМодели.Параметр = "chat_id" Тогда
		
		Если Сообщение.Свойство("ИдентификаторЧата") Тогда
			СтруктураОтправки.Вставить(ЭлементМодели.Параметр,
				Сообщение.ИдентификаторЧата);
		Иначе
			СтруктураОтправки.Вставить(ЭлементМодели.Параметр,
				НакопленныеДанные.ИдентификаторЧата);
		КонецЕсли;
		
	ИначеЕсли ЭлементМодели.Параметр = "reply_markup" Тогда
		
		Если Сообщение.Свойство("Клавиатура") Тогда
			СобраннаяКлавиатура = Справочники.ТелеграмКлавиатуры.СобратьКлавиатуру(
				Сообщение.Клавиатура, НакопленныеДанные);
				
			Если СобраннаяКлавиатура = Неопределено Тогда
				ТекстИсключения = НСтр("ru = 'Не удалось собрать клавиатуру '") + Сообщение.Клавиатура;
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			СтруктураОтправки.Вставить("reply_markup", СобраннаяКлавиатура);
		КонецЕсли;
		
	ИначеЕсли ЭлементМодели.Параметр = "message_id" Тогда
		
		Если Сообщение.Свойство("ИдентификаторСообщения") Тогда
			СтруктураОтправки.Вставить(ЭлементМодели.Параметр,
				Сообщение.ИдентификаторСообщения);
		Иначе
			СтруктураОтправки.Вставить(ЭлементМодели.Параметр,
				НакопленныеДанные.ИдентификаторСообщения);
		КонецЕсли;
		
	ИначеЕсли ЭлементМодели.Параметр = "photo"
		ИЛИ ЭлементМодели.Параметр = "video"
		ИЛИ ЭлементМодели.Параметр = "document"
		ИЛИ ЭлементМодели.Параметр = "audio"
		ИЛИ ЭлементМодели.Параметр = "voice" Тогда
		
		Если Сообщение.Свойство("ВходнойФайлСтруктура") = Истина Тогда
			Если Сообщение.ВходнойФайлСтруктура.ВидИсточника = "СерверТелеграм" Тогда
				СтруктураОтправки.Вставить(ЭлементМодели.Параметр, Сообщение.ВходнойФайлСтруктура.Источник);
			Иначе
				СтруктураОтправки.Вставить("ВходнойФайлСтруктура", Сообщение.ВходнойФайлСтруктура);
				СтруктураОтправки.ВходнойФайлСтруктура.Вставить("Ключ", ЭлементМодели.Параметр);
			КонецЕсли;
		Иначе
			ТекстИсключения = СтрШаблон(НСтр("ru = 'При формировании структуры отправки для метода %1 не обнаружено значение ВходнойФайлСтруктура.'"), ЭлементМодели.Параметр);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СобратьСтруктуруОтправки(Сообщение, МодельДляСборки, НакопленныеДанные) Экспорт
	
	СтруктураОтправки = Новый Структура;
	
	Для Каждого ЭлементМодели Из МодельДляСборки Цикл
		
		Если ЭлементМодели.ОсобеннаяСборка Тогда
			ОсобеннаяСборкаПараметра(СтруктураОтправки, Сообщение, ЭлементМодели, НакопленныеДанные);
		Иначе
			ЗначениеПараметра = "";
			НаличиеПараметра = Сообщение.Свойство(ЭлементМодели.Параметр1С, ЗначениеПараметра);
			Если НаличиеПараметра = Истина Тогда
				СтруктураОтправки.Вставить(ЭлементМодели.Параметр, ЗначениеПараметра);
			ИначеЕсли ЭлементМодели.ОбязательныйДляЗаполнения = Истина Тогда
				ТекстИсключения = СтрШаблон(НСтр("ru = 'При формировании структуры отправки для метода %1 не обнаружен обязательный для заполнения параметр %2'"), ЭлементМодели.Метод, ЭлементМодели.Параметр1С);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭлементМодели.ОбязательныйДляПередачи Тогда
			
			ПараметрЗаполнен = СтруктураОтправки.Свойство(ЭлементМодели.Параметр);
			
			Если Не ПараметрЗаполнен 
				И ЭлементМодели.Параметр1С = "ВходнойФайлСтруктура"
				И СтруктураОтправки.Свойство("ВходнойФайлСтруктура") Тогда
				
				ПараметрЗаполнен = Истина;
				
			КонецЕсли;
			
			Если Не ПараметрЗаполнен Тогда
				ТекстИсключения = СтрШаблон(НСтр("ru = 'При формировании структуры отправки для метода %1 не заполнен обязательный для передачи параметр %2'"), ЭлементМодели.Метод, ЭлементМодели.Параметр);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОтправки;
	
КонецФункции

// Ключевая процедура выполнения кода обработки
Процедура ВыполнитьКодСборкиОтвета(КодСборки, НакопленныеДанные) Экспорт
	
	ОбработчикПереопределен = Ложь;
	
	ПереопределитьВыполнитьКодСборкиОтветаДляОтладки(НакопленныеДанные, ОбработчикПереопределен);
	
	Если ОбработчикПереопределен Тогда
		Возврат;
	КонецЕсли;
	
	// BSLLS:ExecuteExternalCodeInCommonModule-off 
	Выполнить(КодСборки);
	// BSLLS:ExecuteExternalCodeInCommonModule-on 
	
КонецПроцедуры

// sendMessage
Процедура ОтправитьСообщение(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendMessage";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры

// sendPhoto
Процедура ОтправитьФотографию(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendPhoto";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры

// sendVideo
Процедура ОтправитьВидео(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendVideo";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры

// sendDocument
Процедура ОтправитьДокумент(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendDocument";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры

// sendAudio
Процедура ОтправитьАудио(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendAudio";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры

// sendVoice
Процедура ОтправитьГолос(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendVoice";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры

// sendLocation
Процедура ОтправитьМестоположение(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendLocation";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры

// sendVenue
Процедура ОтправитьМестоНаКарте(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendVenue";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры

// editMessageReplyMarkup
Процедура РедактироватьКонтекстнуюКлавиатуру(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "editMessageReplyMarkup";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры

// editMessageText
Процедура ИзменитьТекстСообщения(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "editMessageText";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры

// deleteMessage
Процедура УдалитьСообщение(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "deleteMessage";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры

// Основная процедура вызова метода
Процедура СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные) Экспорт
	
	Если НакопленныеДанные = Неопределено Тогда
		НакопленныеДанные = Новый Структура;
	КонецЕсли;
	
	Если НакопленныеДанные.Свойство("ДанныеБота") = Истина Тогда
		ДанныеБота = НакопленныеДанные.ДанныеБота;
	Иначе
		Бот = Сообщение.Бот; // Ссылка на используемого бота
		ДанныеБота = ПолучитьДанныеБота(Бот);
	КонецЕсли;
	
	МодельДляСборки 	= ПолучитьМодельДляСборкиМетода(Метод);
	СтруктураОтправки 	= СобратьСтруктуруОтправки(Сообщение, МодельДляСборки, НакопленныеДанные);
	ПроверитьЗаполненностьПараметров(Метод, СтруктураОтправки); // выдает предупреждение на тот случай, если пользователь забыл заполнить регистр Методы... анализируется только случай с sendMessage
	ТелеграмAPI.ВыполнитьМетод(ДанныеБота, Метод, СтруктураОтправки);
	
	Если Метод = "sendMessage" Тогда
		// Добавление исходящего сообщения в историю сообщений (СообщенияЧатБота).
		
		Если Не Сообщение.Свойство("ПользовательОтправитель") Тогда
			ПользовательОтправитель = Пользователи.ТекущийПользователь();
		Иначе
			ПользовательОтправитель = Сообщение.ПользовательОтправитель;
		КонецЕсли;
		
		ДобавитьИсходящееВИсториюСообщений(ДанныеБота.Бот, НакопленныеДанные.ИдентификаторЧата, ПользовательОтправитель, Сообщение.ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьФайл(НакопленныеДанные, ПолучитьТолькоДвоичныеДанные = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НакопленныеДанные.Вставить("ЗагруженныйФайл", Неопределено);
	НакопленныеДанные.Вставить("ДвоичныеДанныеФайла", Неопределено);
	
	Сообщение 			= НакопленныеДанные.Сообщение;
	ИнформацияОФайлах 	= ИнформацияОФайлахСообщения(Сообщение);
	
	Запрос 		= ТелеграмAPI.СоздатьЗапрос();
	Соединение 	= ТелеграмAPI.СоздатьСоединение();
	
	Для Каждого СтрокаИнформации Из ИнформацияОФайлах Цикл
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("file_id", СтрокаИнформации.ИдентификаторФайла);
		ОтветJSON = ТелеграмAPI.ВыполнитьМетод(НакопленныеДанные.ДанныеБота, "getFile", СтруктураПараметров, Перечисления.ТелеграмСпособыЗапросов.Простой);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветJSON);
		
		ОтветСтруктура = ПрочитатьJSON(ЧтениеJSON);
		Если ОтветСтруктура.ok = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьФайлаСервер 	= ОтветСтруктура.result.file_path;
		ЛокальныйПутьФайла 	= КаталогСохранения(НакопленныеДанные);
		ЛокальноеИмяФайла	= СобратьИмяФайлаСохранения(НакопленныеДанные, СтрокаИнформации, ПутьФайлаСервер);
		ПолноеИмяФайла 		= ЛокальныйПутьФайла + "\" + ЛокальноеИмяФайла;
		
		Запрос.АдресРесурса = СтрШаблон("/file/bot%1/%2", НакопленныеДанные.ДанныеБота.Жетон, ПутьФайлаСервер);
		Соединение.Получить(Запрос, ПолноеИмяФайла); // Исключения передаются наверх и попадают в ответ
		
		Если ПолучитьТолькоДвоичныеДанные Тогда
			// Используется для фиксации в журнале сообщений.
			НакопленныеДанные.ДвоичныеДанныеФайла =  Новый ДвоичныеДанные(ПолноеИмяФайла);
			НакопленныеДанные.ЗагруженныйФайл = ЛокальноеИмяФайла;
			УдалитьФайлы(ПолноеИмяФайла);
			Прервать;
		КонецЕсли;
		
		НакопленныеДанные.ЗагруженныйФайл = ПолноеИмяФайла;
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодсказкаПоСтруктуреНакопленныеДанные() Экспорт
	
	Ответ = ПолучитьОбщийМакет("ТелеграмПодсказкаПоСтруктуреНакопленныеДанные").ПолучитьТекст();
	Возврат Ответ;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЗАДАЧАМИ ИЗ ТЕЛЕГРАМА

// Возвращает ссылку на созданную задачу из данных чат-бота Телеграм
//
// Параметры:
//  ТемаЗадачи				 - Строка  
//  ОписаниеЗадачи			 - Строка
//  Автор					 - СправочникСсылка.Пользователи - автор и получатель услуги
//  СписокЗагруженныхФайлов	 - Массив - массив строк с загруженными путями файлов на сервере 
// 
// Возвращаемое значение:
//  ЗадачиСсылка.ЗадачиПользователя - ссылка на созданную задачу 
//
Функция СоздатьЗадачуИзДанныхТелеграм(ТемаЗадачи, ОписаниеЗадачи, Автор, СписокЗагруженныхФайлов) Экспорт
	
	// Формирование задачи.
	ОбъектЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();	
	
	ОбъектЗадача.ДатаНачала = ТекущаяДатаСеанса();
	
	ОбъектЗадача.Проект = Справочники.Проекты.БезПроекта;
	ОбъектЗадача.Наименование = ТемаЗадачи;
	ОбъектЗадача.Описание = ОписаниеЗадачи;
	ОбъектЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	
	ОбъектЗадача.Инициатор  = Автор;
	ОбъектЗадача.ПолучательУслуг = Автор;
	
	ОбъектЗадача.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(ОбъектЗадача.Исполнитель) Тогда
		// Установка роли Координатор выполнения задач.
		ОбъектЗадача.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения;
	КонецЕсли;
	
	ОбъектЗадача.Записать();
	
	// Установка состояния в Зарегистрирована.
	РегистрыСведений.ТекущиеСостоянияЗадач.ОбновитьТекущееСостояниеЗадачи(ОбъектЗадача.Ссылка, Справочники.СостоянияЗадач.Зарегистрирована);
	
	// Заполнение вложений.
	Для каждого ТекПутьКФайлу Из СписокЗагруженныхФайлов Цикл
		
		// *Не работает, т.к. обращается к справочнику Файлы, а не ЗадачиПользователяПрисоединенныеФайлы. Возможно в будущем заработает.
		// ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайлСДиска(ОбъектЗадача.Ссылка, ТекПутьКФайлу);
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ТекПутьКФайлу);
		АдресЗагруженногоФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ТекПутьКФайлу);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", ОбъектЗадача.Ссылка);
		ПараметрыФайла.Вставить("Автор", Автор);
		ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураИмениФайла.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураИмениФайла.Расширение));
		ПараметрыФайла.Вставить("ВремяИзменения", МестноеВремя(ОбъектЗадача.ДатаНачала,ЧасовойПоясСеанса()));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ОбъектЗадача.ДатаНачала);
		
		НовыйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресЗагруженногоФайла);
		
	КонецЦикла;
	
	// Фиксация события задачи.
	Комментарий = СтрШаблон(НСтр("ru = 'Создан из чат бота Телеграм. Дата создания: %1'"), ОбъектЗадача.ДатаНачала);
	ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
		ОбъектЗадача.Ссылка, 
		Перечисления.ВидыСобытийЗадач.ЗарегистрированоПоТелеграм, 
		Комментарий);
		
		
	Возврат ОбъектЗадача.Ссылка;

КонецФункции // СоздатьЗадачуИзДанныхТелеграм()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ОТЛАДКИ КОДА СБОРКИ

// Используется для отладки и сборки кода для обработчиков.
Процедура ПереопределитьВыполнитьКодСборкиОтветаДляОтладки(НакопленныеДанные, ОбработчикПереопределен)

	ОбработчикПереопределен = Ложь;
	// АПК:1297-выкл Не проверять на локализацию 
	Если НакопленныеДанные.НаименованиеОбработки = "<Наименование используемой обработки>" Тогда
		
		ОбработчикПереопределен = Истина;
		// - НАЧАЛО КОДА СБОРКИ ОБРАБОТЧИКА
		
		// - КОНЕЦ КОДА СБОРКИ ОБРАБОТЧИКА
		
	ИначеЕсли НакопленныеДанные.НаименованиеОбработки = "_Отправка сообщений всем" Тогда
		
		ОбработчикПереопределен = Истина;
		// - НАЧАЛО КОДА СБОРКИ ОБРАБОТЧИКА
		КодСборкиОтправитьСообщенияВсем(НакопленныеДанные);
		// - КОНЕЦ КОДА СБОРКИ ОБРАБОТЧИКА
		
	ИначеЕсли НакопленныеДанные.НаименованиеОбработки = "_Сохранить картинку" Тогда
		
		ОбработчикПереопределен = Истина;
		// - НАЧАЛО КОДА СБОРКИ ОБРАБОТЧИКА
		КодСборкиСохранитьКартинку(НакопленныеДанные);
		// - КОНЕЦ КОДА СБОРКИ ОБРАБОТЧИКА
		
	ИначеЕсли НакопленныеДанные.НаименованиеОбработки = "_Начать диалог (по исключению)" Тогда
		
		ОбработчикПереопределен = Истина;
		// - НАЧАЛО КОДА СБОРКИ ОБРАБОТЧИКА
		КодСборки_НачатьДиалог(НакопленныеДанные);
		// - КОНЕЦ КОДА СБОРКИ ОБРАБОТЧИКА
		
	КонецЕсли;
	// АПК:1297-вкл Не проверять на локализацию 
 
КонецПроцедуры

// Пример 1
Процедура КодСборкиОтправитьСообщенияВсем(НакопленныеДанные)


КонецПроцедуры

// Пример 2
Процедура КодСборкиСохранитьКартинку(НакопленныеДанные)


КонецПроцедуры

// Пример 3
Процедура КодСборки_НачатьДиалог(НакопленныеДанные)


КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьЗаполненностьПараметров(Метод, СтруктураОтправки)
	
	Если Метод = "sendMessage" И СтруктураОтправки.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для корректной работы бота необходимо обновить версию подсистемы, кнопка ""Обновление версии"".'"));
	КонецЕсли;
	
КонецПроцедуры

Функция ИнформацияОФайлахСообщения(Сообщение)
	
	Ответ = Новый Массив;
	
	Если ТипЗнч(Сообщение) <> Тип("ОбъектXDTO") Тогда
		Возврат Ответ;		
	КонецЕсли;
		
	КоллекцияСвойств = Сообщение.Свойства();
	
	Если КоллекцияСвойств.Получить("audio") <> Неопределено Тогда
		
		ЭлементОтвета = Новый Структура(
		"ИдентификаторФайла, ИмяФайла",
		Сообщение.audio.file_id,
		"");
		
		ЭлементОтвета.Вставить("ТипСообщенияФайла", Перечисления.ТипыСообщенийЧатБота.Аудио);
		Ответ.Добавить(ЭлементОтвета);
		
	КонецЕсли;
	
	Если КоллекцияСвойств.Получить("document") <> Неопределено Тогда
		
		ЭлементОтвета = Новый Структура(
		"ИдентификаторФайла, ИмяФайла",
		Сообщение.document.file_id,
		Сообщение.document.file_name);
		ЭлементОтвета.Вставить("ТипСообщенияФайла", Перечисления.ТипыСообщенийЧатБота.Файл);
		Ответ.Добавить(ЭлементОтвета);
		
	КонецЕсли;
	
	Если КоллекцияСвойств.Получить("photo") <> Неопределено Тогда
		
		Фото = ФотоИзКоллекцииСвойств(Сообщение);
		
		ЭлементОтвета = Новый Структура(
		"ИдентификаторФайла, ИмяФайла",
		Фото.file_id,
		"");
		ЭлементОтвета.Вставить("ТипСообщенияФайла", Перечисления.ТипыСообщенийЧатБота.Картинка);
		Ответ.Добавить(ЭлементОтвета); // последний элемент не был сжат
		
	КонецЕсли;
	
	Если КоллекцияСвойств.Получить("sticker") <> Неопределено Тогда
		
		ЭлементОтвета = Новый Структура(
		"ИдентификаторФайла, ИмяФайла",
		Сообщение.sticker.file_id,
		"");
		ЭлементОтвета.Вставить("ТипСообщенияФайла", Перечисления.ТипыСообщенийЧатБота.Стикер);
		Ответ.Добавить(ЭлементОтвета);
		
	КонецЕсли;
	
	Если КоллекцияСвойств.Получить("video") <> Неопределено Тогда
		
		ЭлементОтвета = Новый Структура(
		"ИдентификаторФайла, ИмяФайла",
		Сообщение.video.file_id,
		"");
		ЭлементОтвета.Вставить("ТипСообщенияФайла", Перечисления.ТипыСообщенийЧатБота.Видео);
		Ответ.Добавить(ЭлементОтвета);
		
	КонецЕсли;
	
	Если КоллекцияСвойств.Получить("voice") <> Неопределено Тогда
		
		ЭлементОтвета = Новый Структура(
		"ИдентификаторФайла, ИмяФайла",
		Сообщение.voice.file_id,
		"");
		ЭлементОтвета.Вставить("ТипСообщенияФайла", Перечисления.ТипыСообщенийЧатБота.Аудио);
		Ответ.Добавить(ЭлементОтвета);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ФотоИзКоллекцииСвойств(Сообщение)

	Если ТипЗнч(Сообщение.photo.photo) = Тип("СписокXDTO") Тогда
		
		// последний элемент не сжат
		КоличествоЭлементов = Сообщение.photo.photo.Количество();
		Фото =  Сообщение.photo.photo[КоличествоЭлементов - 1];
		
	Иначе
		// единичная картинка, где нет сжатого элемента
		Фото = Сообщение.photo.photo;
		
	КонецЕсли;
	
	Возврат Фото;
	
КонецФункции 

Функция КаталогСохранения(НакопленныеДанные)
	
	ИмяКаталогаБота 		= НакопленныеДанные.ДанныеБота.КаталогСохраненияФайлов;
	ИмяПапкиПоДате			= Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd");
	ИмяКаталогаСохранения 	= ИмяКаталогаБота + "\" + ИмяПапкиПоДате;
	
	Если НЕ ЗначениеЗаполнено(ИмяКаталогаБота) Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при загрузке файла: не заполнено значение ""Каталог сохранения файлов"" бота '") + НакопленныеДанные.ДанныеБота.Имя;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	КаталогСохранения = Новый Файл(ИмяКаталогаСохранения);
	Если КаталогСохранения.Существует() = ЛОЖЬ Тогда
		СоздатьКаталог(ИмяКаталогаСохранения);
	КонецЕсли;
	
	Возврат ИмяКаталогаСохранения;
	
КонецФункции

Функция СобратьИмяФайлаСохранения(НакопленныеДанные, СтрокаИнформации, ПутьФайлаСервер)
	
	ВремяПолучения 			= Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ-мм-сс");
	ИдентификаторЧата 		= Формат(НакопленныеДанные.ИдентификаторЧата, "ЧГ=");
	ИдентификаторСообщения 	= Формат(НакопленныеДанные.ИдентификаторСообщения, "ЧГ=");
	
	Если НЕ ПустаяСтрока(СтрокаИнформации.ИмяФайла) Тогда
		ПравоеИмяФайла = СтрокаИнформации.ИмяФайла;
	Иначе
		ПравоеИмяФайла = СтрЗаменить(ПутьФайлаСервер, "/", "-");
	КонецЕсли;
	
	ИмяФайлаСохранения = ВремяПолучения + "-" + ИдентификаторЧата + "-" + ИдентификаторСообщения + "-" + ПравоеИмяФайла;
	Возврат ИмяФайлаСохранения;
	
КонецФункции

// Возвращает идентификаторы действующим чатам пользователей
//
// Параметры:
//  БотТелеграм	
//  Пользователь 
// 
// Возвращаемое значение:
//  Массив - массив чисел идентификаторов чата. Только те идентификаторы, где установлен признак "Позволять общение". 
//
Функция ИдентификаторыЧатаПользователя(БотТелеграм, Пользователь)

	МассивИдентификаторов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТелеграмНастройкиПользователей.ИдентификаторЧата КАК ИдентификаторЧата
	               |ИЗ
	               |	РегистрСведений.ТелеграмНастройкиПользователей КАК ТелеграмНастройкиПользователей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТелеграмСобеседники КАК ТелеграмСобеседники
	               |		ПО ТелеграмНастройкиПользователей.Бот = ТелеграмСобеседники.Бот
	               |			И ТелеграмНастройкиПользователей.ИдентификаторЧата = ТелеграмСобеседники.ИдентификаторЧата
	               |ГДЕ
	               |	ТелеграмНастройкиПользователей.Пользователь = &Пользователь
	               |	И ТелеграмНастройкиПользователей.Бот = &БотТелеграм
	               |	И ТелеграмСобеседники.ПозволятьОбщение";
	
	Запрос.УстановитьПараметр("БотТелеграм", БотТелеграм);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		 МассивИдентификаторов.Добавить(Выборка.ИдентификаторЧата);
	
	КонецЦикла;
	
	Возврат МассивИдентификаторов;

КонецФункции // ИдентификаторыЧатаПользователя()

Функция ЕстьДубльНакопленныхДанных(НакопленныеДанные)

	ПоследниеНакопленныеДанные = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ДанныеТелеграмПоследниеНакопленныеДанные", "");
	
	НакопленныеДанныеДляСохранения = ОбщегоНазначения.СкопироватьРекурсивно(НакопленныеДанные);
	НакопленныеДанныеДляСохранения.Удалить("ДанныеБота");
	НакопленныеДанныеДляСохранения.Удалить("ИдентификаторОбновления");
	НакопленныеДанныеДляСохранения.Удалить("ИдентификаторСообщения");
	НакопленныеДанныеДляСохранения.Удалить("НастройкиПользователя");
	НакопленныеДанныеДляСохранения.Удалить("Обновление");
	НакопленныеДанныеДляСохранения.Удалить("Сообщение");
	
	// Добавить идентификатор файла, если есть для сравнения файлов.
	ФайлыВСообщении = ИнформацияОФайлахСообщения(НакопленныеДанные.Сообщение);
	Если ФайлыВСообщении.Количество() > 0 Тогда
		НакопленныеДанныеДляСохранения.Вставить("ИдентификаторФайла", ФайлыВСообщении[0].ИдентификаторФайла);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ДанныеТелеграмПоследниеНакопленныеДанные", "", НакопленныеДанныеДляСохранения);
	
	Если ПоследниеНакопленныеДанные <> Неопределено Тогда
		
		РазницаДат = НакопленныеДанныеДляСохранения.ДатаФиксации - ПоследниеНакопленныеДанные.ДатаФиксации;
		ПоследниеНакопленныеДанные.Удалить("ДатаФиксации");
		НакопленныеДанныеДляСохранения.Удалить("ДатаФиксации");
		
		// Если в течении 10 секунд было отправлено одно и тоже сообщение, то отмена.
		ЕстьДубль = РазницаДат < 10 
			И ОбщегоНазначения.КоллекцииИдентичны(ПоследниеНакопленныеДанные, НакопленныеДанныеДляСохранения);
		
		Если ЕстьДубль Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ЕстьДубльНакопленныхДанных()

Процедура ДобавитьВходящееВИсториюСообщений(НакопленныеДанные, ПользовательСообщения)
	
	// Основные параметры
	// 		* ЧатБот - СправочникСсылка.ТелеграмБоты
	// 		* IDЧата
	// 		* Статус - ПеречислениеСсылка.СтатусСообщенийЧатБота
	// 		* ТипСообщения - ПеречислениеСсылка.ТипыСообщенийЧатБота
	// 		* СообщениеТекст
	// 		* СообщениеДвоичныеДанные - ДвоичныеДанные,Неопределено
	// 		* СообщениеИмяФайла
	// 		* Клавиатура - Строка,Неопределено

	ОсновныеПараметры = Новый Структура;
	ОсновныеПараметры.Вставить("ЧатБот", НакопленныеДанные.ДанныеБота.Бот);
	ОсновныеПараметры.Вставить("IDЧата", НакопленныеДанные.ИдентификаторЧата);
	ОсновныеПараметры.Вставить("Статус", Перечисления.СтатусСообщенийЧатБота.Принято);
	
	Если НакопленныеДанные.ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры Тогда
	   ТипСообщения = Перечисления.ТипыСообщенийЧатБота.КнопкаКлавиатуры;
	   СообщениеТекст = НакопленныеДанные.ОтветКонтекстнойКлавиатуры;
	   Клавиатура = НакопленныеДанные.ОтветКонтекстнойКлавиатуры;
	Иначе
	   ТипСообщения = Перечисления.ТипыСообщенийЧатБота.Сообщение;
	   СообщениеТекст = НакопленныеДанные.ТекстСообщения;
	   Клавиатура = "";
	КонецЕсли;
	ОсновныеПараметры.Вставить("ТипСообщения", ТипСообщения);
	ОсновныеПараметры.Вставить("СообщениеТекст", СообщениеТекст);
	ОсновныеПараметры.Вставить("Клавиатура", СообщениеТекст);
	
	// Работа с файлами.
	ОсновныеПараметры.Вставить("СообщениеДвоичныеДанные", Неопределено);
	ОсновныеПараметры.Вставить("СообщениеИмяФайла", "");
	ФайлыВСообщении = ИнформацияОФайлахСообщения(НакопленныеДанные.Сообщение);
	Если ФайлыВСообщении.Количество() > 0 Тогда
		
		ОсновныеПараметры.ТипСообщения = ФайлыВСообщении[0].ТипСообщенияФайла;
		
		ЗагрузитьФайл(НакопленныеДанные, Истина);
		
		ОсновныеПараметры.СообщениеДвоичныеДанные = НакопленныеДанные.ДвоичныеДанныеФайла;
	    ОсновныеПараметры.СообщениеИмяФайла = НакопленныеДанные.ЗагруженныйФайл;
		
	КонецЕсли;
	
	
	// Дополнительные параметры
// 		* Внешние_Период 
// 		* Внешние_IDСообщения 
// 		* УстановитьОжиданиеОтвета 
// 		* ЛогинПользователя - Строка 
// 		* ПользовательСообщения - СправочникСсылка.Пользователи - заполнено, если ранее был в настройках определен 
// 		* Пересланное - Булево - Истина, если сообщение переслали 
// 		* Пересланное_Период 
// 		* Пересланное_IDЧата 
// 		* Пересланное_UserName 
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Внешние_Период", ТекущаяДатаСеанса());
	ДопПараметры.Вставить("Внешние_IDСообщения", НакопленныеДанные.Сообщение.message_id);
	ДопПараметры.Вставить("ПользовательСообщения", ПользовательСообщения);
	
	РегистрыСведений.СообщенияЧатБота.ДобавитьЗаписьВИсторию(ОсновныеПараметры, ДопПараметры);

КонецПроцедуры

Процедура ДобавитьИсходящееВИсториюСообщений(ЧатБот, ИдентификаторЧата, ПользовательСообщения, СообщениеТекст, Вложения = Неопределено)

	ОсновныеПараметры = Новый Структура;
	ОсновныеПараметры.Вставить("ЧатБот", ЧатБот);
	ОсновныеПараметры.Вставить("IDЧата", ИдентификаторЧата);
	ОсновныеПараметры.Вставить("Статус", Перечисления.СтатусСообщенийЧатБота.Отправлено);
	ОсновныеПараметры.Вставить("ТипСообщения", Перечисления.ТипыСообщенийЧатБота.Сообщение);
	ОсновныеПараметры.Вставить("СообщениеТекст", СообщениеТекст);
	ОсновныеПараметры.Вставить("Клавиатура", СообщениеТекст);
	
	// Работа с файлами.
	ОсновныеПараметры.Вставить("СообщениеДвоичныеДанные", Неопределено);
	ОсновныеПараметры.Вставить("СообщениеИмяФайла", "");
	Если Вложения <> Неопределено Тогда
		ОсновныеПараметры.ТипСообщения = Вложения.ТипФайла; 
		ОсновныеПараметры.СообщениеДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложения.АдресФайла);
		ОсновныеПараметры.СообщениеИмяФайла 	  = Вложения.ИмяФайла;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Внешние_Период", ТекущаяДатаСеанса());
	ДопПараметры.Вставить("ПользовательСообщения", ПользовательСообщения);
	
	РегистрыСведений.СообщенияЧатБота.ДобавитьЗаписьВИсторию(ОсновныеПараметры, ДопПараметры);

КонецПроцедуры

Процедура ОбработкаИдентификаторовЧатаПользователя(МассивИдентификаторовЧатаПользователя, ДанныеБота, ТекстСообщения, Вложение, ДанныеРезультатаОтправки)

	Для каждого ТекИдентификаторПользователя Из МассивИдентификаторовЧатаПользователя Цикл
		
		Сообщение = Новый Структура;
		Сообщение.Вставить("ТекстСообщения", ТекстСообщения);
		ПользовательОтправитель = ?(ЗначениеЗаполнено(ПользовательОтправитель), ПользовательОтправитель, Пользователи.ТекущийПользователь());
		Сообщение.Вставить("ПользовательОтправитель", ПользовательОтправитель);
		
		НакопленныеДанные = Новый Структура;
		НакопленныеДанные.Вставить("ДанныеБота", ДанныеБота);
		НакопленныеДанные.Вставить("ИдентификаторЧата", ТекИдентификаторПользователя); // ранее сохраненный Идентификатор чата собеседника
		
		Если Вложение = Неопределено Тогда
			// Отправка обычного сообщения.
			
			НачатьТранзакцию();
			
			Попытка
				
				ОтправитьСообщение(Сообщение, НакопленныеДанные);
				
				ДанныеРезультатаОтправки.РезультатОтправки = Истина;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1: Ошибка при попытке отправки на пользователя %2 сообщения.
				|Описание ошибки: %3'"), ДанныеБота.Бот, ДанныеБота.Пользователь, ОписаниеОшибки) ;
				ДанныеРезультатаОтправки.ОписаниеРезультата = ТекстСообщения;
				
			КонецПопытки;
			
		Иначе
			// Отправка вложений.
			
			ВходнойФайлСтруктура = Новый Структура;
			ВходнойФайлСтруктура.Вставить("ВидИсточника", "АдресВХранилище");
			ВходнойФайлСтруктура.Вставить("Источник", Вложение.АдресФайла);
			ВходнойФайлСтруктура.Вставить("ИмяФайла", Вложение.ИмяФайла);
			Сообщение.Вставить("ВходнойФайлСтруктура", ВходнойФайлСтруктура);
			
			Если ТекстСообщения <> "" Тогда
				// Подпись
				Сообщение.Вставить("Подпись", ТекстСообщения);
			КонецЕсли;
			
			НачатьТранзакцию();
			
			Попытка
				
				Если Вложение.ТипФайла = Перечисления.ТипыСообщенийЧатБота.Картинка Тогда
					
					ОтправитьФотографию(Сообщение, НакопленныеДанные);
					
				ИначеЕсли Вложение.ТипФайла = Перечисления.ТипыСообщенийЧатБота.Аудио Тогда
					
					ОтправитьАудио(Сообщение, НакопленныеДанные);
					
				ИначеЕсли Вложение.ТипФайла = Перечисления.ТипыСообщенийЧатБота.Видео Тогда
					
					ОтправитьВидео(Сообщение, НакопленныеДанные);
					
				Иначе
					
					ОтправитьДокумент(Сообщение, НакопленныеДанные);
					
				КонецЕсли;
				
				ДанныеРезультатаОтправки.РезультатОтправки = Истина;
				
				ДобавитьИсходящееВИсториюСообщений(ДанныеБота.Бот, НакопленныеДанные.ИдентификаторЧата, ПользовательОтправитель, ТекстСообщения, Вложение);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1: Ошибка при попытке отправки на пользователя %2 вложения.
					|Описание ошибки: %3'"), ДанныеБота.Бот, ДанныеБота.Пользователь, ОписаниеОшибки);
				ДанныеРезультатаОтправки.ОписаниеРезультата = ТекстСообщения;
				
			КонецПопытки;
			
		КонецЕсли; // Вложение = Неопределено
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнениеОбработокВходящегоОбновленияБота(ТелеграмСервисы, НакопленныеДанные)

	КоличествоВыполненныхОбработок = 0;
	Для Каждого ТелеграмСервис Из ТелеграмСервисы Цикл
		
		ТелеграмОбработки = Справочники.ТелеграмОбработка.ПолучитьОбработкиДляВыполнения(ТелеграмСервис, НакопленныеДанные);
		Для Каждого ТелеграмОбработка Из ТелеграмОбработки Цикл
			
			// Выполнение кода обработки.
			Попытка
				
				Справочники.ТелеграмОбработка.ВыполнитьОбработку(ТелеграмОбработка, НакопленныеДанные);
				
				ТекстИнформации = СтрШаблон(НСтр("ru = 'Успешная обработка входящей обработки %1'"), ТелеграмОбработка); 
				
				ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Телеграм.ВебХук", 
						ТекстИнформации, 
						УровеньЖурналаРегистрации.Информация);
				
			Исключение
				
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при вызове процедуры ВыполнениеОбработокВходящегоОбновленияБота() по обработчику %1'"), ТелеграмОбработка);
				
				ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Телеграм.ВебХук", 
						ТекстОшибки, 
						УровеньЖурналаРегистрации.Ошибка,
						Истина);
				
				//Сообщение = Новый Структура;
				//Сообщение.Вставить("ТекстСообщения", СтрШаблон(НСтр("ru = 'При формировании ответа возникла ошибка: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()))); 
				//ОтправитьСообщение(Сообщение, НакопленныеДанные);
				//ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); // Передать ошибку дальше, в фоновое задание.
				
			КонецПопытки;
			
			КоличествоВыполненныхОбработок = КоличествоВыполненныхОбработок + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Закоментировано для проверки необходимости 21.11.2024
	//Если КоличествоВыполненныхОбработок = 0 Тогда
	//	// Необходимо все равно что-то вывести в ответ. За "что-то" отвечают обработки-исключения.
	//	ТелеграмОбработки = Справочники.ТелеграмОбработка.ПолучитьОбработкиИсключения(НакопленныеДанные);
	//	Для Каждого ТелеграмОбработка Из ТелеграмОбработки Цикл
	//		Справочники.ТелеграмОбработка.ВыполнитьОбработку(ТелеграмОбработка, НакопленныеДанные);
	//	КонецЦикла;
	//КонецЕсли;

КонецПроцедуры

#КонецОбласти

