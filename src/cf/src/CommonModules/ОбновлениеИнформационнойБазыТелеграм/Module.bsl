///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ИдентификаторИнтернетПоддержки - Строка - уникальное имя программы в сервисах Интернет-поддержки.
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "Телеграм";
	Описание.Версия = "2.0.0.1";
    // Требуется библиотека стандартных подсистем.
    Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыТелеграм.ВыполнитьПервоначальноеЗаполнение";
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
		
		
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриПодготовкеМакетаОписанияОбновлений.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура:
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Обработчики заполнения подсистемы Телеграм.

Процедура ВыполнитьПервоначальноеЗаполнение() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	// 1.00
	РегистрыСведений.ТелеграмМетоды.ЗагрузитьСлепок("Слепок20170525");
	Справочники.ТелеграмЭмодзи.ЗагрузитьСлепок("Слепок20170525");
	
	// 1.02
	РегистрыСведений.ТелеграмМетоды.ЗагрузитьСлепок("Обновление20171121", Ложь);

	// 2.00
	РегистрыСведений.ТелеграмМетоды.ЗагрузитьСлепок("Обновление20220823", Ложь);

	// Заполнение базового сценария работы с задачами.
	ЗаполнениеБазовогоСценарияРаботыСЗадачами();
	
КонецПроцедуры

// Для заполнения использовалась обработка "ГенераторКода"
Процедура ЗаполнениеБазовогоСценарияРаботыСЗадачами()
	
	// - Создание объекта Справочники.ТелеграмБоты: "Бот управления задачами"
	Наименование = НСтр("ru = 'Бот управления задачами'");
	НайденЭлемент = Справочники.ТелеграмБоты.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмБоты.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование                          = НСтр("ru = 'Бот управления задачами'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                                = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Жетон                                 = "";
	СправочникОбъект.КаталогСохраненияФайлов               = "";
	СправочникОбъект.СпособПолученияОбновлений             = Перечисления.ТелеграмСпособыПолученияОбновлений.Вебхуки;
	СправочникОбъект.ВебхукАдрес                           = "";
	СправочникОбъект.ВебхукКлюч                            = "";
	СправочникОбъект.ИспользуетсяСамозаверенныйСертификат  = Ложь;
	СправочникОбъект.PEMИмя                                = "";
	СправочникОбъект.Описание                              = "";
	СправочникОбъект.ОграниченныйДоступ                    = Истина;
	СправочникОбъект.ИспользоватьДляОтправкиСообщенийЗадач = Истина;
	
	СправочникОбъект.Записать();
	
	// - БАЗОВЫЕ
	СозданиеБазовыхПараметров();
	
	// - КЛАВИАТУРЫ
	СозданиеБазовыхКлавиатур();
	
	// - ОБРАБОТКИ
	СозданиеБазовыхОбработок();
	
	// - СЕРВИСЫ
	СозданиеБазовыхСервисов();
	
КонецПроцедуры

Процедура СозданиеБазовыхПараметров()

	// - Создание объекта ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста: "Ожидается ввод новой задачи (Параметр)"
	Наименование = НСтр("ru = 'Ожидается ввод новой задачи (Параметр)'");
	НайденЭлемент = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		ПланВидовХарактеристикОбъект = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.СоздатьЭлемент();
	Иначе
		ПланВидовХарактеристикОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	ПланВидовХарактеристикОбъект.ТипЗначения               = Новый ОписаниеТипов("Булево");
	ПланВидовХарактеристикОбъект.Наименование              = НСтр("ru = 'Ожидается ввод новой задачи (Параметр)'");
	
	// заполняем Реквизиты
	
	ПланВидовХарактеристикОбъект.Записать();
	
	
	// - Создание объекта ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста: "Ожидается диалог с тех.поддержкой (Параметр)"
	Наименование = НСтр("ru = 'Ожидается диалог с тех.поддержкой (Параметр)'");
	НайденЭлемент = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		ПланВидовХарактеристикОбъект = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.СоздатьЭлемент();
	Иначе
		ПланВидовХарактеристикОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	ПланВидовХарактеристикОбъект.ТипЗначения               = Новый ОписаниеТипов("Булево");
	ПланВидовХарактеристикОбъект.Наименование              = НСтр("ru = 'Ожидается диалог с тех.поддержкой (Параметр)'");
	
	// заполняем Реквизиты
	
	ПланВидовХарактеристикОбъект.Записать();
	
	
	// - Создание объекта ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста: "Ожидается написание всем сообщения (Параметр)"
	Наименование = НСтр("ru = 'Ожидается написание всем сообщения (Параметр)'");
	НайденЭлемент = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		ПланВидовХарактеристикОбъект = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.СоздатьЭлемент();
	Иначе
		ПланВидовХарактеристикОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	ПланВидовХарактеристикОбъект.ТипЗначения               = Новый ОписаниеТипов("Булево");
	ПланВидовХарактеристикОбъект.Наименование              = НСтр("ru = 'Ожидается написание всем сообщения (Параметр)'");
	
	// заполняем Реквизиты
	
	ПланВидовХарактеристикОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмНаборУсловий: "Ожидается ввод новой задачи"
	Наименование = НСтр("ru = 'Ожидается ввод новой задачи'");
	НайденЭлемент = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмНаборУсловий.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Ожидается ввод новой задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.КонтекстАвто              = 1;
	СправочникОбъект.ПрограммнаяПроверка       = Ложь;
	
	// Заполняем ТЧ.Контекст (Контекст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Контекст.Очистить();
	НоваяСтрока = СправочникОбъект.Контекст.Добавить();
	НоваяСтрока.Параметр     = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.НайтиПоНаименованию("Ожидается ввод новой задачи (Параметр)"); // поиск ранее добавленного элемента
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = Истина;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмНаборУсловий: "Ожидается диалог с тех.поддержкой"
	Наименование = НСтр("ru = 'Ожидается диалог с тех.поддержкой'");
	НайденЭлемент = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмНаборУсловий.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Ожидается диалог с тех.поддержкой'");
	
	// заполняем Реквизиты
	СправочникОбъект.КонтекстАвто              = 1;
	СправочникОбъект.ПрограммнаяПроверка       = Ложь;
	
	// Заполняем ТЧ.Контекст (Контекст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Контекст.Очистить();
	НоваяСтрока = СправочникОбъект.Контекст.Добавить();
	НоваяСтрока.Параметр     = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.НайтиПоНаименованию("Ожидается диалог с тех.поддержкой (Параметр)"); // поиск ранее добавленного элемента
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = Истина;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмНаборУсловий: "Ожидается прием сообщений для отправки"
	Наименование = НСтр("ru = 'Ожидается прием сообщений для отправки'");
	НайденЭлемент = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмНаборУсловий.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Ожидается прием сообщений для отправки'");
	
	// заполняем Реквизиты
	СправочникОбъект.КонтекстАвто              = 1;
	СправочникОбъект.ПрограммнаяПроверка       = Ложь;
	
	// Заполняем ТЧ.Контекст (Контекст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Контекст.Очистить();
	НоваяСтрока = СправочникОбъект.Контекст.Добавить();
	НоваяСтрока.Параметр     = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.НайтиПоНаименованию("Ожидается написание всем сообщения (Параметр)"); // поиск ранее добавленного элемента
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = Истина;
	
	
	СправочникОбъект.Записать();	

КонецПроцедуры

Процедура СозданиеБазовыхКлавиатур()

	// - Создание объекта Справочники.ТелеграмКлавиатуры: "Стартовая"
	Наименование = НСтр("ru = 'Стартовая'");
	НайденЭлемент = Справочники.ТелеграмКлавиатуры.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмКлавиатуры.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Стартовая'");
	
	// заполняем Реквизиты
	СправочникОбъект.ВидКлавиатуры             = Перечисления.ТелеграмВидыКлавиатуры.Программная;
	СправочникОбъект.Авторазмер                = Истина;
	СправочникОбъект.СкрытьПослеИспользования  = Ложь;
	СправочникОбъект.КодКлавиатуры             = НСтр("ru = '// Используйте этот код как шаблон для формирования программно задаваемой
	|// клавиатуры (соответствующего типа - контекстная или стандартная)
	|// Также, не забывайте, что при формировании программной клавиатуры доступны НакопленныеДанные
	|//
	|МассивСтрок = Новый Массив;
	|
	|МассивКнопокСтроки = Новый Массив;
	|
	|Кнопка = Новый Структура;
	|Кнопка.Вставить(""text"", ""Задачи Эмодзи_3-106"");
	|МассивКнопокСтроки.Добавить(Кнопка);
	|
	|Кнопка = Новый Структура;
	|Кнопка.Вставить(""text"", ""Проверка связи Эмодзи_5-180"");
	|МассивКнопокСтроки.Добавить(Кнопка);
	|
	|МассивСтрок.Добавить(МассивКнопокСтроки);
	|	
	|МассивКнопокСтроки = Новый Массив;
	|
	|Кнопка = Новый Структура;
	|Кнопка.Вставить(""text"", ""Перейти к диалогу Эмодзи_3-116"");
	|МассивКнопокСтроки.Добавить(Кнопка);
	|
	|Если НакопленныеДанные.НастройкиПользователя.ПраваДоступа = Перечисления.ТипыПользователейЗадач.Администратор Тогда
	|	
	|	Кнопка = Новый Структура;
	|	Кнопка.Вставить(""text"", ""Написать всем Эмодзи_3-098"");
	|	МассивКнопокСтроки.Добавить(Кнопка);
	|	
	|КонецЕсли;
	|
	|МассивСтрок.Добавить(МассивКнопокСтроки);
	|
	|Клавиатура = Новый Структура;
	|Клавиатура.Вставить(""keyboard"", МассивСтрок);
	|Клавиатура.Вставить(""resize_keyboard"", Истина);
	|'");
	
	// Заполняем ТЧ.Кнопки (Кнопки). КоличествоЗаписей: 2
	//#0
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Задачи Эмодзи_3-106'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	//#1
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Проверка связи Эмодзи_5-180'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмКлавиатуры: "Завершить диалог"
	Наименование = НСтр("ru = 'Завершить диалог'");
	НайденЭлемент = Справочники.ТелеграмКлавиатуры.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмКлавиатуры.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Завершить диалог'");
	
	// заполняем Реквизиты
	СправочникОбъект.ВидКлавиатуры             = Перечисления.ТелеграмВидыКлавиатуры.Стандартная;
	СправочникОбъект.Авторазмер                = Истина;
	СправочникОбъект.СкрытьПослеИспользования  = Ложь;
	
	// Заполняем ТЧ.Кнопки (Кнопки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Завершить диалог Эмодзи_1-113'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмКлавиатуры: "Задачи"
	Наименование = НСтр("ru = 'Задачи'");
	НайденЭлемент = Справочники.ТелеграмКлавиатуры.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмКлавиатуры.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.ВидКлавиатуры             = Перечисления.ТелеграмВидыКлавиатуры.Контекстная;
	СправочникОбъект.Авторазмер                = Истина;
	СправочникОбъект.СкрытьПослеИспользования  = Ложь;
	
	// Заполняем ТЧ.Кнопки (Кнопки). КоличествоЗаписей: 2
	//#0
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Текущие задачи'");
	НоваяСтрока.ДанныеОтправки          = НСтр("ru = 'Текущие задачи'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	//#1
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Создать задачу'");
	НоваяСтрока.ДанныеОтправки          = НСтр("ru = 'Создать задачу'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмКлавиатуры: "Команды задачи"
	Наименование = НСтр("ru = 'Команды задачи'");
	НайденЭлемент = Справочники.ТелеграмКлавиатуры.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмКлавиатуры.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Команды задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.ВидКлавиатуры             = Перечисления.ТелеграмВидыКлавиатуры.Программная;
	СправочникОбъект.Авторазмер                = Ложь;
	СправочникОбъект.СкрытьПослеИспользования  = Ложь;
	СправочникОбъект.КодКлавиатуры             = НСтр("ru = '//
	|// Используйте этот код как шаблон для формирования программно задаваемой
	|// клавиатуры (соответствующего типа - контекстная или стандартная)
	|// Также, не забывайте, что при формировании программной клавиатуры доступны НакопленныеДанные
	|//
	|МассивСтрок = Новый Массив;
	|
	|МассивКнопокСтроки = Новый Массив;
	|
	|Кнопка = Новый Структура;
	|Кнопка.Вставить(""text"", ""Детали Эмодзи_3-127"");
	|Кнопка.Вставить(""callback_data"", ""ДЗ1_"" + Строка(НакопленныеДанные.ГУИД_Задачи));
	|МассивКнопокСтроки.Добавить(Кнопка);
	|
	|МассивСтрок.Добавить(МассивКнопокСтроки);
	|МассивКнопокСтроки = Новый Массив;
	|
	|Кнопка = Новый Структура;
	|Кнопка.Вставить(""text"", ""Веб-ссылка Эмодзи_2-099"");
	|Кнопка.Вставить(""url"", РаботаСЗадачамиВызовСервера.ВнешняяСсылкаНаОбъект(НакопленныеДанные.Задача));
	|МассивКнопокСтроки.Добавить(Кнопка);
	|
	|МассивСтрок.Добавить(МассивКнопокСтроки);
	|
	|Клавиатура = Новый Структура;
	|Клавиатура.Вставить(""inline_keyboard"", МассивСтрок);
	|
	|'");
	
	// Заполняем ТЧ.Кнопки (Кнопки). КоличествоЗаписей: 2
	//#0
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Детали'");
	НоваяСтрока.ДанныеОтправки          = НСтр("ru = 'Детали'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	//#1
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 2;
	НоваяСтрока.Текст                   = НСтр("ru = 'Веб-ссылка'");
	НоваяСтрока.URL                     = НСтр("ru = 'https://kpkrs.site/kp'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмКлавиатуры: "Отменить"
	Наименование = НСтр("ru = 'Отменить'");
	НайденЭлемент = Справочники.ТелеграмКлавиатуры.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмКлавиатуры.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Отменить'");
	
	// заполняем Реквизиты
	СправочникОбъект.ВидКлавиатуры             = Перечисления.ТелеграмВидыКлавиатуры.Стандартная;
	СправочникОбъект.Авторазмер                = Истина;
	СправочникОбъект.СкрытьПослеИспользования  = Ложь;
	
	// Заполняем ТЧ.Кнопки (Кнопки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Отменить действие Эмодзи_5-138'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмКлавиатуры: "Отправка сообщения всем"
	Наименование = НСтр("ru = 'Отправка сообщения всем'");
	НайденЭлемент = Справочники.ТелеграмКлавиатуры.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмКлавиатуры.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Отправка сообщения всем'");
	
	// заполняем Реквизиты
	СправочникОбъект.ВидКлавиатуры             = Перечисления.ТелеграмВидыКлавиатуры.Контекстная;
	СправочникОбъект.Авторазмер                = Ложь;
	СправочникОбъект.СкрытьПослеИспользования  = Ложь;
	
	// Заполняем ТЧ.Кнопки (Кнопки). КоличествоЗаписей: 2
	//#0
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Эмодзи_5-097Отправить'");
	НоваяСтрока.ДанныеОтправки          = НСтр("ru = 'Отправить сообщение всем'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	//#1
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Эмодзи_5-138Отменить'");
	НоваяСтрока.ДанныеОтправки          = НСтр("ru = 'Отменить отправку'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмКлавиатуры: "Проекты с задачами"
	Наименование = НСтр("ru = 'Проекты с задачами'");
	НайденЭлемент = Справочники.ТелеграмКлавиатуры.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмКлавиатуры.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Проекты с задачами'");
	
	// заполняем Реквизиты
	СправочникОбъект.ВидКлавиатуры             = Перечисления.ТелеграмВидыКлавиатуры.Программная;
	СправочникОбъект.Авторазмер                = Ложь;
	СправочникОбъект.СкрытьПослеИспользования  = Ложь;
	СправочникОбъект.КодКлавиатуры             = НСтр("ru = '// Подсказка по ключам структуры НакопленныеДанные:
	|//
	|// ДанныеБота.Бот <СправочникСсылка.ТелеграмБоты> - текущий бот
	|// ДанныеБота.Жетон <Строка> - жетон бота
	|// ДанныеБота.Имя <Строка> - представление бота
	|// ДанныеБота.Смещение <Число> - последний обработанный ботом идентификатор обновления
	|// ИдентификаторОбновления <Число> - идентификатор текущего обновления
	|// ИдентификаторСообщения <Число> - идентификатор сообщения
	|// ИдентификаторЧата <Число> - идентификатор чата
	|// ВидВходящегоОбновления <ПеречислениеСсылка.ТелеграмВидыВходящихОбновлений> - вид входящего обновления
	|// Обновление <ОбъектXDTO> - обрабатываемое обновление вида https://core.telegram.org/bots/api#update
	|// Сообщение <[ОбъектXDTO, Неопределено]> - сообщение вида https://core.telegram.org/bots/api#message
	|// ТекстСообщения <[Строка, Неопределено]> - текст сообщения
	|// ОтветКонтекстнойКлавиатуры <[Строка, Неопределено]> - ответ контекстной клавиатуры, если ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры,
	|// НастройкиПользователя <Структура> - структура с настройками пользователя из регистра сведений ТелеграмНастройкиПользователя
	|// КонтекстСеанса <Соответствие> - срез содержимого регистра ТелеграмКонтекстСеансов для текущего ИдентификаторЧата
	|//
	|//
	|// Используйте этот код как шаблон для формирования программно задаваемой
	|// клавиатуры (соответствующего типа - контекстная или стандартная)
	|// Также, не забывайте, что при формировании программной клавиатуры доступны НакопленныеДанные
	|//
	|МассивСтрок = Новый Массив;
	|
	|МассивКнопокСтроки = Новый Массив;
	|
	|Кнопка = Новый Структура;
	|Кнопка.Вставить(""text"", ""Список задач"");
	|Кнопка.Вставить(""callback_data"", ""СП1_"" + Строка(НакопленныеДанные.ГУИД_Проекта));
	|МассивКнопокСтроки.Добавить(Кнопка);
	|
	|Кнопка = Новый Структура;
	|Кнопка.Вставить(""text"", ""О проекте"");
	|Кнопка.Вставить(""callback_data"", ""ОП1_"" + Строка(НакопленныеДанные.ГУИД_Проекта));
	|МассивКнопокСтроки.Добавить(Кнопка);
	|
	|МассивСтрок.Добавить(МассивКнопокСтроки);
	|
	|Клавиатура = Новый Структура;
	|Клавиатура.Вставить(""inline_keyboard"", МассивСтрок);
	|
	|'");
	
	// Заполняем ТЧ.Кнопки (Кнопки). КоличествоЗаписей: 2
	//#0
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Список задач'");
	НоваяСтрока.ДанныеОтправки          = НСтр("ru = 'Список задач по проекту'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	//#1
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'О проекте'");
	НоваяСтрока.ДанныеОтправки          = НСтр("ru = 'О проекте'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмКлавиатуры: "Создание задачи"
	Наименование = НСтр("ru = 'Создание задачи'");
	НайденЭлемент = Справочники.ТелеграмКлавиатуры.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмКлавиатуры.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Создание задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.ВидКлавиатуры             = Перечисления.ТелеграмВидыКлавиатуры.Контекстная;
	СправочникОбъект.Авторазмер                = Ложь;
	СправочникОбъект.СкрытьПослеИспользования  = Ложь;
	
	// Заполняем ТЧ.Кнопки (Кнопки). КоличествоЗаписей: 2
	//#0
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Эмодзи_5-097Сохранить'");
	НоваяСтрока.ДанныеОтправки          = НСтр("ru = 'Сохранить'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	//#1
	СправочникОбъект.Кнопки.Очистить();
	НоваяСтрока = СправочникОбъект.Кнопки.Добавить();
	НоваяСтрока.Строка                  = 1;
	НоваяСтрока.Текст                   = НСтр("ru = 'Эмодзи_5-138Отменить'");
	НоваяСтрока.ДанныеОтправки          = НСтр("ru = 'Отменить'");
	НоваяСтрока.ЗапроситьКонтакт        = Ложь;
	НоваяСтрока.ЗапроситьМестоположение = Ложь;
	
	СправочникОбъект.Записать();

КонецПроцедуры

Процедура СозданиеБазовыхОбработок()
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Работа с сообщениями"
	Наименование = НСтр("ru = 'Работа с сообщениями'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьГруппу();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Работа с сообщениями'");
	
	// заполняем Реквизиты
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Управление задачами"
	Наименование = НСтр("ru = 'Управление задачами'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьГруппу();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Управление задачами'");
	
	// заполняем Реквизиты
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Вывод стартового меню"
	Наименование = НСтр("ru = 'Вывод стартового меню'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Вывод стартового меню'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = 'Сообщение = Новый Структура;
	|
	|// Текст сообщения, которое будет отправлено
	|Сообщение.Вставить(""ТекстСообщения"", ""Привет, бро!"");
	|
	|// Точное наименование передаваемой клавиатуры (как оно задано в справочнике)
	|Сообщение.Вставить(""Клавиатура"", ""Стартовая"");
	|
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Начать диалог (по исключению)"
	Наименование = НСтр("ru = 'Начать диалог (по исключению)'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Начать диалог (по исключению)'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// - Получение кэша сеансов накопленного из введенных сообщений.
	|СтроковоеПредставлениеКэшПараметров = НакопленныеДанные.КонтекстСеанса.Получить(ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.КэшПараметров);	
	|Если СтроковоеПредставлениеКэшПараметров <> Неопределено Тогда
	|	Перейти ~Возврат;
	|КонецЕсли;
	|
	|// - Соощение о начале диалога с администратором.
	|Сообщение = Новый Структура;
	|Сообщение.Вставить(""Клавиатура"", ""Завершить диалог"");
	|Сообщение.Вставить(""ТекстСообщения"", НСтр(""ru = ''Эмодзи_1-188Автоответы чат-бота отключены. Сообщение направлено администратору, ожидайте ответа...
	|                                          |Эмодзи_1-116 Ниже продолжайте ваш диалог. Завершите диалог по команде """"Завершить диалог""""''""));
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);
	|
	|// - Фиксируем текущий текст в контексте сеанса. 
	|Если НакопленныеДанные.Свойство(""ФиксироватьПервоеСообщениеКонтекстаСеанса"") Тогда
	|	НакопленныеДанные.ФиксироватьПервоеСообщениеКонтекстаСеанса = Истина;
	|КонецЕсли;
	|
	|// - Отправить сообщение о начале диалога всем администраторам Телеграм бота.
	|Запрос = Новый Запрос;
	|Запрос.Текст = ""ВЫБРАТЬ
	|               |	ТелеграмНастройкиПользователей.Пользователь КАК Пользователь
	|               |ИЗ
	|               |	РегистрСведений.ТелеграмНастройкиПользователей КАК ТелеграмНастройкиПользователей
	|               |ГДЕ
	|               |	ТелеграмНастройкиПользователей.Бот = &Бот
	|               |	И ТелеграмНастройкиПользователей.ПраваДоступа В(&ПраваДоступа)
	|               |	И НЕ ТелеграмНастройкиПользователей.Пользователь.Недействителен
	|               |	И ТелеграмНастройкиПользователей.Пользователь <> &ПользовательОтправитель"";
	|
	|Запрос.УстановитьПараметр(""Бот"", НакопленныеДанные.ДанныеБота.Бот);
	|МассивПравДоступа = Новый Массив;
	|МассивПравДоступа.Добавить(Перечисления.ТипыПользователейЗадач.Администратор);
	|МассивПравДоступа.Добавить(Перечисления.ТипыПользователейЗадач.КонтрольЗадачПользователей);
	|Запрос.УстановитьПараметр(""ПраваДоступа"", МассивПравДоступа);
	|
	|Автор = НакопленныеДанные.НастройкиПользователя.Пользователь;
	|Запрос.УстановитьПараметр(""ПользовательОтправитель"", Автор);
	|
	|Результат = Запрос.Выполнить();
	|Выборка = Результат.Выбрать();
	|
	|Пока Выборка.Следующий() Цикл
	|	
	|	СообщениеДляОтправки = СтрШаблон(НСтр(""ru = ''[Начат диалог с %1 (%2)]
	|                                           |%3''""), Автор, НакопленныеДанные.НастройкиПользователя.ПраваДоступа, НакопленныеДанные.ТекстСообщения);
	|	
	|	ТелеграмСервер.ОтправитьСообщениеПользователю(НакопленныеДанные.ДанныеБота.Бот, Выборка.Пользователь, СообщениеДляОтправки, Автор);
	|
	|КонецЦикла;
	|
	|// - Метка для переходов, в случае прерывания обработки алгоритма.
	|
	|~Возврат:'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Исключение;
	СправочникОбъект.ДействияНадКонтекстомАвто = 1;
	
	// Заполняем ТЧ.ДействияНадКонтекстом (Действия над контекстом). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ДействияНадКонтекстом.Очистить();
	НоваяСтрока = СправочникОбъект.ДействияНадКонтекстом.Добавить();
	НоваяСтрока.Параметр = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.НайтиПоНаименованию("Ожидается диалог с тех.поддержкой (Параметр)"); // поиск ранее добавленного элемента
	НоваяСтрока.Действие = Перечисления.ТелеграмДействияСКонтекстом.Установить;
	НоваяСтрока.Значение = Истина;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Обновление клавиатуры"
	Наименование = НСтр("ru = 'Обновление клавиатуры'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Обновление клавиатуры'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Выключен;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = 'Сообщение = Новый Структура;
	|// Точное наименование передаваемой клавиатуры (как оно задано в справочнике)
	|Сообщение.Вставить(""Клавиатура"", ""Стартовая"");
	|
	|Сообщение.Вставить(""ТекстСообщения"", ""Эмодзи_1-188Основное меню чат-бота."");
	|
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Исключение;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Обработка нажатия на кнопку "Аутентификация""
	Наименование = НСтр("ru = 'Обработка нажатия на кнопку ""Аутентификация""'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Обработка нажатия на кнопку ""Аутентификация""'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// Подсказка по ключам структуры НакопленныеДанные:
	|//
	|// ДанныеБота.Бот <СправочникСсылка.ТелеграмБоты> - текущий бот
	|// ДанныеБота.Жетон <Строка> - жетон бота
	|// ДанныеБота.Имя <Строка> - представление бота
	|// ДанныеБота.Смещение <Число> - последний обработанный ботом идентификатор обновления
	|// ИдентификаторОбновления <Число> - идентификатор текущего обновления
	|// ИдентификаторСообщения <Число> - идентификатор сообщения
	|// ИдентификаторЧата <Число> - идентификатор чата
	|// ВидВходящегоОбновления <ПеречислениеСсылка.ТелеграмВидыВходящихОбновлений> - вид входящего обновления
	|// Обновление <ОбъектXDTO> - обрабатываемое обновление вида https://core.telegram.org/bots/api#update
	|// Сообщение <[ОбъектXDTO, Неопределено]> - сообщение вида https://core.telegram.org/bots/api#message
	|// ТекстСообщения <[Строка, Неопределено]> - текст сообщения
	|// НастройкиПользователя <Структура> - структура с настройками пользователя из регистра сведений ТелеграмНастройкиПользователя
	|// ОтветКонтекстнойКлавиатуры <[Строка, Неопределено]> - ответ контекстной клавиатуры, если ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры,
	|// КонтекстСеанса <Соответствие> - срез содержимого регистра ТелеграмКонтекстСеансов для текущего ИдентификаторЧата
	|//
	|//
	|
	|
	|НомерТелефона = НакопленныеДанные.Сообщение.Contact.phone_number;
	|
	|ТекстСообщения = СтрШаблон(
	|""Теперь я знаю номер Вашего телефона: %1. Этого достаточно, чтобы сопоставить Вас с пользователем ИБ и назначить Вам права. Но так как я демо-бот, я предлагаю выбрать Вам права самостоятельно."", НомерТелефона);
	|
	|Сообщение = Новый Структура;
	|
	|// Текст сообщения, которое будет отправлено
	|Сообщение.Вставить(""ТекстСообщения"", ТекстСообщения);
	|
	|// Точное наименование передаваемой клавиатуры (как оно задано в справочнике)
	|//Сообщение.Вставить(""Клавиатура"", ""Аутентификация"");
	|
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Ответ на "привет""
	Наименование = НСтр("ru = 'Ответ на ""привет""'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Ответ на ""привет""'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = 'Сообщение = Новый Структура;
	|
	|// Текст сообщения, которое будет отправлено
	|Сообщение.Вставить(""ТекстСообщения"", ""Привет, друг!"");
	|
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Ответ на "Проверка связи""
	Наименование = НСтр("ru = 'Ответ на ""Проверка связи""'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Ответ на ""Проверка связи""'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = 'Сообщение = Новый Структура;
	|Сообщение.Вставить(""Клавиатура"", ""Стартовая"");
	|// Текст сообщения, которое будет отправлено
	|Сообщение.Вставить(""ТекстСообщения"", ""Эмодзи_5-097 Связь с Купорос есть! Эмодзи_1-106"");
	|
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Ответ на команду /start"
	Наименование = НСтр("ru = 'Ответ на команду /start'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Ответ на команду /start'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Истина;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// Подсказка по ключам структуры НакопленныеДанные:
	|//
	|// ДанныеБота.Бот <СправочникСсылка.ТелеграмБоты> - текущий бот
	|// ДанныеБота.Жетон <Строка> - жетон бота
	|// ДанныеБота.Имя <Строка> - представление бота
	|// ДанныеБота.Смещение <Число> - последний обработанный ботом идентификатор обновления
	|// ИдентификаторОбновления <Число> - идентификатор текущего обновления
	|// ИдентификаторСообщения <Число> - идентификатор сообщения
	|// ИдентификаторЧата <Число> - идентификатор чата
	|// ВидВходящегоОбновления <ПеречислениеСсылка.ТелеграмВидыВходящихОбновлений> - вид входящего обновления
	|// Обновление <ОбъектXDTO> - обрабатываемое обновление вида https://core.telegram.org/bots/api#update
	|// Сообщение <[ОбъектXDTO, Неопределено]> - сообщение вида https://core.telegram.org/bots/api#message
	|// ТекстСообщения <[Строка, Неопределено]> - текст сообщения
	|// НастройкиПользователя <Структура> - структура с настройками пользователя из регистра сведений ТелеграмНастройкиПользователя
	|// ОтветКонтекстнойКлавиатуры <[Строка, Неопределено]> - ответ контекстной клавиатуры, если ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры,
	|// КонтекстСеанса <Соответствие> - срез содержимого регистра ТелеграмКонтекстСеансов для текущего ИдентификаторЧата
	|
	|
	|Сообщение = Новый Структура;
	|// Точное наименование передаваемой клавиатуры (как оно задано в справочнике)
	|Сообщение.Вставить(""Клавиатура"", ""Стартовая"");
	|
	|Сообщение.Вставить(""ТекстСообщения"", ""Эмодзи_1-188Добрый день. Вы подключены к чат-боту Купорос."");
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);
	|
	|
	|
	|// Создание базовой настройки.
	|МенеджерЗаписи = РегистрыСведений.ТелеграмНастройкиПользователей.СоздатьМенеджерЗаписи();
	|МенеджерЗаписи.Бот = НакопленныеДанные.ДанныеБота.Бот;
	|МенеджерЗаписи.ИдентификаторЧата = НакопленныеДанные.ИдентификаторЧата;
	|МенеджерЗаписи.Прочитать();
	|Если Не МенеджерЗаписи.Выбран() Тогда
	|	МенеджерЗаписи.Бот = НакопленныеДанные.ДанныеБота.Бот;
	|	МенеджерЗаписи.ИдентификаторЧата = НакопленныеДанные.ИдентификаторЧата;
	|
	|	МенеджерЗаписи.Записать();
	|КонецЕсли;
	|
	|'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Отмена Диалога с администратором"
	Наименование = НСтр("ru = 'Отмена Диалога с администратором'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Отмена Диалога с администратором'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Истина;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// - В закладке ""Действия над контекстом"" установлен флажок ""Очистить контекст""
	|
	|// - Удаляем прошлое сообщение с командами управления задачами Купорос, чтобы не путали.
	|Сообщение = Новый Структура;
	|УдалитьСообщение(Сообщение, НакопленныеДанные);
	|
	|// - Выводим информацию о результате.
	|Сообщение = Новый Структура;
	|Сообщение.Вставить(""ТекстСообщения"", ""Эмодзи_5-042 Диалог с администратором завершен."");
	|Сообщение.Вставить(""Клавиатура"", ""Стартовая"");
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);
	|'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Отмена создания сообщения"
	Наименование = НСтр("ru = 'Отмена создания сообщения'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Работа с сообщениями", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Отмена создания сообщения'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Истина;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// - В закладке ""Действия над контекстом"" установлен флажок ""Очистить контекст""
	|
	|// - Удаляем прошлое сообщение с командами, чтобы не путали.
	|Сообщение = Новый Структура;
	|УдалитьСообщение(Сообщение, НакопленныеДанные);
	|
	|// - Выводим информацию о результате.
	|Сообщение = Новый Структура;
	|Сообщение.Вставить(""ТекстСообщения"", ""Эмодзи_5-085 Создание сообщения отменено! Эмодзи_1-083"");
	|Сообщение.Вставить(""Клавиатура"", ""Стартовая"");
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);
	|'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Отправка сообщений всем"
	Наименование = НСтр("ru = 'Отправка сообщений всем'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Работа с сообщениями", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Отправка сообщений всем'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Истина;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// По накопленным сообщениям и вложениям делается отправка сообщения от Чат-бота для всех пользователей указанных в ""Телеграм настройки пользователей"" (с признаком ""Позволять общение"") 
	|
	|// - В закладке ""Действия над контекстом"" установлен флажок ""Очистить контекст"". Это служит окончанием ввода задачи из Телеграм.
	|
	|// - Удаляем прошлое сообщение с командами управления задачами Купорос, чтобы не путали внимание.
	|
	|Сообщение = Новый Структура;
	|УдалитьСообщение(Сообщение, НакопленныеДанные);
	|
	|Если НакопленныеДанные.НастройкиПользователя.ПраваДоступа <> Перечисления.ТипыПользователейЗадач.Администратор Тогда
	|	ТекстСообщения = ""Сообщение не отправлено. У вас нет прав на отправку массовых сообщений."";
	|	Перейти ~Возврат;	
	|КонецЕсли;
	|
	|// - Формирование параметров: текста описания, темы, списка файлов, получатель услуг.
	|
	|// Получение кэша сеансов накопленного из введенных сообщений.
	|ТаблицаКэшСеанса =  Справочники.ТелеграмОбработка.ТаблицаКэшСеанса(НакопленныеДанные.КонтекстСеанса);
	|
	|Если ТаблицаКэшСеанса.Количество() = 0 Тогда
	|	ТекстСообщения = ""Сообщение не отправлено. Данные не введены."";
	|	Перейти ~Возврат;	
	|КонецЕсли;
	|
	|// Начало отправки текстового сообщения.
	|
	|Сообщение = Новый Структура;
	|Сообщение.Вставить(""ТекстСообщения"", НСтр(""ru = ''Эмодзи_1-091 Начало отправки сообщений. Отправляемые сообщения далее идут ниже Эмодзи_1-116.''""));
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);
	|
	|// Инициализация параметров.
	|БлокСообщений = """";
	|СписокЗагруженныхФайлов = Новый Массив;
	|
	|Автор = НакопленныеДанные.НастройкиПользователя.Пользователь;
	|
	|// - Отправка сообщения.
	|Запрос = Новый Запрос;
	|Запрос.Текст = ""ВЫБРАТЬ
	||	ТелеграмНастройкиПользователей.Пользователь КАК Пользователь
	||ИЗ
	||	РегистрСведений.ТелеграмНастройкиПользователей КАК ТелеграмНастройкиПользователей
	||		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТелеграмСобеседники КАК ТелеграмСобеседники
	||		ПО ТелеграмНастройкиПользователей.Бот = ТелеграмСобеседники.Бот
	||			И ТелеграмНастройкиПользователей.ИдентификаторЧата = ТелеграмСобеседники.ИдентификаторЧата
	||ГДЕ
	||	ТелеграмНастройкиПользователей.Бот = &Бот
	||	И ТелеграмНастройкиПользователей.Пользователь <> &ПустойПользователь
	||	И ТелеграмСобеседники.ПозволятьОбщение"";
	|
	|Запрос.УстановитьПараметр(""Бот"", НакопленныеДанные.ДанныеБота.Бот);
	|Запрос.УстановитьПараметр(""ПустойПользователь"", Справочники.Пользователи.ПустаяСсылка());
	|
	|
	|Результат = Запрос.Выполнить();
	|Выборка = Результат.Выбрать();
	|
	|Пока Выборка.Следующий() Цикл
	|	
	|	Индекс = 0;
	|	
	|	Для каждого ТекСтрока Из ТаблицаКэшСеанса Цикл
	|		
	|		Если ТекСтрока.ВидВходящегоОбновления <> Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение Тогда
	|			Продолжить;
	|		КонецЕсли;
	|		
	|		СообщениеДляОтправки = """";
	|		
	|		// сообщение
	|		Если ЗначениеЗаполнено(ТекСтрока.ТекстСообщения) Тогда
	|			ОбщегоНазначенияКупоросКлиентСервер.ПрисоединитьСтроку(СообщениеДляОтправки, ТекСтрока.ТекстСообщения, Символы.ПС);	
	|		КонецЕсли;
	|		
	|		// загруженный файл
	|		Вложения = Неопределено;		
	|		Если ЗначениеЗаполнено(ТекСтрока.ЗагруженныйФайл) Тогда
	|			
	|			ИмяФайла = ВыделитьИмяФайлаИзПути(ТекСтрока.ЗагруженныйФайл);
	|			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ТекСтрока.ЗагруженныйФайл);
	|			
	|			АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	|			
	|			Вложения = Новый Структура;
	|			Вложения.Вставить(""ТипФайла"", Перечисления.ТипыСообщенийЧатБота.Файл);
	|			Вложения.Вставить(""ИмяФайла"", ИмяФайла);
	|			Вложения.Вставить(""АдресФайла"", АдресФайла);
	|			
	|			СписокЗагруженныхФайлов.Добавить(ТекСтрока.ЗагруженныйФайл);
	|			
	|		КонецЕсли;
	|		
	|		ТелеграмСервер.ОтправитьСообщениеПользователю(НакопленныеДанные.ДанныеБота.Бот, Выборка.Пользователь, СообщениеДляОтправки, Автор, Вложения);
	|		
	|	КонецЦикла;
	|	
	|КонецЦикла;
	|
	|// - Итоговое текстовое сообщение.
	|
	|ТекстСообщения = НСтр(""ru = ''Эмодзи_1-091 Все сообщения успешно отправлены.''"");
	|
	|// - Метка для переходов, в случае прерывания обработки алгоритма.
	|
	|~Возврат:
	|
	|// - Вывод результата в сообщении для информации.
	|
	|Сообщение = Новый Структура;
	|Сообщение.Вставить(""ТекстСообщения"", ТекстСообщения);
	|Сообщение.Вставить(""Клавиатура"", ""Стартовая"");
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Приглашение к написанию сообщения всем"
	Наименование = НСтр("ru = 'Приглашение к написанию сообщения всем'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Работа с сообщениями", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Приглашение к написанию сообщения всем'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// - На закладке ""Действия над контекстом"" установлен параметр ""Ожидается написание всем сообщения (Параметр)"" = Да.
	|
	|// - Удаляем прошлое сообщение с командами, чтобы не путали.
	|Сообщение = Новый Структура;
	|УдалитьСообщение(Сообщение, НакопленныеДанные);
	|
	|// - Создание сообщения о начале формирования сообщения всем и вывод команд ""Отправить"", ""Отменить""
	|Сообщение = Новый Структура;
	|Сообщение.Вставить(""ТекстСообщения"", НСтр(""ru = ''Эмодзи_3-116 Напишите блок сообщений. Вложите файлы или скриншоты.''""));
	|
	|Сообщение.Вставить(""Клавиатура"", ""Отправка сообщения всем"");
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);
	|
	|Сообщение = Новый Структура;
	|Сообщение.Вставить(""ТекстСообщения"", НСтр(""ru = ''Эмодзи_1-115 Подтвердите отправку командой """"Отправить"""" и сообщения будут отправлены всем подписчикам бота.''""));
	|Сообщение.Вставить(""Клавиатура"", ""Отменить"");
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	СправочникОбъект.ДействияНадКонтекстомАвто = 1;
	
	// Заполняем ТЧ.ДействияНадКонтекстом (Действия над контекстом). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ДействияНадКонтекстом.Очистить();
	НоваяСтрока = СправочникОбъект.ДействияНадКонтекстом.Добавить();
	НоваяСтрока.Параметр = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.НайтиПоНаименованию("Ожидается написание всем сообщения (Параметр)"); // поиск ранее добавленного элемента
	НоваяСтрока.Действие = Перечисления.ТелеграмДействияСКонтекстом.Установить;
	НоваяСтрока.Значение = Истина;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "! Вывод меню управления задачами"
	Наименование = НСтр("ru = '! Вывод меню управления задачами'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = '! Вывод меню управления задачами'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// - Удаляем прошлое сообщение с командами управления задачами Купорос, чтобы не путали.
	|//Сообщение = Новый Структура;
	|//УдалитьСообщение(Сообщение, НакопленныеДанные);
	|
	|Сообщение = Новый Структура;
	|// Текст сообщения, которое будет отправлено
	|Сообщение.Вставить(""ТекстСообщения"", ""Эмодзи_4-082 Выберите команду для управления задачами"");
	|// Точное наименование передаваемой клавиатуры (как оно задано в справочнике)
	|Сообщение.Вставить(""Клавиатура"", ""Задачи"");
	|
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Вывод задач определенного проекта"
	Наименование = НСтр("ru = 'Вывод задач определенного проекта'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Вывод задач определенного проекта'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// - Убираем клавиатуру у сообщения, чтобы не могли обратиться к ней позже.
                                                       |
                                                       |Сообщение = Новый Структура;
                                                       |Сообщение.Вставить(""Клавиатура"", ""Скрыть клавиатуру"");
                                                       |РедактироватьКонтекстнуюКлавиатуру(Сообщение, НакопленныеДанные);
                                                       |
                                                       |// - Получаем список проектов, где есть невыполненные задачи.	
                                                       |
                                                       |Пользователь = НакопленныеДанные.НастройкиПользователя.Пользователь;
                                                       |
                                                       |// Проект. Вариант вида: ""СП1_"" + Строка(НакопленныеДанные.ГУИД_Проекта)
                                                       |ГУИДПроектаСтрока = Сред(НакопленныеДанные.ОтветКонтекстнойКлавиатуры, 5);
                                                       |ГУИДПроекта = Новый УникальныйИдентификатор(ГУИДПроектаСтрока);
                                                       |Проект = Справочники.Проекты.ПолучитьСсылку(ГУИДПроекта);
                                                       |
                                                       |Запрос = Новый Запрос;
                                                       |Запрос.Текст = ""ВЫБРАТЬ
                                                       |               |	ЗадачиПользователя.Проект КАК Проект,
                                                       |                |	ЗадачиПользователя.Ссылка,               
                                                       |				|	ЗадачиПользователя.Номер,
                                                       |              	|	ЗадачиПользователя.Наименование КАК Наименование,
                                                       |               |	ЗадачиПользователя.СрокИсполнения КАК СрокИсполнения,
                                                       |               |	ЗадачиПользователя.ДатаНачала КАК ДатаНачала,
                                                       |               |	ЗадачиПользователя.ПолучательУслуг КАК ПолучательУслуг,
                                                       |               |	ЗадачиПользователя.ВидЗадачи КАК ВидЗадачи,
                                                       |               |	ЗадачиПользователя.Ответ КАК Ответ,
                                                       |               |	ТекущиеСостоянияЗадач.Состояние КАК Состояние,
                                                       |               |	ТекущиеСостоянияЗадач.ДатаУстановки КАК ДатаУстановкиСостояния
                                                       |               |ИЗ
                                                       |               |	РегистрСведений.ТекущиеСостоянияЗадач ТекущиеСостоянияЗадач
                                                       |               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачиПользователя КАК ЗадачиПользователя
                                                       |               |		ПО ТекущиеСостоянияЗадач.Задача = ЗадачиПользователя.Ссылка
                                                       |               |ГДЕ
                                                       |               |	НЕ ЗадачиПользователя.Выполнена
                                                       |               |	И (ЗадачиПользователя.Инициатор = &Пользователь
                                                       |               |			ИЛИ ЗадачиПользователя.ПолучательУслуг = &Пользователь
                                                       |               |			ИЛИ ЗадачиПользователя.Исполнитель = &Пользователь
                                                       |               |			ИЛИ ЗадачиПользователя.РольИсполнителя = &РольИсполнителя)
                                                       |               |	И ЗадачиПользователя.Проект = &Проект
                                                       |               |
                                                       |               |УПОРЯДОЧИТЬ ПО
                                                       |               |	ЗадачиПользователя.Номер"";
                                                       |
                                                       |	
                                                       |Запрос.УстановитьПараметр(""Пользователь"", Пользователь);
                                                       |Запрос.УстановитьПараметр(""РольИсполнителя"", Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения);
                                                       |Запрос.УстановитьПараметр(""Проект"", Проект);
                                                       |
                                                       |ОтветственныеКоординаторы = РаботаСЗадачами.ИсполнителиРоли(Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения); 
                                                       |ЕстьПраваКонтроляВсехЗадач = РаботаСЗадачами.ЭтоПолноправныйПользовательЗадач();
                                                       |Если ОтветственныеКоординаторы.Найти(Пользователь) = Неопределено 
                                                       |	И Не ЕстьПраваКонтроляВсехЗадач Тогда
                                                       |	// Пользователь не входит в группу координаторов, администраторов - убираем фильтр по роли координатора.
                                                       |	Запрос.Текст = СтрЗаменить(Запрос.Текст, ""ЗадачиПользователя.РольИсполнителя = &РольИсполнителя"", ""Ложь"");
                                                       |ИначеЕсли ЕстьПраваКонтроляВсехЗадач Тогда
                                                       |	// Пользователь имеет права администратора задач - доступ ко всем задачам без ограничений.
                                                       |	Запрос.Текст = СтрЗаменить(Запрос.Текст, ""ЗадачиПользователя.РольИсполнителя = &РольИсполнителя"", ""Истина"");
                                                       |КонецЕсли;
                                                       |
                                                       |Результат = Запрос.Выполнить();
                                                       |Выборка = Результат.Выбрать();
                                                       |Если Выборка.Количество() > 0 Тогда
                                                       |	
                                                       |	индекс = 0;
                                                       |	Пока Выборка.Следующий() Цикл
                                                       |		
                                                       |		НакопленныеДанные.Вставить(""ГУИД_Задачи"", Выборка.Ссылка.УникальныйИдентификатор());
                                                       |		НакопленныеДанные.Вставить(""Задача"", Выборка.Ссылка);
                                                       |
                                                       |		
                                                       |		индекс = индекс + 1;
                                                       |		Если индекс < 10 Тогда
                                                       |			ЧислоЭмодзи = СтрШаблон(НСтр(""ru = ''Эмодзи_5-00%1''""), индекс);
                                                       |		Иначе
                                                       |			ЧислоЭмодзи = Строка(индекс)+""."";
                                                       |		КонецЕсли;
                                                       |		
                                                       |		СрокЗадачиСтрока = """" + ?(ЗначениеЗаполнено(Выборка.СрокИсполнения), Выборка.СрокИсполнения, ""<Будет определен позже>"");
                                                       |		
                                                       |		Сообщение = Новый Структура;
                                                       |		// Текст сообщения, которое будет отправлено
                                                       |		ТекстСообщения = СтрШаблон(НСтр(""ru = ''%5 Задача """"%1"""" (%8) 
                                                       |                                            | Дата создания: %2
                                                       |                                            | Срок: %3. 
                                                       |                                            | Получатель услуги: %4
                                                       |                                            | Состояние: %6 (%7)''""), 
                                                       |									Выборка.Наименование, Выборка.ДатаНачала, СрокЗадачиСтрока, Выборка.ПолучательУслуг, ЧислоЭмодзи, Выборка.Состояние, Выборка.ДатаУстановкиСостояния, Выборка.Номер);
                                                       |		Сообщение.Вставить(""ТекстСообщения"", ТекстСообщения);
                                                       |		Сообщение.Вставить(""Клавиатура"", ""Команды задачи"");
                                                       |	
                                                       |		// Если сообщение является ответом, идентификатор исходного сообщения
                                                       |		Сообщение.Вставить(""Ответ"", НакопленныеДанные.ИдентификаторСообщения);
                                                       |		
                                                       |		ОтправитьСообщение(Сообщение, НакопленныеДанные);	
                                                       |	
                                                       |	КонецЦикла;
                                                       |	
                                                       |КонецЕсли;
                                                       |
                                                       |'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Вывод информации о проекте"
	Наименование = НСтр("ru = 'Вывод информации о проекте'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Вывод информации о проекте'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// Проект. Вариант вида: ""СП1_"" + Строка(НакопленныеДанные.ГУИД_Проекта)
	|ГУИДПроектаСтрока = Сред(НакопленныеДанные.ОтветКонтекстнойКлавиатуры, 5);
	|ГУИДПроекта = Новый УникальныйИдентификатор(ГУИДПроектаСтрока);
	|Проект = Справочники.Проекты.ПолучитьСсылку(ГУИДПроекта);
	|
	|Сообщение = Новый Структура;
	|
	|ДанныеПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, ""Организация, ОтветственныйЗаПроект, Комментарий, ПолучательУслуг"");
	|
	|ТекстСообщения = СтрШаблон(НСтр(""ru = ''Организация: %1
	|                            |Ответственный за проект: %2
	|							|Получатель услуг: %4
	|							|Описание проекта: 
	|                            |%3
	|                            |''""), ДанныеПроекта.Организация, ДанныеПроекта.ОтветственныйЗаПроект, ДанныеПроекта.Комментарий, ДанныеПроекта.ПолучательУслуг);
	|
	|// Текст сообщения, которое будет отправлено
	|Сообщение.Вставить(""ТекстСообщения"", ТекстСообщения);
	|
	|// Если сообщение является ответом, идентификатор исходного сообщения
	|Сообщение.Вставить(""Ответ"", НакопленныеДанные.ИдентификаторСообщения);
	|
	|
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);
	|
	|
	|'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Вывод проектов с кол-вом задач"
	Наименование = НСтр("ru = 'Вывод проектов с кол-вом задач'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Вывод проектов с кол-вом задач'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// - Удаляем прошлое сообщение с командами управления задачами Купорос, чтобы не путали внимание.
	|
	|//Сообщение = Новый Структура;
	|//УдалитьСообщение(Сообщение, НакопленныеДанные);
	|
	|// - Получаем список проектов, где есть невыполненные задачи.	
	|
	|Пользователь = НакопленныеДанные.НастройкиПользователя.Пользователь;
	|
	|Запрос = Новый Запрос;
	|Запрос.Текст = ""ВЫБРАТЬ
	|	               |	ЗадачиПользователя.Проект КАК Проект,
	|	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачиПользователя.Ссылка) КАК КоличествоЗадач
	|	               |ИЗ
	|	               |	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|	               |ГДЕ
	|	               |	НЕ ЗадачиПользователя.Выполнена
	|	               |	И (ЗадачиПользователя.Инициатор = &Пользователь
	|	               |			ИЛИ ЗадачиПользователя.ПолучательУслуг = &Пользователь
	|	               |			ИЛИ ЗадачиПользователя.Исполнитель = &Пользователь
	|	               |			ИЛИ ЗадачиПользователя.РольИсполнителя = &РольИсполнителя)
	|	               |
	|	               |СГРУППИРОВАТЬ ПО
	|	               |	ЗадачиПользователя.Проект
	|	               |
	|	               |УПОРЯДОЧИТЬ ПО
	|	               |	ЗадачиПользователя.Проект.Наименование"";
	|	
	|Запрос.УстановитьПараметр(""Пользователь"", Пользователь);
	|Запрос.УстановитьПараметр(""РольИсполнителя"", Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения);
	|
	|ОтветственныеКоординаторы = РаботаСЗадачами.ИсполнителиРоли(Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения); 
	|Если ОтветственныеКоординаторы.Найти(Пользователь) = Неопределено Тогда
	|	// Пользователь не входит в группу координаторов, администраторов - убираем фильтр по роли координатора.
	|	Запрос.Текст = СтрЗаменить(Запрос.Текст, ""ЗадачиПользователя.РольИсполнителя = &РольИсполнителя"", ""Ложь"");
	|КонецЕсли;
	|	
	|Результат = Запрос.Выполнить();
	|Выборка = Результат.Выбрать();
	|Если Выборка.Количество() > 0 Тогда
	|	
	|	Сообщение = Новый Структура;
	|	// Текст сообщения, которое будет отправлено
	|	ТекстСообщения = НСтр(""ru = ''Эмодзи_1-186 Список активных задач по проектам:''"");
	|	Сообщение.Вставить(""ТекстСообщения"", ТекстСообщения);
	|	ОтправитьСообщение(Сообщение, НакопленныеДанные);	
	|
	|	Пока Выборка.Следующий() Цикл
	|		
	|		НакопленныеДанные.Вставить(""ГУИД_Проекта"", Выборка.Проект.УникальныйИдентификатор());
	|		
	|		Сообщение = Новый Структура;
	|		// Текст сообщения, которое будет отправлено
	|		ТекстСообщения = СтрШаблон(НСтр(""ru = ''Эмодзи_4-091 %1 - активных задач: %2''""), Выборка.Проект, Выборка.КоличествоЗадач);
	|		Сообщение.Вставить(""ТекстСообщения"", ТекстСообщения);
	|		Сообщение.Вставить(""Клавиатура"", ""Проекты с задачами"");
	|
	|		ОтправитьСообщение(Сообщение, НакопленныеДанные);	
	|	
	|	КонецЦикла;
	|
	|Иначе
	|	
	|	Сообщение = Новый Структура;
	|	// Текст сообщения, которое будет отправлено
	|	ТекстСообщения = НСтр(""ru = ''Эмодзи_1-186 Активных задач по проектам, где вы ответственный, нет.''"");
	|	Сообщение.Вставить(""ТекстСообщения"", ТекстСообщения);
	|	ОтправитьСообщение(Сообщение, НакопленныеДанные);	
	|	
	|КонецЕсли;
	|'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Отмена Создания новой задачи"
	Наименование = НСтр("ru = 'Отмена Создания новой задачи'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Отмена Создания новой задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Истина;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// - В закладке ""Действия над контекстом"" установлен флажок ""Очистить контекст""
	|
	|// - Удаляем прошлое сообщение с командами управления задачами Купорос, чтобы не путали.
	|Сообщение = Новый Структура;
	|УдалитьСообщение(Сообщение, НакопленныеДанные);
	|
	|// - Выводим информацию о результате.
	|Сообщение = Новый Структура;
	|Сообщение.Вставить(""ТекстСообщения"", ""Эмодзи_5-085 Создание задачи отменено! Эмодзи_1-083"");
	|Сообщение.Вставить(""Клавиатура"", ""Стартовая"");
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);
	|'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Приглашение к созданию задачи"
	Наименование = НСтр("ru = 'Приглашение к созданию задачи'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Приглашение к созданию задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// - На закладке ""Действия над контекстом"" установлен параметр ""Ожидается ввод новой задачи"" = Да.
	|
	|// - Удаляем прошлое сообщение с командами управления задачами Купорос, чтобы не путали.
	|Сообщение = Новый Структура;
	|УдалитьСообщение(Сообщение, НакопленныеДанные);
	|
	|// - Создание сообщения о добавлении задачи и вывод ""Сохранить"", ""Отменить""
	|Сообщение = Новый Структура;
	|Сообщение.Вставить(""ТекстСообщения"", ""Эмодзи_5-170 Добавьте новую задачу в следующих сообщениях. Эмодзи_3-097 Вложите файлы или скриншоты."");
	|Сообщение.Вставить(""Клавиатура"", ""Создание задачи"");
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);
	|
	|Сообщение = Новый Структура;
	|Сообщение.Вставить(""ТекстСообщения"", ""Эмодзи_1-115 После отправки сообщений нажмите команду """"Сохранить"""" и задача будет зарегистрирована."");
	|Сообщение.Вставить(""Клавиатура"", ""Отменить"");
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);
	|
	|
	|
	|
	|
	|'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	СправочникОбъект.ДействияНадКонтекстомАвто = 1;
	
	// Заполняем ТЧ.ДействияНадКонтекстом (Действия над контекстом). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ДействияНадКонтекстом.Очистить();
	НоваяСтрока = СправочникОбъект.ДействияНадКонтекстом.Добавить();
	НоваяСтрока.Параметр = ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.НайтиПоНаименованию("Ожидается ввод новой задачи (Параметр)"); // поиск ранее добавленного элемента
	НоваяСтрока.Действие = Перечисления.ТелеграмДействияСКонтекстом.Установить;
	НоваяСтрока.Значение = Истина;
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Прием текста новой задачи"
	Наименование = НСтр("ru = 'Прием текста новой задачи'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Прием текста новой задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '
	|ТекстЗадачи = НакопленныеДанные.ТекстСообщения;
	|'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Сохранить картинку"
	Наименование = НСтр("ru = 'Сохранить картинку'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Сохранить картинку'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// Загружается двоичное содержимое сообщения, что бы это ни было - документ, картинка, аудио, видео, голос.
	|// Файл сохраняется в папке, указанной в реквизите ""Каталог сохранения файлов"" бота.
	|//	Результат загрузки попадает в НакопленныеДанные.ЗагруженныйФайл (<строка> или НЕОПРЕДЕЛЕНО)
	|ЗагрузитьФайл(НакопленныеДанные);'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Сохранить Создание новой задачи"
	Наименование = НСтр("ru = 'Сохранить Создание новой задачи'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Сохранить Создание новой задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Истина;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// - В закладке ""Действия над контекстом"" установлен флажок ""Очистить контекст"". Это служит окончанием ввода задачи из Телеграм.
	|
	|// - Удаляем прошлое сообщение с командами управления задачами Купорос, чтобы не путали внимание.
	|
	|Сообщение = Новый Структура;
	|УдалитьСообщение(Сообщение, НакопленныеДанные);
	|
	|// - Формирование параметров: текста описания, темы, списка файлов, получатель услуг.
	|
	|// Получение кэша сеансов накопленного из введенных сообщений.
	|ТаблицаКэшСеанса =  Справочники.ТелеграмОбработка.ТаблицаКэшСеанса(НакопленныеДанные.КонтекстСеанса);
	|
	|Если ТаблицаКэшСеанса.Количество() = 0 Тогда
	|	ТекстСообщения = ""Задача не создана. Данные не введены."";
	|	Перейти ~Возврат;	
	|КонецЕсли;
	|
	|// Инициализация параметров.
	|ТемаЗадачи = """";
	|ОписаниеЗадачи = """";
	|СписокЗагруженныхФайлов = Новый Массив;
	|
	|Автор = НакопленныеДанные.НастройкиПользователя.Пользователь;
	|
	|ИндексСообщений = 0;
	|
	|Для каждого ТекСтрока Из ТаблицаКэшСеанса Цикл
	|
	|	Если ТекСтрока.ВидВходящегоОбновления <> Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение Тогда
	|		Продолжить;
	|	КонецЕсли;
	|	
	|	// сообщение
	|	Если ЗначениеЗаполнено(ТекСтрока.ТекстСообщения) Тогда
	|		
	|		ИндексСообщений = ИндексСообщений + 1;
	|
	|		Если ИндексСообщений = 1 Тогда
	|			ТемаЗадачи = СтрПолучитьСтроку(ТекСтрока.ТекстСообщения, 1);
	|		КонецЕсли;
	|		
	|		ОбщегоНазначенияКупоросКлиентСервер.ПрисоединитьСтроку(ОписаниеЗадачи, ТекСтрока.ТекстСообщения, Символы.ПС);
	|		
	|	КонецЕсли;
	|	
	|	// загруженный файл
	|	Если ЗначениеЗаполнено(ТекСтрока.ЗагруженныйФайл) Тогда
	|		СписокЗагруженныхФайлов.Добавить(ТекСтрока.ЗагруженныйФайл);
	|	КонецЕсли;
	|	
	|КонецЦикла;
	|
	|// - Формирование задачи.
	|
	|СсылкаНаНовуюЗадачу = ТелеграмСервер.СоздатьЗадачуИзДанныхТелеграм(ТемаЗадачи, ОписаниеЗадачи, Автор, СписокЗагруженныхФайлов);
	|
	|// - Итоговое текстовое сообщение.
	|
	|ТекстСообщения = СтрШаблон(НСтр(""ru = ''Эмодзи_1-091 Задача """"%1"""" успешно зарегистрирована. В ближайшее время будет рассмотрена.''""), ТемаЗадачи);
	|
	|// - Метка для переходов, в случае прерывания обработки алгоритма.
	|
	|~Возврат:
	|
	|// - Вывод результата в сообщении для информации.
	|
	|Сообщение = Новый Структура;
	|Сообщение.Вставить(""ТекстСообщения"", ТекстСообщения);
	|Сообщение.Вставить(""Клавиатура"", ""Стартовая"");
	|ОтправитьСообщение(Сообщение, НакопленныеДанные);	
	|	
	|
	|'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмОбработка: "Формирования файла карточки задачи"
	Наименование = НСтр("ru = 'Формирования файла карточки задачи'");
	НайденЭлемент = Справочники.ТелеграмОбработка.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмОбработка.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Формирования файла карточки задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.ОчиститьКонтекст          = Ложь;
	СправочникОбъект.КодСборкиОтвета           = НСтр("ru = '// - Получаем задачи из ответа контекстной клавиатуры. Вариант вида: ""ДЗ1_"" + Строка(НакопленныеДанные.ГУИД_Задачи).
	|ГУИДЗадачиСтрока = Сред(НакопленныеДанные.ОтветКонтекстнойКлавиатуры, 5);
	|ГУИДЗадача = Новый УникальныйИдентификатор(ГУИДЗадачиСтрока);
	|Задача = Задачи.ЗадачиПользователя.ПолучитьСсылку(ГУИДЗадача);
	|
	|// - Формируем печатную форму карточки задачи и сохраняем во временном каталоге.
	|СписокЗначений = Новый СписокЗначений;
	|МассивЗадач = Новый Массив;
	|МассивЗадач.Добавить(Задача);
	|
	|// Формирование табличного документа карточки задачи и запись во временном каталоге.
	|ТабДокументЗадачи = Задачи.ЗадачиПользователя.ПечатьКарточкиЗадачи(МассивЗадач, СписокЗначений);
	|
	|ИмяКаталога = ФайловаяСистема.СоздатьВременныйКаталог();
	|СоздатьКаталог(ИмяКаталога);
	|ПолныйПутьФайла = ИмяКаталога + ""КарточкаЗадачи.pdf"";
	|ТабДокументЗадачи.Записать(ПолныйПутьФайла, ТипФайлаТабличногоДокумента.PDF);
	|
	|// - Выводим файл в сообщении Телеграм.
	|ВходнойФайлСтруктура = Новый Структура;
	|ВходнойФайлСтруктура.Вставить(""ВидИсточника"", ""Файл"");
	|ВходнойФайлСтруктура.Вставить(""Источник"", ПолныйПутьФайла);
	|ИмяФайлаЗадачи = СтрШаблон(НСтр(""ru = ''Задача_%1.pdf''""), Задача.Номер);
	|ВходнойФайлСтруктура.Вставить(""ИмяФайла"", ИмяФайлаЗадачи);
	|
	|Сообщение = Новый Структура;
	|
	|// ИмяФайла - имя файла для отображения получателю, например, mydog.jpg
	|Сообщение.Вставить(""ВходнойФайлСтруктура"", ВходнойФайлСтруктура);
	|Сообщение.Вставить(""Подпись"", """"+Задача);
	|
	|// Если сообщение является ответом, идентификатор исходного сообщения
	|Сообщение.Вставить(""Ответ"", НакопленныеДанные.ИдентификаторСообщения);
	|
	|ОтправитьДокумент(Сообщение, НакопленныеДанные);
	|
	|// Удаляем временный каталог после успешной отправки.
	|ФайловаяСистема.УдалитьВременныйКаталог(ИмяКаталога);
	|
	|'");
	СправочникОбъект.ТипОбработки              = Перечисления.ТелеграмТипыОбработок.Стандартная;
	
	СправочникОбъект.Записать();
	
КонецПроцедуры

Процедура СозданиеБазовыхСервисов()

	// - Создание объекта Справочники.ТелеграмСервис: "Работа с сообщениями"
	Наименование = НСтр("ru = 'Работа с сообщениями'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьГруппу();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Работа с сообщениями'");
	
	// заполняем Реквизиты
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "Управление задачами"
	Наименование = НСтр("ru = 'Управление задачами'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьГруппу();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Управление задачами'");
	
	// заполняем Реквизиты
	
	СправочникОбъект.Записать();
	
	// - Создание объекта Справочники.ТелеграмСервис: "Обновление стартовой клавиатуры"
	Наименование = НСтр("ru = 'Обновление стартовой клавиатуры'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Обновление стартовой клавиатуры'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Выключен;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Равно Обновление клавиатуры'");
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящийТекст (Входящий текст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = НСтр("ru = 'Обновление клавиатуры'");
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Обновление клавиатуры", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "Ответ на команду /start"
	Наименование = НСтр("ru = 'Ответ на команду /start'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Ответ на команду /start'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Равно /start; Содержит привет; Содержит меню'");
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящийТекст (Входящий текст). КоличествоЗаписей: 3
	//#0
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = НСтр("ru = '/start'");
	//#1
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Содержит;
	НоваяСтрока.Значение     = НСтр("ru = 'привет'");
	//#2
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Содержит;
	НоваяСтрока.Значение     = НСтр("ru = 'меню'");
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Ответ на команду /start", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "Ответ на Проверка связи"
	Наименование = НСтр("ru = 'Ответ на Проверка связи'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Ответ на Проверка связи'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Начинается с Проверка связи'");
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящийТекст (Входящий текст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.НачинаетсяС;
	НоваяСтрока.Значение     = НСтр("ru = 'Проверка связи'");
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Ответ на ""Проверка связи""", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "Отменить и вернуться назад"
	Наименование = НСтр("ru = 'Отменить и вернуться назад'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Наименование              = НСтр("ru = 'Отменить и вернуться назад'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Начинается с Отменить действие; Начинается с Завершить диалог'");
	СправочникОбъект.ОбработкиАвто             = 3;
	
	// Заполняем ТЧ.ВходящийТекст (Входящий текст). КоличествоЗаписей: 2
	//#0
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.НачинаетсяС;
	НоваяСтрока.Значение     = НСтр("ru = 'Отменить действие'");
	//#1
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.НачинаетсяС;
	НоваяСтрока.Значение     = НСтр("ru = 'Завершить диалог'");
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 3
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Отмена создания сообщения", Истина); // поиск ранее добавленного элемента
	НоваяСтрока.НаборУсловий = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию("Ожидается прием сообщений для отправки", Истина); // поиск ранее добавленного элемента
	//#1
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Отмена Создания новой задачи", Истина); // поиск ранее добавленного элемента
	НоваяСтрока.НаборУсловий = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию("Ожидается ввод новой задачи", Истина); // поиск ранее добавленного элемента
	//#2
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Отмена Диалога с администратором", Истина); // поиск ранее добавленного элемента
	НоваяСтрока.НаборУсловий = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию("Ожидается диалог с тех.поддержкой", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	// - Создание объекта Справочники.ТелеграмСервис: "НаписатьСообщениеВсем_НакоплениеСообщений"
	Наименование = НСтр("ru = 'НаписатьСообщениеВсем_НакоплениеСообщений'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Работа с сообщениями", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'НаписатьСообщениеВсем_НакоплениеСообщений'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Заполнено '");
	СправочникОбъект.НаборыУсловийАвто         = 1;
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящийТекст (Входящий текст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Заполнено;
	
	// Заполняем ТЧ.НаборыУсловий (Наборы условий). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.НаборыУсловий.Очистить();
	НоваяСтрока = СправочникОбъект.НаборыУсловий.Добавить();
	НоваяСтрока.НаборУсловий = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию("Ожидается прием сообщений для отправки", Истина); // поиск ранее добавленного элемента
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Прием текста новой задачи", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "НаписатьСообщениеВсем_Начало"
	Наименование = НСтр("ru = 'НаписатьСообщениеВсем_Начало'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Работа с сообщениями", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'НаписатьСообщениеВсем_Начало'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Начинается с Написать всем'");
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящийТекст (Входящий текст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.НачинаетсяС;
	НоваяСтрока.Значение     = НСтр("ru = 'Написать всем'");
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Приглашение к написанию сообщения всем", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "НаписатьСообщениеВсем_Отменить"
	Наименование = НСтр("ru = 'НаписатьСообщениеВсем_Отменить'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Работа с сообщениями", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'НаписатьСообщениеВсем_Отменить'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Равно Отменить отправку'");
	СправочникОбъект.НаборыУсловийАвто         = 1;
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящиеДанные (Входящие данные). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящиеДанные.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящиеДанные.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = НСтр("ru = 'Отменить отправку'");
	
	// Заполняем ТЧ.НаборыУсловий (Наборы условий). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.НаборыУсловий.Очистить();
	НоваяСтрока = СправочникОбъект.НаборыУсловий.Добавить();
	НоваяСтрока.НаборУсловий = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию("Ожидается прием сообщений для отправки", Истина); // поиск ранее добавленного элемента
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Отмена создания сообщения", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "НаписатьСообщениеВсем_ОтправитьСообщения"
	Наименование = НСтр("ru = 'НаписатьСообщениеВсем_ОтправитьСообщения'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Работа с сообщениями", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'НаписатьСообщениеВсем_ОтправитьСообщения'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Равно Отправить сообщение всем'");
	СправочникОбъект.НаборыУсловийАвто         = 1;
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящиеДанные (Входящие данные). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящиеДанные.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящиеДанные.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = НСтр("ru = 'Отправить сообщение всем'");
	
	// Заполняем ТЧ.НаборыУсловий (Наборы условий). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.НаборыУсловий.Очистить();
	НоваяСтрока = СправочникОбъект.НаборыУсловий.Добавить();
	НоваяСтрока.НаборУсловий = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию("Ожидается прием сообщений для отправки", Истина); // поиск ранее добавленного элемента
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Отправка сообщений всем", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "НаписатьСообщениеВсем_ПриемВложений"
	Наименование = НСтр("ru = 'НаписатьСообщениеВсем_ПриемВложений'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Работа с сообщениями", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'НаписатьСообщениеВсем_ПриемВложений'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Не заполнено '");
	СправочникОбъект.НаборыУсловийАвто         = 1;
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящийТекст (Входящий текст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.НеЗаполнено;
	
	// Заполняем ТЧ.НаборыУсловий (Наборы условий). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.НаборыУсловий.Очистить();
	НоваяСтрока = СправочникОбъект.НаборыУсловий.Добавить();
	НоваяСтрока.НаборУсловий = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию("Ожидается прием сообщений для отправки", Истина); // поиск ранее добавленного элемента
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Сохранить картинку", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	// - Создание объекта Справочники.ТелеграмСервис: "! Вывод меню "Управление задачами""
	Наименование = НСтр("ru = '! Вывод меню ""Управление задачами""'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = '! Вывод меню ""Управление задачами""'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Начинается с Задачи'");
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящийТекст (Входящий текст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.НачинаетсяС;
	НоваяСтрока.Значение     = НСтр("ru = 'Задачи'");
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("! Вывод меню управления задачами", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "1_СозданиеЗадачи_Создать задачу"
	Наименование = НСтр("ru = '1_СозданиеЗадачи_Создать задачу'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = '1_СозданиеЗадачи_Создать задачу'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Равно Создать задачу'");
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящиеДанные (Входящие данные). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящиеДанные.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящиеДанные.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = НСтр("ru = 'Создать задачу'");
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Приглашение к созданию задачи", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "2_СозданиеЗадачи_Прием скриншотов"
	Наименование = НСтр("ru = '2_СозданиеЗадачи_Прием скриншотов'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = '2_СозданиеЗадачи_Прием скриншотов'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Не заполнено '");
	СправочникОбъект.НаборыУсловийАвто         = 1;
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящийТекст (Входящий текст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.НеЗаполнено;
	
	// Заполняем ТЧ.НаборыУсловий (Наборы условий). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.НаборыУсловий.Очистить();
	НоваяСтрока = СправочникОбъект.НаборыУсловий.Добавить();
	НоваяСтрока.НаборУсловий = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию("Ожидается ввод новой задачи", Истина); // поиск ранее добавленного элемента
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Сохранить картинку", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "3_СозданиеЗадачи_Прием описания задачи"
	Наименование = НСтр("ru = '3_СозданиеЗадачи_Прием описания задачи'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = '3_СозданиеЗадачи_Прием описания задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Заполнено '");
	СправочникОбъект.НаборыУсловийАвто         = 1;
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящийТекст (Входящий текст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Заполнено;
	
	// Заполняем ТЧ.НаборыУсловий (Наборы условий). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.НаборыУсловий.Очистить();
	НоваяСтрока = СправочникОбъект.НаборыУсловий.Добавить();
	НоваяСтрока.НаборУсловий = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию("Ожидается ввод новой задачи", Истина); // поиск ранее добавленного элемента
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Прием текста новой задачи", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "4_Сохранить задачу"
	Наименование = НСтр("ru = '4_Сохранить задачу'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = '4_Сохранить задачу'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Равно Сохранить'");
	СправочникОбъект.НаборыУсловийАвто         = 1;
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящиеДанные (Входящие данные). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящиеДанные.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящиеДанные.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = НСтр("ru = 'Сохранить'");
	
	// Заполняем ТЧ.НаборыУсловий (Наборы условий). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.НаборыУсловий.Очистить();
	НоваяСтрока = СправочникОбъект.НаборыУсловий.Добавить();
	НоваяСтрока.НаборУсловий = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию("Ожидается ввод новой задачи", Истина); // поиск ранее добавленного элемента
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Сохранить Создание новой задачи", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "5_Отменить создание задачи"
	Наименование = НСтр("ru = '5_Отменить создание задачи'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = '5_Отменить создание задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Равно Отменить'");
	СправочникОбъект.НаборыУсловийАвто         = 1;
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящиеДанные (Входящие данные). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящиеДанные.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящиеДанные.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = НСтр("ru = 'Отменить'");
	
	// Заполняем ТЧ.НаборыУсловий (Наборы условий). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.НаборыУсловий.Очистить();
	НоваяСтрока = СправочникОбъект.НаборыУсловий.Добавить();
	НоваяСтрока.НаборУсловий = Справочники.ТелеграмНаборУсловий.НайтиПоНаименованию("Ожидается ввод новой задачи", Истина); // поиск ранее добавленного элемента
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Отмена Создания новой задачи", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "Вывод задач конкретного проекта"
	Наименование = НСтр("ru = 'Вывод задач конкретного проекта'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Вывод задач конкретного проекта'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Начинается с СП1_'");
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящиеДанные (Входящие данные). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящиеДанные.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящиеДанные.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.НачинаетсяС;
	НоваяСтрока.Значение     = НСтр("ru = 'СП1_'");
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Вывод задач определенного проекта", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "Вывод информации о проекте"
	Наименование = НСтр("ru = 'Вывод информации о проекте'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Вывод информации о проекте'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Начинается с ОП1_'");
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящиеДанные (Входящие данные). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящиеДанные.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящиеДанные.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.НачинаетсяС;
	НоваяСтрока.Значение     = НСтр("ru = 'ОП1_'");
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Вывод информации о проекте", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "Вывод списка текущих задач"
	Наименование = НСтр("ru = 'Вывод списка текущих задач'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Вывод списка текущих задач'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Равно Текущие задачи'");
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящийТекст (Входящий текст). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящийТекст.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящийТекст.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = НСтр("ru = 'Текущие задачи'");
	
	// Заполняем ТЧ.ВходящиеДанные (Входящие данные). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящиеДанные.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящиеДанные.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.Равно;
	НоваяСтрока.Значение     = НСтр("ru = 'Текущие задачи'");
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Вывод проектов с кол-вом задач", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
	// - Создание объекта Справочники.ТелеграмСервис: "Формирование деталей задачи"
	Наименование = НСтр("ru = 'Формирование деталей задачи'");
	НайденЭлемент = Справочники.ТелеграмСервис.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
		СправочникОбъект = Справочники.ТелеграмСервис.СоздатьЭлемент();
	Иначе
		СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	// заполняем Стандартные реквизиты
	СправочникОбъект.Родитель                  = Справочники.ТелеграмСервис.НайтиПоНаименованию("Управление задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.Наименование              = НСтр("ru = 'Формирование деталей задачи'");
	
	// заполняем Реквизиты
	СправочникОбъект.Статус                    = Перечисления.ТелеграмСтатусыИспользования.Используется;
	СправочникОбъект.Бот                       = Справочники.ТелеграмБоты.НайтиПоНаименованию("Бот управления задачами", Истина); // поиск ранее добавленного элемента
	СправочникОбъект.ВидВходящегоОбновления    = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры;
	СправочникОбъект.ВходящийТекстАвто         = НСтр("ru = 'Начинается с ДЗ1_'");
	СправочникОбъект.ОбработкиАвто             = 1;
	
	// Заполняем ТЧ.ВходящиеДанные (Входящие данные). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.ВходящиеДанные.Очистить();
	НоваяСтрока = СправочникОбъект.ВходящиеДанные.Добавить();
	НоваяСтрока.ВидСравнения = Перечисления.ТелеграмВидыСравнения.НачинаетсяС;
	НоваяСтрока.Значение     = НСтр("ru = 'ДЗ1_'");
	
	// Заполняем ТЧ.Обработки (Обработки). КоличествоЗаписей: 1
	//#0
	СправочникОбъект.Обработки.Очистить();
	НоваяСтрока = СправочникОбъект.Обработки.Добавить();
	НоваяСтрока.Обработка    = Справочники.ТелеграмОбработка.НайтиПоНаименованию("Формирования файла карточки задачи", Истина); // поиск ранее добавленного элемента
	
	
	СправочникОбъект.Записать();
	
	
КонецПроцедуры

