////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ ПОДСИСТЕМЫ "Учет задач пользователей"
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЗАДАЧАМИ

// Возвращает результат проверка на полноправного пользователя задач
// 
// Возвращаемое значение:
//  Булево - Истина, если доступны роли "ПолныеПрава" или "КонтрольЗадачПользователей" 
//
Функция ЭтоПолноправныйПользовательЗадач() Экспорт
	
	// АПК:336-выкл Допускаем использование РольДоступна
	Если РольДоступна("ПолныеПрава") 
		Или РольДоступна("КонтрольЗадачПользователей") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ЭтоПолноправныйПользовательЗадач()

// Исполнители роли
//
// Параметры:
//  РольИсполнителя	 - СправочникСсылка.РолиИсполнителей 
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Пользователи
//
Функция ИсполнителиРоли(Знач РольИсполнителя) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
				  |	ИсполнителиЗадач.Исполнитель КАК Исполнитель
				  |ИЗ
				  |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
				  |ГДЕ
				  |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
				  
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("РольИсполнителя", РольИсполнителя);
	
	Исполнители = Запрос.Выполнить().Выгрузить();
	
	Возврат Исполнители.ВыгрузитьКолонку("Исполнитель");
	
КонецФункции

// Получение таблицы задач на оценку автором (согласователем)
//
// Параметры:
//  ПользовательОценщик  - СправочникСсылка.Пользователи - автор или согласователь задачи
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//		* Задача - ЗадачаСсылка.ЗадачиПользователя
//		* Оценка - Число - оценка задачи по 5 бальной шкале
//		* НаименованиеЗадачи - Строка
//		* Исполнитель - СправочникСсылка.Пользователи - исполнитель задачи
//		* ДатаФиксацииВыполнения - Дата - дата окончательного выполнения задачи
//		* Автор - СправочникСсылка.Пользователи - автор или согласователь задачи
//
Функция ПолучитьСписокЗадачНаОценку(ПользовательОценщик) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВыполненныеЗадачи.Ссылка КАК Задача,
	               |	ВыполненныеЗадачи.Ссылка.ОценкаЗадачи КАК Оценка,
	               |	ВыполненныеЗадачи.Ссылка.Наименование КАК НаименованиеЗадачи,
	               |	ВыполненныеЗадачи.Ссылка.Исполнитель КАК Исполнитель,
	               |	ВыполненныеЗадачи.Ссылка.ДатаВыполнения КАК ДатаФиксацииВыполнения,
	               |	ВыполненныеЗадачи.Автор КАК Автор
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЗадачиПользователя.Ссылка КАК Ссылка,
	               |		ЗадачиПользователя.Инициатор КАК Автор
	               |	ИЗ
	               |		Задача.ЗадачиПользователя КАК ЗадачиПользователя
	               |	ГДЕ
	               |		ЗадачиПользователя.Выполнена
	               |		И НЕ ЗадачиПользователя.ОтмененаЗадача
	               |		И ЗадачиПользователя.Инициатор = &Автор
	               |		И ЗадачиПользователя.Исполнитель <> &Автор
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЗадачиПользователяСогласование.Ссылка,
	               |		ЗадачиПользователяСогласование.Пользователь
	               |	ИЗ
	               |		Задача.ЗадачиПользователя.РабочаяГруппа КАК ЗадачиПользователяСогласование
	               |	ГДЕ
	               |		ЗадачиПользователяСогласование.Ссылка.Выполнена
	               |		И НЕ ЗадачиПользователяСогласование.Ссылка.ОтмененаЗадача
	               |		И ЗадачиПользователяСогласование.Пользователь = &Автор) КАК ВыполненныеЗадачи
	               |ГДЕ
	               |	ВыполненныеЗадачи.Ссылка.ОценкаЗадачи = 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыполненныеЗадачи.Ссылка,
	               |	ВыполненныеЗадачи.Автор,
	               |	ВыполненныеЗадачи.Ссылка.ОценкаЗадачи,
	               |	ВыполненныеЗадачи.Ссылка.Наименование,
	               |	ВыполненныеЗадачи.Ссылка.Исполнитель,
	               |	ВыполненныеЗадачи.Ссылка.ДатаВыполнения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаФиксацииВыполнения";
	
	Запрос.УстановитьПараметр("Автор", ПользовательОценщик);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();

	
	Возврат Выборка;
	
КонецФункции

// Поиск задач без оценки пользователя
//
// Параметры:
//  Пользователь		 - СправочникСсылка.Пользователи 
//  КолВоЗадачНаОценку	 - Число - фиксация результата кол-ва задач без оценки
// 
// Возвращаемое значение:
//  Булево - Истина, если найдено более 0 задач на оценку 
//
Функция ЕстьЗадачиБезОценкиПользователя(Пользователь, КолВоЗадачНаОценку = 0) Экспорт

	ТаблицаЗадач = ПолучитьСписокЗадачНаОценку(Пользователь);
	
	КолВоЗадачНаОценку =  ТаблицаЗадач.Количество();
	
	Возврат ТаблицаЗадач.Количество() > 0;

КонецФункции // ЕстьЗадачиБезОценкиПользователя()

// Заполняет таблицу значений СписокИзбранныхПроектов текущими проектами, с отметкой ранее выбранных избранных
//
// Параметры:
//  МассивИзбранныхIDПроектов  - Массив - массив уникальных идентификаторов избранных проектов
//  СписокИзбранныхПроектов  - ТаблицаЗначений - содержит колонки:
//                 * Проект - СправочникСсылка.Проекты
//                 * IDПроекта - Уникальный идентификатор
//                 * Используется - Булево
//
Процедура ЗаполнитьТаблицуИзбранныхПроектов(МассивИзбранныхIDПроектов, СписокИзбранныхПроектов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Проекты.Ссылка КАК Ссылка,
	               |	Проекты.Представление КАК Представление
	               |ИЗ
	               |	Справочник.Проекты КАК Проекты
	               |ГДЕ
	               |	Проекты.Актуальность
	               |	И НЕ Проекты.ПометкаУдаления
	               |	И Проекты.Ссылка <> ЗНАЧЕНИЕ(Справочник.Проекты.ИзбранныеПроекты)";
	
	Результат = Запрос.Выполнить();
	ТаблицаИзбранныхПроектов = Результат.Выгрузить();
	
	ТаблицаИзбранныхПроектов.Сортировать("Представление");
	
	Для каждого ТекСрокаИзбранногоПроекта Из ТаблицаИзбранныхПроектов Цикл
	
		НовСтрока = СписокИзбранныхПроектов.Добавить();
		НовСтрока.Проект = ТекСрокаИзбранногоПроекта.Ссылка;
		НовСтрока.IDПроекта = ТекСрокаИзбранногоПроекта.Ссылка.УникальныйИдентификатор();
		НовСтрока.Используется = МассивИзбранныхIDПроектов.Найти(НовСтрока.IDПроекта) <> Неопределено;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуИзбранныхПроектов()

// Таблица избранных проектов текущего пользователя
// 
// Возвращаемое значение:
//  ТаблицаЗначений - содержит колонки:
//		* Код - Строка - строковый код проекта, в котором убран "-" для возможности создания процедур команд
//		* Наименование - Строка
//		* Проект - СправочникСсылка.Проекты
//
Функция ТаблицаИзбранныхПроектовТекущегоПользователя() Экспорт

	МассивИзбранныхIDПроектов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Проекты", "МассивИзбранныхIDПроектов", Новый Массив);
		
	СписокИзбранныхПроектов = Новый ТаблицаЗначений;
	СписокИзбранныхПроектов.Колонки.Добавить("Проект");
	СписокИзбранныхПроектов.Колонки.Добавить("IDПроекта");
	СписокИзбранныхПроектов.Колонки.Добавить("Используется");
		
	ЗаполнитьТаблицуИзбранныхПроектов(МассивИзбранныхIDПроектов, СписокИзбранныхПроектов);
	
	ТаблицаЗначенийИзбранныхПроектов = Новый ТаблицаЗначений;
	ТаблицаЗначенийИзбранныхПроектов.Колонки.Добавить("Код");	
	ТаблицаЗначенийИзбранныхПроектов.Колонки.Добавить("Наименование");	
	ТаблицаЗначенийИзбранныхПроектов.Колонки.Добавить("Проект");	
	
	Для каждого ТекСтрока Из СписокИзбранныхПроектов Цикл
	
		Если Не ТекСтрока.Используется Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Проект = Справочники.Проекты.БезПроекта Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСтрока.Проект, "Наименование, Код");
		
		НовСтрокаТаблицыПроектов = ТаблицаЗначенийИзбранныхПроектов.Добавить();
		НовСтрокаТаблицыПроектов.Код = СтрЗаменить(РеквизитыПроекта.Код, "-", "");
		НовСтрокаТаблицыПроектов.Наименование = Строка(ТекСтрока.Проект);
		НовСтрокаТаблицыПроектов.Проект = ТекСтрока.Проект;
		
	КонецЦикла;
	
	ТаблицаЗначенийИзбранныхПроектов.Сортировать("Наименование");
	
	Возврат ТаблицаЗначенийИзбранныхПроектов;
	
КонецФункции // СписокИзбранныхПроектовТекущегоПользователя()

// Обработчик подписки на событие УстановитьПометкуУдаленияЗадач.
Процедура УстановитьПометкуУдаленияОбсужденияПоЗадаче(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда 
        Возврат;  
	КонецЕсли; 
	
	Если Источник.ЭтоНовый() Тогда 
        Возврат;  
	КонецЕсли; 
	
	ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	Если Источник.ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		УстановитьПривилегированныйРежим(Истина);
		РаботаСОбсуждениями.УстановитьПометкуУдаленияОбсужденийПоДокументу(Источник.Ссылка, Источник.ПометкаУдаления);
	КонецЕсли;	
	
КонецПроцедуры

// Регламентное задание. Возобновляет выполнение задач по сроку состояния 
Процедура ИзменениеТекущегоСостоянияЗадач() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ИзменениеТекущегоСостоянияЗадач);
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТекущиеСостоянияЗадач.Задача КАК Задача,
	               |	ТекущиеСостоянияЗадач.Состояние КАК Состояние,
	               |	ТекущиеСостоянияЗадач.СрокСостояния КАК СрокСостояния,
	               |	ТекущиеСостоянияЗадач.Задача.Проект КАК Проект
	               |ИЗ
	               |	РегистрСведений.ТекущиеСостоянияЗадач КАК ТекущиеСостоянияЗадач
	               |ГДЕ
	               |	ТекущиеСостоянияЗадач.СрокСостояния < &ТекущаяДата
	               |	И ТекущиеСостоянияЗадач.СрокСостояния <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		МассивСценариевПереходов = Справочники.СценарииОбработкиЗадач.ПереходыСценарияПоСостоянию(Выборка.Проект, Выборка.Состояние);
		
		Если МассивСценариевПереходов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Автоматический перевод на основной переход состояния
		ПричинаСостояния = СтрШаблон(НСтр("ru = 'Автоматический переход на основное состояние по истечении срока действия.'"));
		РегистрыСведений.ТекущиеСостоянияЗадач.ОбновитьТекущееСостояниеЗадачи(Выборка.Задача, МассивСценариевПереходов[0],, ПричинаСостояния, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает запись в регистре сведений ХронометражРабочегоВремениПользователей #ХронометражЗадач
Процедура СоздатьЗаписьХронометража(Объект, ДатаНачала) Экспорт
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ХронометражРабочегоВремениПользователей.СоздатьНаборЗаписей();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.Объект.Установить(Объект);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Пользователь = ТекущийПользователь;
	НоваяЗапись.Объект = Объект;
	НоваяЗапись.ВремяНачала = ДатаНачала;
	НоваяЗапись.ВремяОкончания = '00010101';
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Переключает хронометраж, когда не нужно показывать диалог #ХронометражЗадач
Процедура ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект,
	КомандаПереключитьХронометраж,
	ЭлементПереключитьХронометраж) Экспорт

	Если Не ВключенХронометраж Тогда // создаем новую запись
		
		ДатаНачалаХронометража = ТекущаяДатаСеанса();
		ДатаКонцаХронометража = '00010101';
		СоздатьЗаписьХронометража(Объект, ДатаНачалаХронометража);
		ВключенХронометраж = Истина;
		
	Иначе
		
		КонецХронометража = ТекущаяДатаСеанса();
		ДлительностьРаботыВСек = КонецХронометража - ДатаНачалаХронометража;
		
		Если ДлительностьРаботыВСек >= 60 Тогда // больше 1 минуты
			
			ПараметрыОтчета = Новый Структура();
			ПараметрыОтчета.Вставить("ДатаОтчета", ТекущаяДатаСеанса());
			ПараметрыОтчета.Вставить("ВидРаботы", Справочники.ВидыРабот.РаботаПоЗадаче);
			ПараметрыОтчета.Вставить("ОписаниеРаботы", "");
			ПараметрыОтчета.Вставить("ДлительностьРаботы", ДлительностьРаботыВСек / 3600); // передаем в часах
			ПараметрыОтчета.Вставить("НачалоРаботы", ДатаНачалаХронометража);
			ПараметрыОтчета.Вставить("ОкончаниеРаботы", КонецХронометража);
			ПараметрыОтчета.Вставить("Объект", Объект);
			
			Источник = Объект;
			
			ОбновитьДанныеХронометражаВРегистре(ПараметрыОтчета);
			
		Иначе
			
			ОчиститьХронометраж(Объект);
			
		КонецЕсли;
		
		ДатаНачалаХронометража = '00010101';
		ДатаКонцаХронометража = '00010101';
		ВключенХронометраж = Ложь;
		
	КонецЕсли;	
	
	УстановитьСвойстваЭлементовХронометража(ВключенХронометраж, КомандаПереключитьХронометраж, ЭлементПереключитьХронометраж);
	
КонецПроцедуры

// Очистить хронометраж #ХронометражЗадач
Процедура ОчиститьХронометраж(Объект) Экспорт
	
	// Создать набор записей  - пустой - чтобы очистить регистр сведений
	НаборЗаписей = РегистрыСведений.ХронометражРабочегоВремениПользователей.СоздатьНаборЗаписей();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Записать();
	
КонецПроцедуры	

// Добавляет информацию о трудозатратах #ХронометражЗадач
//
// Параметры:
//  ПараметрыОтчета	- Структура:
//		* Объект - ЗадачаСсылка.ЗадачиПользователя 
//		* ДатаОтчета
//		* ВидРаботы - СправочникСсылка.ВидыРабот
//		* ДлительностьРаботы - Число - в часах
//		* НачалоРаботы - Дата - если заполнена длительность, то необязательно наличие свойства
//		* ОкончаниеРаботы - Дата - если заполнена длительность, то необязательно наличие свойства 
//		* ТекущийПользователь - СправочникСсылка.Пользователи - свойство может быть не указано, тогда будет инициализироваться текущий пользователь 1С
//
Процедура ОбновитьДанныеХронометражаВРегистре(ПараметрыОтчета) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.ДлительностьРаботы) Тогда
		Возврат;		
	КонецЕсли;
	
	// Создать набор записей  - пустой - чтобы очистить регистр сведений
	НаборЗаписей = РегистрыСведений.ХронометражРабочегоВремениПользователей.СоздатьНаборЗаписей();
	
	Если ПараметрыОтчета.Свойство("ТекущийПользователь") Тогда
		ТекущийПользователь = ПараметрыОтчета.ТекущийПользователь;
	Иначе
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.Объект.Установить(ПараметрыОтчета.Объект);
	НаборЗаписей.Записать();
	
	// запись в регистр ФактическиеТрудозатраты
	МенеджерЗаписи = РегистрыСведений.ЗатраченноеВремяПоЗадачам.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период		  = ПараметрыОтчета.ДатаОтчета;
	МенеджерЗаписи.Задача 		  = ПараметрыОтчета.Объект;
	МенеджерЗаписи.Исполнитель 	  = ТекущийПользователь;
	МенеджерЗаписи.ВидРаботы 	  = ПараметрыОтчета.ВидРаботы;
	
	МенеджерЗаписи.ЗатраченноеВремя = ПараметрыОтчета.ДлительностьРаботы; // в часах
	
	МенеджерЗаписи.АвторФиксацииВремени  = ТекущийПользователь;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры	

// Устанавливает свойства - подсказка и пометка элементам формы #ХронометражЗадач
Процедура УстановитьСвойстваЭлементовХронометража(
	ВключенХронометраж, 
	КомандаПереключитьХронометраж, 
	ЭлементПереключитьХронометраж) Экспорт
	
	Если ВключенХронометраж Тогда // хронометраж включен
		КомандаПереключитьХронометраж.Подсказка = НСтр("ru = 'Закончить хронометраж'");
		ЭлементПереключитьХронометраж.Пометка = Истина;
	Иначе
		КомандаПереключитьХронометраж.Подсказка = НСтр("ru = 'Включить хронометраж'");
		ЭлементПереключитьХронометраж.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Находит первую запись в регистре ХронометражРабочегоВремениПользователей с пустой датой окончания (00010101) #ХронометражЗадач
Процедура НайтиДатыХронометража(Объект, ДатаНачалаХронометража, ДатаКонцаХронометража) Экспорт
	
	Исполнитель = Пользователи.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Хронометраж.ВремяНачала КАК ВремяНачала,
	|	Хронометраж.ВремяОкончания КАК ВремяОкончания
	|ИЗ
	|	РегистрСведений.ХронометражРабочегоВремениПользователей КАК Хронометраж
	|ГДЕ
	|	Хронометраж.Пользователь = &ТекущийПользователь
	|	И Хронометраж.Объект = &Объект";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Исполнитель);
	Запрос.УстановитьПараметр("Объект", Объект);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ДатаНачалаХронометража = Выборка.ВремяНачала;
		ДатаКонцаХронометража = Выборка.ВремяОкончания;
	КонецЕсли;
	
КонецПроцедуры

// Заполнить параметры - ДатаНачалаХронометража и ВидРаботы  #ХронометражЗадач
Процедура ПолучитьПараметрыХронометража(Объект, ВключенХронометраж, ДатаНачалаХронометража, ДатаКонцаХронометража) Экспорт
	
	ДатаНачалаХронометража = '00010101000000';
	НайтиДатыХронометража(Объект, ДатаНачалаХронометража, ДатаКонцаХронометража);
	Если ДатаНачалаХронометража <> '00010101000000' И ДатаКонцаХронометража = '00010101000000' Тогда
		ВключенХронометраж = Истина;
	Иначе
		ВключенХронометраж = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

// Массив пользователей рабочей группы задачи
//
// Параметры:
//  РабочаяГруппа - ТаблицаЗначений:
//		* Пользователь - СправочникСсылка.ВнешниеПользователи, СправочникСсылка.ГруппыВнешнихПользователей, СправочникСсылка.ГруппыПользователей, СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Пользователи - массив пользователей рабочей группы задачи
//
Функция ПользователиРабочейГруппыЗадачи(РабочаяГруппа) Экспорт
	
	МассивРабочейГруппы = Новый Массив;
	
	// заполнение рабочей группы
    Для каждого ТекСтрока Из РабочаяГруппа Цикл
		
		Если ТипЗнч(ТекСтрока.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
			МассивРабочейГруппы.Добавить(ТекСтрока.Пользователь);
			
		ИначеЕсли ТипЗнч(ТекСтрока.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда	
			
			// получить список пользователей по группе
			МассивПользователейПоГруппе = СписокПользователейПоГруппе(ТекСтрока.Пользователь);
			
			Для каждого ТекСтрокаПользовательГруппы Из МассивПользователейПоГруппе Цикл
				
				МассивРабочейГруппы.Добавить(ТекСтрокаПользовательГруппы);
				
			КонецЦикла;
			
		Иначе
			
			// Без обработки.
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивРабочейГруппы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивРабочейГруппы);

	Возврат МассивРабочейГруппы;
	
КонецФункции // ПользователиРабочейГруппыЗадачи()


//////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЭЛЕКТРОННОЙ ПОЧТОЙ ЗАДАЧ

// Отправка уведомлений на электронную почту по задачам 
//
// Параметры:
//  ДанныеЗадачи  - Массив из ЗадачаСсылка.ЗадачиПользователя
//  ПараметрыУведомленияЗадач - Структура:
//		* ОтправитьИнициатору - Булево - отправлять инициатору и рабочей группе задачи
//		* ОтправитьИсполнителю - Булево
//		* ОтправитьНаEvernote - Булево
//		* ДобавлятьВложение - Булево
//  ПараметрыОбсуждения - Структура:
//		* ТекущееСообщение - СправочникСсылка.СообщенияОбсуждений
//		* ОтправитьОбсуждениеРабочейГруппе - Булево - отправка инициатору и рабочей группе
//		* ОтправитьОбсуждениеИсполнителю - Булево
//		* ОтправитьОбсуждениеПроизвольномуПользователю - СправочникСсылка.Пользователи
//		* ДобавлятьВложение - Булево
//		* ОтправитьДополнительноУведомлениеПоТелеграм - Булево - не обязательный параметр.
//
Процедура ОтправитьСообщениеПоЗадачамПользователямВыполнение(ДанныеЗадачи, ПараметрыУведомленияЗадач, ПараметрыОбсуждения = Неопределено) Экспорт  
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтправитьИнициатору  = ПараметрыУведомленияЗадач.ОтправитьИнициатору;
	ОтправитьИсполнителю = ПараметрыУведомленияЗадач.ОтправитьИсполнителю;
	ОтправитьНаEvernote  = ПараметрыУведомленияЗадач.ОтправитьНаEvernote;
	ДобавлятьВложение    = ПараметрыУведомленияЗадач.ДобавлятьВложение;
	ПользователиДляОтправкиВТелеграм = Новый Массив;
	
	ЭтоСообщениеОбсуждения = Ложь;
	Если ЗначениеЗаполнено(ПараметрыОбсуждения) Тогда
		
		ЭтоСообщениеОбсуждения = Истина;
		ОтправитьИнициатору = ПараметрыОбсуждения.ОтправитьОбсуждениеРабочейГруппе;
		ОтправитьИсполнителю = ПараметрыОбсуждения.ОтправитьОбсуждениеИсполнителю;
		
		// Проверка необходимость отправки уведомление кому-либо.
		Если (Не ОтправитьИнициатору) 
			И (Не ОтправитьИсполнителю) 
			И (Не ЗначениеЗаполнено(ПараметрыОбсуждения.ОтправитьОбсуждениеПроизвольномуПользователю)) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ТипЗнч(ДанныеЗадачи) = Тип("ЗадачаСсылка.ЗадачиПользователя") Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(ДанныеЗадачи);
	Иначе
		МассивЗадач = ДанныеЗадачи;
	КонецЕсли; 
	
	СистемнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Для каждого ЗадачаСсылка Из МассивЗадач Цикл
		
		Если ТипЗнч(ЗадачаСсылка) <> Тип("ЗадачаСсылка.ЗадачиПользователя") Тогда
			Продолжить;	
		КонецЕсли;
		
		ПараметрыПисьма = Новый Структура;
		
		АдресОтвета = СистемнаяУчетнаяЗапись.АдресЭлектроннойПочты;
		
		МассивАдресов = Новый Массив;
		
		Если ОтправитьИнициатору Тогда
			
			ТемаПисьма = СтрШаблон(НСтр("ru = 'RE: Запрос №%1: %2'"), Формат(ЗадачаСсылка.Номер, "ЧГ=0"), ЗадачаСсылка.Наименование);
			
			// Инициаторы и рабочая группа
			ПользователиРабочейГруппы = Новый Массив;
			МассивАдресов = ДополнитьМассивАдресовИнициаторамиИРабочейГруппойЗадачи(ЗадачаСсылка, МассивАдресов, Истина, Истина, ПользователиРабочейГруппы);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПользователиДляОтправкиВТелеграм, ПользователиРабочейГруппы);
			
			АдресОтветаАвтора = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗадачаСсылка.Инициатор, 
				УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));
			Если АдресОтветаАвтора <> "" Тогда
				АдресОтвета = АдресОтветаАвтора;
			КонецЕсли;
			
		КонецЕсли; // ОтправитьИнициатору
		
		Если ОтправитьИсполнителю Тогда
			
			МассивАдресов = ДополнитьМассивАдресовИсполнителямиЗадачи(ЗадачаСсылка, МассивАдресов);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПользователиДляОтправкиВТелеграм, ВсеИсполнителиЗадачи(ЗадачаСсылка));
			
			ТемаПисьма = СтрШаблон(НСтр("ru = 'Запрос №%1: %2'"), Формат(ЗадачаСсылка.Номер, "ЧГ=0"), ЗадачаСсылка.Наименование);
			
		КонецЕсли;
		
		// Формирование Evernote
		Если ОтправитьНаEvernote Тогда
			
			EmailEvernote = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"Evernote", "EmailEvernote", "");
				
			МассивАдресов.Добавить(EmailEvernote);	
		
			ХэшТегСтандартный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"Evernote", "ХэшТегСтандартный", "");
				
			БлокнотСтандартный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"Evernote", "БлокнотСтандартный", "");
				
			СтрокаБлокнотов = "";
			Если БлокнотСтандартный <> "" Тогда
				СтрокаБлокнотов = " @" + БлокнотСтандартный;
			КонецЕсли;
				
			СтрокаХэшТегов = ?(ХэшТегСтандартный = "", "", " " + ХэшТегСтандартный);
			Если Не ЗадачаСсылка.Проект.Пустая() Тогда
				НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаСсылка.Проект, "Организация.Наименование");
			 	СтрокаХэшТегов = СтрокаХэшТегов + ?(Не ЗначениеЗаполнено(НаименованиеОрганизации), "", " #" + НаименованиеОрганизации);
			 	СтрокаХэшТегов = СтрокаХэшТегов + " #" + ЗадачаСсылка.Проект.Наименование;
			КонецЕсли;
			
			ТемаПисьма = ЗадачаСсылка.Наименование + СтрокаБлокнотов + СтрокаХэшТегов;
				
		КонецЕсли; // ОтправитьНаEvernote
		
		// Массив адресатов должен быть уникальным
		МассивАдресов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивАдресов);
		ПользователиДляОтправкиВТелеграм = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПользователиДляОтправкиВТелеграм);
		
		Если ЭтоСообщениеОбсуждения Тогда
			
			// Формирование данных по обсуждению.
			ТемаПисьма = СтрШаблон(НСтр("ru = 'Новое сообщение: Запрос №%1: %2'"), Формат(ЗадачаСсылка.Номер, "ЧГ=0"), ЗадачаСсылка.Наименование);
			
			ТаблицаСообщенийДляФормированияПисьма = ТаблицаВеткиОбсуждения(ПараметрыОбсуждения.ТекущееСообщение);
			
			// Убрать из адресатов пользователя, который автор обращения.
			// А в случае, если произвольный адресат автор обращения, то система должна все равно принудительно на него отправлять уведомление.
			АвторСообщенияОбсуждения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбсуждения.ТекущееСообщение, "Автор");
			Если ЗначениеЗаполнено(АвторСообщенияОбсуждения) Тогда
				EmailАвтораСообщения = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(АвторСообщенияОбсуждения, 
					УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивАдресов, EmailАвтораСообщения);
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПользователиДляОтправкиВТелеграм, АвторСообщенияОбсуждения);
			КонецЕсли;
			
			Если ПараметрыОбсуждения.Свойство("ОтправитьОбсуждениеПроизвольномуПользователю") 
				И ЗначениеЗаполнено(ПараметрыОбсуждения.ОтправитьОбсуждениеПроизвольномуПользователю) Тогда
				// формирование адреса для произвольного пользователя
				Email = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПараметрыОбсуждения.ОтправитьОбсуждениеПроизвольномуПользователю, 
					УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));
				МассивАдресов.Добавить(Email);
				ПользователиДляОтправкиВТелеграм.Добавить(ПараметрыОбсуждения.ОтправитьОбсуждениеПроизвольномуПользователю);
			КонецЕсли;
			
			// Добавление вложений сообщения - присоединенные файлы.
			Если ПараметрыОбсуждения.Свойство("ДобавлятьВложение") 
				И ПараметрыОбсуждения.ДобавлятьВложение Тогда
				
				ДобавитьВложенияВПисьмо(ПараметрыОбсуждения.ТекущееСообщение, ПараметрыПисьма);
				
			КонецЕсли;
			
		Иначе
			
			ТаблицаСообщенийДляФормированияПисьма = Неопределено;
			
		КонецЕсли; // ЭтоСообщениеОбсуждения
		
		// Формирование списка адресов.
		СтрокаАдресов = СтрСоединить(МассивАдресов, ";");
		ПриведенныйПочтовыйАдрес = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СокрЛП(СтрокаАдресов));
		
		ПараметрыПисьма.Вставить("Кому", ПриведенныйПочтовыйАдрес);
		ПараметрыПисьма.Вставить("АдресОтвета", АдресОтвета);
		ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
		
		ТелоПисьма = УстановитьТекстHTMLПоля(ЗадачаСсылка, ПараметрыОбсуждения, ТаблицаСообщенийДляФормированияПисьма);
		
		ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
		ПараметрыПисьма.Вставить("ТипТекста", "HTML");
		
		// Добавление вложений задачи - присоединенные файлы.
		Если ДобавлятьВложение Тогда
			
			ДобавитьВложенияВПисьмо(ЗадачаСсылка, ПараметрыПисьма);
			
		КонецЕсли;
	
		Попытка 
			
			// Отправка почтового сообщения.
			ПодготовленноеПисьмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(СистемнаяУчетнаяЗапись, ПараметрыПисьма);
			РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(СистемнаяУчетнаяЗапись, ПодготовленноеПисьмо);
			
			Комментарий = СтрШаблон(НСтр("ru = 'Отправлено уведомление: %1.'"), Строка(Пользователи.ТекущийПользователь()));
			
			КтоУведомлен = "";
			Если ЭтоСообщениеОбсуждения Тогда
				КтоУведомлен = НСтр("ru = 'по сообщению обсуждения: '");
				Если ОтправитьИнициатору Тогда
					КтоУведомлен = КтоУведомлен + НСтр("ru = '#автор и рабочая группа'"); 	
				КонецЕсли;
				Если ОтправитьИсполнителю Тогда
					КтоУведомлен = КтоУведомлен + НСтр("ru = '#исполнитель задачи'"); 	
				КонецЕсли;
				Если ПараметрыОбсуждения.Свойство("ОтправитьОбсуждениеПроизвольномуПользователю") 
					И ЗначениеЗаполнено(ПараметрыОбсуждения.ОтправитьОбсуждениеПроизвольномуПользователю) Тогда
					КтоУведомлен = КтоУведомлен + НСтр("ru = '#произвольный пользователь'"); 	
				КонецЕсли;
			ИначеЕсли ОтправитьИнициатору Тогда
				КтоУведомлен = НСтр("ru = 'автор и рабочая группа'"); 	
			ИначеЕсли ОтправитьНаEvernote Тогда
				КтоУведомлен = НСтр("ru = 'текущий пользователь'");
			Иначе
				КтоУведомлен = НСтр("ru = 'исполнитель'");
			КонецЕсли;
			
			Комментарий = Комментарий + СтрШаблон(НСтр("ru = 'Уведомлен(ы) %1: %2'"), КтоУведомлен, СтрокаАдресов);
			
			ИсторияСобытийЗадачВызовСервера.ЗаписатьСобытие(
				ЗадачаСсылка, 
				Перечисления.ВидыСобытийЗадач.ОтправленоУведомление, 
				Комментарий);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Задачи пользователя: уведомление о задаче'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,,,
				СтрШаблон(
				НСтр("ru = 'Ошибка при отправке информации о задаче: %1'"),  
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			Возврат;
			
		КонецПопытки;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьТелеграм") Тогда
			
			Если Не ЭтоСообщениеОбсуждения Тогда
				Продолжить;	
			КонецЕсли;
				
			Если ПараметрыОбсуждения.Свойство("ОтправитьДополнительноУведомлениеПоТелеграм") 
				И Не ПараметрыОбсуждения.ОтправитьДополнительноУведомлениеПоТелеграм Тогда
				// не отправлять сообщение по Телеграм
				Продолжить;
			КонецЕсли;
			
			БотТелеграм = Справочники.ТелеграмБоты.БотДляОтправкиСообщенийЗадачПоУмолчанию();
			
			Для каждого ТекПользователь Из ПользователиДляОтправкиВТелеграм Цикл
				
				РеквизитыТекущегоСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбсуждения.ТекущееСообщение, "ТекстСообщения, Автор");
				
				ТекстСообщенияТелеграм = НСтр("ru = '[Новое сообщение по задаче ""%1"" от %2]
                                           |%3'");
				
				ТекстСообщенияТелеграм = СтрШаблон(ТекстСообщенияТелеграм, ЗадачаСсылка, ТекПользователь, РеквизитыТекущегоСообщения.ТекстСообщения);
				
				// Отправка сообщения в Телеграм.
				ТелеграмСервер.ОтправитьСообщениеПользователю(БотТелеграм, ТекПользователь, ТекстСообщенияТелеграм, РеквизитыТекущегоСообщения.Автор);
			
			КонецЦикла;
		
		КонецЕсли;		
			
	КонецЦикла;
	
КонецПроцедуры

// Отправка произвольного универсального сообщения массиву адресатов
//
// Параметры:
//  МассивАдресовОтправки  - Массив - массив строк адресов отправки
//  ТемаПисьма  - Строка
//  МассивСтруктурСообщения  - Массив - содержит структуры со свойствами:
//		* ТипБлока - Строка - подзаголовок текста
//		* ТекстБлока - Строка - описание блока текста
//  Важность  - Строка - возможные варианты: Обычная, Высокая, Низкая 
//
Процедура ОтправитьПроизвольноеСообщение(МассивАдресовОтправки, ТемаПисьма, МассивСтруктурСообщения, Важность = "Обычная") Экспорт 
	// Структура в массиве параметра МассивСтруктурСообщения: ТипБлока (строка), ТекстБлока (строка)
	
	МассивАдресовОтправки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивАдресовОтправки);
	
	ПараметрыПисьма = Новый Структура;
	
	СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	СтрокаАдресов = "";	
	Для каждого ТекСтрока Из МассивАдресовОтправки Цикл
		СтрокаАдресов = СтрокаАдресов + ТекСтрока + ", ";
	КонецЦикла;
	
	ПриведенныйПочтовыйАдрес = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СокрЛП(СтрокаАдресов));
	
	ПараметрыПисьма.Вставить("Кому", ПриведенныйПочтовыйАдрес);
	
	ПараметрыПисьма.Вставить("АдресОтвета", СистемнаяУчетнаяЗапись.АдресЭлектроннойПочты);
	
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	
	ТелоПисьма = УстановитьТекстHTMLПоляПроизвольный(МассивСтруктурСообщения);
	
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	ПараметрыПисьма.Вставить("ТипТекста", "HTML");
	
	Если Важность = "Высокая" Тогда
		ПараметрыПисьма.Вставить("Важность", ВажностьИнтернетПочтовогоСообщения.Высокая);
	КонецЕсли;
	
	Попытка 
		ПодготовленноеПисьмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(СистемнаяУчетнаяЗапись, ПараметрыПисьма);
		РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(СистемнаяУчетнаяЗапись, ПодготовленноеПисьмо);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка произвольного сообщения'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
			   НСтр("ru = 'Ошибка при отправке информации о задаче: %1'"), 
			   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Функция создает блок текста в HTML-формате.
// Созданный блок представляет собой некие сведения,
// которые озаглавлены строкой текста и могут содержать как строковое описание для чтения,
// так и сведения об объекте, переход к которому будет осуществлен по гиперссылке.
// Набор создаваемых блоков используется для отображения детализации.
//
// Параметры:
//	ЗаголовокБлока - строка с заглавием блока (только строка);
//	Содержимое     - собственно содержимое: текст, либо объект для открытия по гиперссылке;
//	ШрифтФейс      - название шрифта, которым будет отображен блок;
//	ШрифтСайз      - размер шрифта
//
// Возвращаемое значение:
//   Строка   - html-вставка блока текста
//
Функция СформироватьHTMLБлок(ЗаголовокБлока, Содержимое, ШрифтФейс = "Verdana", ШрифтСайз = "2", НаОднойСтроке = Ложь) Экспорт
	
	БлокТекст = "<table><tr><td><b><font face=" + ШрифтФейс + " size=" + ШрифтСайз + ">" + ЗаголовокБлока + "</font></b></td></tr></table>";
	
	БлокТекст = БлокТекст + "
		|<table border=""0"">
		|<tr><td>&nbsp;&nbsp;</td>
		|<td><font face=" + ШрифтФейс + " size=" + ШрифтСайз + ">" 
			+ ?(ТипЗнч(Содержимое) = Тип("Строка"), СтрЗаменить(Содержимое, Символы.ПС, "<br>"), "<a id=" + ЗначениеВСтрокуВнутр(Содержимое) + " href=about:blank>" + Строка(Содержимое) + "</a>") + "</font></td>
		|<td>&nbsp;</td>
		|</table></div>";
		
	Если ТипЗнч(Содержимое) = Тип("СправочникСсылка.Пользователи") Тогда
		// вычисляем email пользователя
		АдресEmail = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Содержимое, 
			УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));
	    БлокТекст = СтрЗаменить(БлокТекст, " href=about:blank", " href=mailto:" + АдресEmail);
	КонецЕсли;
		
	Если НаОднойСтроке Тогда
		 БлокТекст = "<tr><td><b><font face=" + ШрифтФейс + " size=" + ШрифтСайз + ">" + ЗаголовокБлока + "</font></b>" + Содержимое + "</td></tr><br>";
	КонецЕсли;	
		
	Возврат БлокТекст;
	
КонецФункции

// Процедура формирует тело письма Задачи в HTML-формате и устанавливает его текстом HTML-поля
//
// Параметры:
//  ЗадачаСсылка							 - ЗадачаСсылка.ЗадачиПользователя/ЗадачаОбъект.ЗадачиПользователя 
//  ПараметрыОбсуждения						 - Структура - см. описание ОтправитьСообщениеПоЗадачамПользователямВыполнение()
//  ТаблицаСообщенийДляФормированияПисьма	 - ТаблицаЗначений - см. описание ТаблицаВеткиОбсуждения() 
// 
// Возвращаемое значение:
//  Строка - html тела письма
//
Функция УстановитьТекстHTMLПоля(ЗадачаСсылка, ПараметрыОбсуждения = Неопределено, ТаблицаСообщенийДляФормированияПисьма = Неопределено) Экспорт
	
	ТекстПоля = "
	|<HTML>
	|<HEAD>
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|</HEAD>
	|<BODY>";
	
	
	// Формирование ссылки ответа на письмо.
	УстановитьТекстHTMLСсылкиОтвета(ТекстПоля, ЗадачаСсылка, ПараметрыОбсуждения, ТаблицаСообщенийДляФормированияПисьма);
	
	ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Номер запроса:'"), Формат(ЗадачаСсылка.Номер, "ЧГ=0"),,, Ложь);
	
	ТекстПериодаЗадачи = СтрШаблон(НСтр("ru = '%1 по %2'"), Формат(ЗадачаСсылка.ДатаНачала, "ДФ=dd.MM.yyyy"), 
		Формат(ЗадачаСсылка.СрокИсполнения, "ДФ=dd.MM.yyyy"));        
	
	ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Дата и срок задачи:'"), ТекстПериодаЗадачи,,, Ложь);
	
	ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Важность: '"), ОпределитьВажностьHTML(ЗадачаСсылка.Важность),,, Истина);
	
	Если ЗадачаСсылка.Оповещение Тогда
		ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Оповещение:'"), Формат(ЗадачаСсылка.СрокОповещения, "ДФ=""дддд ',' дд ММММ гггг 'г.' ЧЧ:мм"""));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСсылка.Проект) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗадач")
			И ЗначениеЗаполнено(ЗадачаСсылка.ВидЗадачи) Тогда
			
			// доп. информация по виду задачи
			ТекстПроектВидЗадачи = СтрШаблон(НСтр("ru = '%1 [%2]'"), ЗадачаСсылка.Проект, ЗадачаСсылка.ВидЗадачи);  
			
			ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Проект:'"), ТекстПроектВидЗадачи);
			
		Иначе
			
			ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Проект:'"), ЗадачаСсылка.Проект);
		
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Исполнитель задачи:'"), 
		?(ЗначениеЗаполнено(ЗадачаСсылка.Исполнитель), ЗадачаСсылка.Исполнитель, ЗадачаСсылка.РольИсполнителя));
	
	Если СтрДлина(ЗадачаСсылка.Наименование) > 0 Тогда
		ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Запрос:'"), ЗадачаСсылка.Наименование);
	КонецЕсли;
	
	Если СтрДлина(ЗадачаСсылка.Описание) > 0 Тогда
		ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Детальное описание:'"), СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ЗадачаСсылка.Описание));
	КонецЕсли;
	
	Если СтрДлина(ЗадачаСсылка.Ответ) > 0 Тогда
		ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Результат:'"), СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ЗадачаСсылка.Ответ));
	КонецЕсли;
	
	ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Состояние: '"), ОпределитьСостояниеHTML(ЗадачаСсылка),,, Истина);
	
	Если ЗадачаСсылка.Трудоемкость > 0 Тогда
		ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Трудоемкость (часов): '"), ЗадачаСсылка.Трудоемкость,, 2, Истина);
	КонецЕсли;
	
	ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Получатель услуг:'"), ЗадачаСсылка.ПолучательУслуг);
	
	Если ЗначениеЗаполнено(ЗадачаСсылка.Основание) Тогда
		ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Основание запроса:'"), ЗадачаСсылка.Основание);
	КонецЕсли;
	
	АдресСсылки = ПолучитьНавигационнуюСсылку(ЗадачаСсылка);
	ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Ссылка на задачу: '"), "<font color=gray size=1>" + АдресСсылки + "</font>" ,, 1, Истина);
	
	ТекстПоля = ТекстПоля + "</BODY></HTML>";
	
	Возврат ТекстПоля;
	
КонецФункции

// Формирование цветной строки HTML по типу важности
//
// Параметры:
//  Важность  - ПеречислениеСсылка.ВариантыВажностиЗадачи
//
// Возвращаемое значение:
//   Строка   - цветная строка HTML
//
Функция ОпределитьВажностьHTML(Важность) Экспорт
	
	Если Важность = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
		Возврат "<font color=red size=2>" + Важность + "</font>";	
	ИначеЕсли Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
		Возврат	 "<font color=gray size=2>" + Важность + "</font>";
	Иначе
		Возврат "<font color=green size=2>" + Перечисления.ВариантыВажностиЗадачи.Обычная + "</font>";
	КонецЕсли;
	
	Возврат "";

КонецФункции // ОпределитьВажностьHTML()

// Возвращает состояние HTML
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачиПользователя
// 
// Возвращаемое значение:
//   Строка - оформленная в HTML строка
//
Функция ОпределитьСостояниеHTML(Задача) Экспорт
	
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат "";
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Выполнена, ОтмененаЗадача, ПроцентЗавершения, ПринятаКИсполнению");
	ИнформацияПоСостояниюЗадачи = РегистрыСведений.ТекущиеСостоянияЗадач.ДанныеПоТекущемуСостояниюЗадачи(Задача);
	
	Если РеквизитыЗадачи.Выполнена 
		И (Не РеквизитыЗадачи.ОтмененаЗадача) Тогда
		Возврат "<font color=green size=3>" + "Выполнена" + "</font>";	
	ИначеЕсли РеквизитыЗадачи.ОтмененаЗадача Тогда
		Возврат	 "<font color=red size=3>" + "Отменена" + "</font>";
	ИначеЕсли ИнформацияПоСостояниюЗадачи.Состояние = Справочники.СостоянияЗадач.НаБизнесТестировании Тогда
		Возврат "<font color=teal size=3>" + ИнформацияПоСостояниюЗадачи.Состояние + "</font>";
	Иначе
		Возврат "<font color=gray size=3>" + ИнформацияПоСостояниюЗадачи.Состояние + "</font>";
	КонецЕсли;
	
	Возврат "";

КонецФункции // ОпределитьСостояниеHTML()

// Добавление структуры типа блока и текста блока в массив.
// Данные массива используются в дальнейшем для универсальной отправки сообщений (см. процедуру РаботаСЗадачами.ОтправитьПроизвольноеСообщение)
//
// Параметры:
//  МассивСтруктурСообщения  - Массив - заполняемый массив, содержит структуры со свойствами:
//		* ТипБлока - Строка - подзаголовок текста
//		* ТекстБлока - Строка - описание блока текста
//  ТипБлока  - Строка - параметр заполнения типа блока
//  ТекстБлока  - Строка - параметр заполнения текста блока
//
Процедура ДобавитьСтруктуруВМассивСтруктурСообщения(МассивСтруктурСообщения, ТипБлока, ТекстБлока) Экспорт

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТипБлока", ТипБлока);
	СтруктураДанных.Вставить("ТекстБлока", ТекстБлока);
	
	МассивСтруктурСообщения.Добавить(СтруктураДанных);
	
КонецПроцедуры

// Возвращает список пользователей по группе
//
// Параметры:
//  ГруппаПользователей - СправочникСсылка.ГруппыПользователей
// 
// Возвращаемое значение:
//  Массив - Массив СправочникСсылка.Пользователи
//
Функция СписокПользователейПоГруппе(ГруппаПользователей) Экспорт

	Если Не ЗначениеЗаполнено(ГруппаПользователей) Тогда
		 Возврат Новый Массив; 
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователейСостав.Пользователь КАК Пользователь
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	ГруппыПользователейСостав.Ссылка = &Ссылка
	               |	И НЕ ГруппыПользователейСостав.Пользователь.Недействителен
	               |	И НЕ ГруппыПользователейСостав.Пользователь.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ГруппыПользователейСостав.Пользователь.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", ГруппаПользователей);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Возврат Выборка.ВыгрузитьКолонку("Пользователь");	
	
КонецФункции // ПолучитьСписокПользователейПоГруппе()

// Возвращает список групп пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи 
// 
// Возвращаемое значение:
//   Массив - Массив ссылок СправочникСсылка.ГруппыПользователей 
//
Функция ПолучитьСписокГруппПользователя(Пользователь) Экспорт

	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		 Возврат Новый Массив; 
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователейСостав.Ссылка КАК ГруппаПользователя
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	НЕ ГруппыПользователейСостав.Пользователь.ПометкаУдаления
	               |	И ГруппыПользователейСостав.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Возврат Выборка.ВыгрузитьКолонку("ГруппаПользователя");	
	
КонецФункции // ПолучитьСписокГруппПользователя()

// Добавление вложения в параметры письма, на основе владельца присоединенных файлов
//
// Параметры:
//  ОбъектВладелецПрисоединенныхФайлов
//  ПараметрыПисьма  - Структура - в случае наличия присоединенных файлов будет добавлен ключ "Вложения" с типом "Соответствие"
//	ФормироватьВложениеКакСписокЗначений - Булево - если Истина, то будет формироваться список значений
//
Процедура ДобавитьВложенияВПисьмо(ОбъектВладелецПрисоединенныхФайлов, ПараметрыПисьма, ФормироватьВложениеКакСписокЗначений = Ложь) Экспорт

	ХранимыеФайлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ОбъектВладелецПрисоединенныхФайлов, ХранимыеФайлы);
	
	Если ХранимыеФайлы.Количество() > 0 Тогда
		
		Вложения = Новый Соответствие;
		ВложенияСписокЗначений = Новый СписокЗначений;
		
		Для каждого ТекФайл Из ХранимыеФайлы Цикл
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ТекФайл);
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекФайл, "ПометкаУдаления") = Истина Тогда
				// Игнорировать помеченные на удаление.
				Продолжить;
			КонецЕсли;
			
			ИмяФайла = СтрШаблон(НСтр("ru = '%1.%2'"), ДанныеФайла.Наименование, ДанныеФайла.Расширение); 
			
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			
			Вложения.Вставить(ИмяФайла, ДвоичныеДанные);
			ВложенияСписокЗначений.Добавить(ДвоичныеДанные, ИмяФайла);
			
		КонецЦикла;
		
		Если ФормироватьВложениеКакСписокЗначений Тогда
			ПараметрыПисьма.Вставить("Вложения", ВложенияСписокЗначений);
		Иначе	
			ПараметрыПисьма.Вставить("Вложения", Вложения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - возвращает массив адресов исполнителями задачи
//
// Параметры:
//  РеквизитыЗадачи	 - ЗадачаСсылка.ЗадачиПользователя - задача, из которой необходимо получить адресатов 
//	МассивАдресов - Массив - ранее заполненный Массив строк электронных адресов
// 
// Возвращаемое значение:
//   Массив - Строка - email исполнителей (из роли множество адресов исполнителей)
//
Функция ДополнитьМассивАдресовИсполнителямиЗадачи(РеквизитыЗадачи, Знач МассивАдресов) Экспорт
	
	МассивАдресовНовый = Новый Массив;
	
	МассивИсполнителей = ВсеИсполнителиЗадачи(РеквизитыЗадачи);
	
	Для каждого ТекИсполнитель Из МассивИсполнителей Цикл
	
		EmailИсполнителя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекИсполнитель, 
			УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));
		МассивАдресовНовый.Добавить(EmailИсполнителя);
	
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивАдресов, МассивАдресовНовый, Истина);
	
	Возврат МассивАдресов; 

КонецФункции

// Функция - возвращает список адресов автора и рабочей группы задачи пользователя
//
// Параметры:
//  РеквизитыЗадачи  - ЗадачаСсылка.ЗадачиПользователя - задача, из которой необходимо получить адресатов
//	МассивАдресов - Массив - ранее заполненный Массив строк электронных адресов
//	ТолькоИнициатора - Булево
//	ТолькоРабочейГруппы - Булево
//
// Возвращаемое значение:
//   Массив - Строка - email автора или рабочей группы
//
Функция ДополнитьМассивАдресовИнициаторамиИРабочейГруппойЗадачи(РеквизитыЗадачи, Знач МассивАдресов, ТолькоИнициатора = Истина, 
		ТолькоРабочейГруппы = Истина, СписокСформированныхПользователей = Неопределено) Экспорт

	МассивАдресовНовый = Новый Массив;
	
	СписокСформированныхПользователей = Новый Массив;
	
	Если ТолькоИнициатора Тогда
	
		EmailИнициатора = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыЗадачи.Инициатор, 
			УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));
		МассивАдресовНовый.Добавить(EmailИнициатора);
		
		EmailПолучателяУслуг = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыЗадачи.ПолучательУслуг, 
			УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));
		МассивАдресовНовый.Добавить(EmailПолучателяУслуг);
		
	КонецЕсли;
	
	// заполнение рабочей группы
	Если ТолькоРабочейГруппы Тогда
	
		Для каждого ТекСтрока Из РеквизитыЗадачи.РабочаяГруппа Цикл
			
			Если ТипЗнч(ТекСтрока.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Email = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекСтрока.Пользователь,
					УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));	
				Если Email <> "" 
					И МассивАдресовНовый.Найти(Email) = Неопределено Тогда
					
					МассивАдресовНовый.Добавить(Email);
					
				КонецЕсли;
				
				СписокСформированныхПользователей.Добавить(ТекСтрока.Пользователь);
				
			ИначеЕсли ТипЗнч(ТекСтрока.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда	
				
				// получить список пользователей по группе
				МассивПользователейПоГруппе = СписокПользователейПоГруппе(ТекСтрока.Пользователь);
				
				Для каждого ТекСтрокаПользовательГруппы Из МассивПользователейПоГруппе Цикл
					
					Email = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекСтрокаПользовательГруппы, 
						УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));	
						
					Если Email <> "" 
						И МассивАдресовНовый.Найти(Email) = Неопределено Тогда
						
						МассивАдресовНовый.Добавить(Email);
						
					КонецЕсли;
					
					СписокСформированныхПользователей.Добавить(ТекСтрокаПользовательГруппы);
					
				КонецЦикла;
				
			Иначе
				
				// Без обработки.
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивАдресов, МассивАдресовНовый, Истина);
	
	Возврат МассивАдресов;
	
КонецФункции // МассивЭлектронныхАдресовИнициатораИРабочейГруппы()

//////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФАЙЛАМИ ЗАДАЧ

// Функция возвращает данные задачи и статистику по файлам/общениям
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачиПользователя
//
// Возвращаемое значение:
//	 Структура - состоит из свойств:
//		* ТекущаяЗадача - ЗадачаСсылка.ЗадачиПользователя
//		* ТекущийПроект - СправочникСсылка.Проекты
//		* ТекущееНаименование - Строка
//		* ТекущийПериодЗадачи - Строка - строка вида "Задача №%1 с %2 по %3"
//		* ТекущееОписание - Строка
//		* ТекущийРезультат - Строка
//		* ТекущийАвтор - СправочникСсылка.Пользователи
//		* ТекущаяТрудоемкость - Число
//		* ТекущаяРабочаяГруппа - Строка - рабочай группа строкой
//		* КоличествоФайлов - Число 
//		* КоличествоОбсуждений - Число
//
Функция ДанныеЗадачи(ЗадачаСсылка) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТекущаяЗадача", ЗадачаСсылка);
	СтруктураДанных.Вставить("ТекущийПроект");
	СтруктураДанных.Вставить("ТекущееНаименование", "");
	СтруктураДанных.Вставить("ТекущийПериодЗадачи", "");
	СтруктураДанных.Вставить("ТекущееОписание", "");
	СтруктураДанных.Вставить("ТекущийРезультат");
	СтруктураДанных.Вставить("ТекущийАвтор");
	СтруктураДанных.Вставить("ТекущийИнициатор");
	СтруктураДанных.Вставить("ТекущийИсполнитель");
	СтруктураДанных.Вставить("ТекущаяТрудоемкость", 0);
	СтруктураДанных.Вставить("ТекущаяРабочаяГруппа", "");
	СтруктураДанных.Вставить("КоличествоФайлов", 0);
	СтруктураДанных.Вставить("КоличествоОбсуждений", 0);
	СтруктураДанных.Вставить("СостояниеЗадачи", 0);
	СтруктураДанных.Вставить("АдресРабочаяГруппа", 0);
	СтруктураДанных.Вставить("АдресТаблицыНастройкиДоступности", "");
	
	Если ЗадачаСсылка.Пустая() Тогда
		Возврат СтруктураДанных;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПользователя.Ссылка КАК ТекущаяЗадача,
	|	ЗадачиПользователя.Проект КАК ТекущийПроект,
	|	ЗадачиПользователя.Наименование КАК ТекущееНаименование,
	|	ЗадачиПользователя.Описание КАК ТекущееОписание,
	|	ЗадачиПользователя.Ответ КАК ТекущийРезультат,
	|	ЗадачиПользователя.Инициатор КАК ТекущийАвтор,
	|	ЗадачиПользователя.ПолучательУслуг КАК ТекущийИнициатор,
	|	ЗадачиПользователя.Исполнитель КАК ТекущийИсполнитель,
	|	ЗадачиПользователя.Трудоемкость КАК ТекущаяТрудоемкость,
	|	ЗадачиПользователя.РабочаяГруппаСтрока КАК ТекущаяРабочаяГруппа,
	|	ЗадачиПользователя.Номер КАК Номер,
	|	ЗадачиПользователя.ДатаНачала КАК ДатаНачала,
	|	ЗадачиПользователя.СрокИсполнения КАК СрокИсполнения,
	|	ЕСТЬNULL(ТекущиеСостоянияЗадач.Состояние, ЗНАЧЕНИЕ(Справочник.СостоянияЗадач.ПустаяСсылка)) КАК СостояниеЗадачи,
	|	ЗадачиПользователя.РабочаяГруппа.(
	|		НомерСтроки КАК НомерСтроки,
	|		Пользователь КАК Пользователь
	|	) КАК РабочаяГруппаВыборка
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияЗадач КАК ТекущиеСостоянияЗадач
	|		ПО (ТекущиеСостоянияЗадач.Задача = ЗадачиПользователя.Ссылка)
	|ГДЕ
	|	ЗадачиПользователя.Ссылка = &Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Файлы"" КАК Данные,
	|	СУММА(1) КАК КоличествоВсего
	|ИЗ
	|	Справочник.ЗадачиПользователяПрисоединенныеФайлы КАК ЗадачиПользователяПрисоединенныеФайлы
	|ГДЕ
	|	ЗадачиПользователяПрисоединенныеФайлы.ВладелецФайла = &Задача
	|	И НЕ ЗадачиПользователяПрисоединенныеФайлы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Обсуждение"",
	|	СУММА(1)
	|ИЗ
	|	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
	|ГДЕ
	|	СообщенияОбсуждений.ВладелецСообщения.Документ = &Задача
	|	И НЕ СообщенияОбсуждений.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Задача" , ЗадачаСсылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Заполнение реквизитами задачи.
	ВыборкаДанныхЗадачи = РезультатЗапроса[0].Выбрать();
	Если ВыборкаДанныхЗадачи.Следующий() Тогда
	
		 ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаДанныхЗадачи);
		 
		 СтруктураДанных.ТекущийПериодЗадачи = СтрШаблон(НСтр("ru = 'Задача №%1 с %2 по %3'"),
		 	ВыборкаДанныхЗадачи.Номер, ВыборкаДанныхЗадачи.ДатаНачала, ВыборкаДанныхЗадачи.СрокИсполнения);        
		 
		// #НастройкиДоступностиПоСостояниюЗадачи
		СтруктураДанных.АдресРабочаяГруппа = ПоместитьВоВременноеХранилище(ВыборкаДанныхЗадачи.РабочаяГруппаВыборка.Выгрузить());
		ТаблицаНастроекДоступности = РаботаСЗадачамиПовтИсп.НастройкиДоступностиФормыЗадачи(СтруктураДанных, "СтруктураДанныхЗадачиИзФормыСписка");
		СтруктураДанных.АдресТаблицыНастройкиДоступности = ПоместитьВоВременноеХранилище(ТаблицаНастроекДоступности);
		
	КонецЕсли;
	
	// Заполнение статистики данных задачи.
	ТаблицаДанныхСтатистики = РезультатЗапроса[1].Выгрузить();
	
	Для каждого ТекСтрока Из ТаблицаДанныхСтатистики Цикл
		
		Если ТекСтрока.КоличествоВсего = Null Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Данные = "Файлы" 
			И ЗначениеЗаполнено(ТекСтрока.КоличествоВсего) Тогда
			СтруктураДанных.КоличествоФайлов = ТекСтрока.КоличествоВсего;
		ИначеЕсли ТекСтрока.Данные = "Обсуждение" Тогда
			СтруктураДанных.КоличествоОбсуждений = ТекСтрока.КоличествоВсего;
		Иначе
			// Без обработки
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураДанных;

КонецФункции // КоличествоДанныхЗадачи()

#Область ДляВызоваИзДругихПодсистем

// Вызывается из регламентного задания для отправки серверного оповещения клиентским сеансам.
// Смотри также СтандартныеПодсистемыКлиент.ПриПолученииСерверногоОповещения.
//
// Вызов выполняется в привилегированном режиме с учетом истечения периода, указанного для оповещения.
// Смотри ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений.
//
// Параметры:
//  ИмяОповещения - Строка - смотри СерверныеОповещения.НовоеСерверноеОповещение.Имя
//  ВариантыПараметров - Массив из Структура:
//   * Параметры - Произвольный - смотри СерверныеОповещения.НовоеСерверноеОповещение.Параметры
//   * Адресаты - Соответствие из КлючИЗначение:
//      ** Ключ - УникальныйИдентификатор - идентификатор пользователя ИБ
//      ** Значение - Массив из см. СерверныеОповещения.КлючСеанса
//
// Пример:
//	Если ИмяОповещения <> "СтандартныеПодсистемы.ЗавершениеРаботыПользователей.БлокировкаСеансов" Тогда
//		Возврат;
//	КонецЕсли;
//	ПараметрыБлокировкиСеансов = ПараметрыБлокировкиСеансов(Истина);
//	Если ПараметрыБлокировкиСеансов.Установлена Тогда
//		СерверныеОповещения.ОтправитьСерверноеОповещение(ИмяОповещения,
//			ПараметрыБлокировкиСеансов, Неопределено);
//	КонецЕсли;
//
Процедура ПриОтправкеСерверногоОповещения(ИмяОповещения, ВариантыПараметров) Экспорт

	Если ИмяОповещения = "УчетЗадачПользователей.ПроверитьЗадачиБезОценки" Тогда
		
		Если ВариантыПараметров.Количество() > 0 Тогда
			
			Для каждого ТекАдресат Из ВариантыПараметров[0].Адресаты Цикл
				
				Пользователь = Неопределено;
				ПользователиСлужебный.ПользовательПоИдентификаторуСуществует(ТекАдресат.Ключ,, Пользователь);
				
				КолВоЗадачНаОценку = 0;
				ЕстьЗадачиБезОценкиПользователя(Пользователь, КолВоЗадачНаОценку);
				
				Если КолВоЗадачНаОценку > 0 Тогда
				
					НовыеАдресаты = Новый Соответствие;
                	НовыеАдресаты.Вставить(ТекАдресат.Ключ, ТекАдресат.Значение);
				
					СерверныеОповещения.ОтправитьСерверноеОповещение(ИмяОповещения, КолВоЗадачНаОценку, ТекАдресат);
				
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу сообщений необходимую для формирования тела письма
//
// Параметры:
//  СообщениеОбсуждения  - СправочникСсылка.СообщенияОбсуждений
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица с данными:
//		* ПользовательСообщения - СправочникСсылка.Пользователи
//		* ТекстСообщения - Строка
//		* ДатаСообщения - Дата
//		* СсылкаНаСообщение - СправочникСсылка.СообщенияОбсуждений
//
Функция ТаблицаВеткиОбсуждения(СообщениеОбсуждения)
	
	ГоловноеСообщение = СообщениеОбсуждения;
	Пока ЗначениеЗаполнено(ГоловноеСообщение.Родитель) Цикл
		  ГоловноеСообщение = ГоловноеСообщение.Родитель; 
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СообщенияОбсуждений.Ссылка КАК Ссылка,
	               |	СообщенияОбсуждений.Автор КАК Автор,
	               |	СообщенияОбсуждений.ТекстСообщения КАК ТекстСообщения,
	               |	СообщенияОбсуждений.ДатаСоздания КАК ДатаСоздания
	               |ИЗ
	               |	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
	               |ГДЕ
	               |	СообщенияОбсуждений.Ссылка В ИЕРАРХИИ(&Ссылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаСоздания УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", ГоловноеСообщение);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();

КонецФункции // ТаблицаВеткиОбсуждения()

Функция ТекстВHTML(Текст)
	
	Возврат ОбщегоНазначенияКупоросСервер.ТекстВHTML(Текст);
	
КонецФункции

Функция ЭлектронныйАдресУчетнойЗаписиВходящихЭлектронныхПисем()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка,
	               |	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	               |ИЗ
	               |	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	               |ГДЕ
	               |	НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
	               |	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляЗагрузкиВходящихЭлектронныхПисем
	               |	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.АдресЭлектроннойПочты;
	
	КонецЕсли;
		
	Возврат "";
	
КонецФункции // УчетнаяЗаписьВходящихЭлектронныхПисемЗадачи()

Функция ВсеИсполнителиЗадачи(РеквизитыЗадачи)

	МассивИсполнителей = Новый Массив;
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) Тогда
		
		МассивИсполнителей.Добавить(РеквизитыЗадачи.Исполнитель);
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.РольИсполнителя) Тогда
		
		ИсполнителиПоРоли = ВыбратьИсполнителейЗадачПоРоли(РеквизитыЗадачи.Ссылка);
		Для каждого ТекИсполнитель Из ИсполнителиПоРоли Цикл
			
			МассивИсполнителей.Добавить(ТекИсполнитель.Исполнитель);
			
		КонецЦикла;
		
	Иначе
		
		// Без обработки.
		
	КонецЕсли;
	
	Возврат МассивИсполнителей;

КонецФункции // ВсеИсполнителиЗадач()

Функция ВыбратьИсполнителейЗадачПоРоли(Знач Задача)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
				  |	ИсполнителиЗадач.Исполнитель КАК Исполнитель
				  |ИЗ
				  |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
				  |ГДЕ
				  |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
				  |	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
				  |	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";
				  
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("РольИсполнителя", Задача.РольИсполнителя);
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", Задача.ОсновнойОбъектАдресации);
	Запрос.Параметры.Вставить("ДополнительныйОбъектАдресации", Задача.ДополнительныйОбъектАдресации);
	
	Исполнители = Запрос.Выполнить().Выгрузить();
	Возврат Исполнители;
	
КонецФункции

// В форме инициализирует параметры в ПриСозданииНаСервере #ХронометражЗадач
Процедура ПроинициализироватьПараметрыХронометража(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Ссылка,
	КомандаПереключитьХронометраж,
	ЭлементПереключитьХронометраж) Экспорт
	
	ДатаНачалаХронометража = '00010101';
	ДатаКонцаХронометража = '00010101';
	ВключенХронометраж = Ложь;
	
	ПолучитьПараметрыХронометража(Ссылка, ВключенХронометраж, ДатаНачалаХронометража, ДатаКонцаХронометража);

	УстановитьСвойстваЭлементовХронометража(ВключенХронометраж, КомандаПереключитьХронометраж, ЭлементПереключитьХронометраж);
	
КонецПроцедуры

Функция УстановитьТекстHTMLПоляПроизвольный(МассивСтруктурСообщения)
	// Структура в массиве параметра МассивСтруктурСообщения: ТипБлока (строка), ТекстБлока (строка)
	
	ТекстПоля = "
	|<HTML>
	|<HEAD>
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|</HEAD>
	|<BODY>";
	
	Для каждого ТекСтрока Из МассивСтруктурСообщения Цикл
	
		 ТекстПоля = ТекстПоля + СформироватьHTMLБлок(ТекСтрока.ТипБлока, ТекСтрока.ТекстБлока);
	
	КонецЦикла;
	
	ТекстПоля = ТекстПоля + "</BODY></HTML>";
	
	Возврат ТекстПоля;
	
КонецФункции

Функция УстановитьТекстHTMLПоляПервогоСообщения(ТаблицаСообщенийДляФормированияПисьма, ТекстHTML_Ответа)

	Текст = "<Table>";
	
	ЭлементПервый = ТаблицаСообщенийДляФормированияПисьма[0];
	Текст = Текст + "<TR><TD valign=top>";
	
	ВремяСообщения = ЭлементПервый.ДатаСоздания;
	ТекстВремя = "<font face=Arial size=1 color=#a6a6a6>" + ВремяСообщения + "</font>";
	
	Текст = Текст + "<font face=Arial size=2 color=#2c79bd>" + ЭлементПервый.Автор 
		+ "</TD></font><TD  valign=top width=300><font face=Arial size=2>" 
		+ ТекстВHTML(ЭлементПервый.ТекстСообщения)
		+ ТекстHTML_Ответа
		+ "</font></TD><TD valign=top>"  + ТекстВремя + "</TD></TR></TD>"; 
	
	Текст = Текст + "</Table>";
	
	Возврат Текст;
	
КонецФункции // УстановитьТекстHTMLПоляСообщений()

Функция УстановитьТекстHTMLПоляСообщений(ТаблицаСообщенийДляФормированияПисьма)

	Текст = "";
	
	Если ТаблицаСообщенийДляФормированияПисьма.Количество() = 1 Тогда
		Возврат Текст;
	КонецЕсли;
	
	Текст = Текст + " <Table>";
	сч = 0;
	Для каждого Элемент Из ТаблицаСообщенийДляФормированияПисьма Цикл
	    сч = сч + 1;
		Если сч = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = Текст + "<TR><TD valign=top>";
		
		ВремяСообщения = Элемент.ДатаСоздания;
		ТекстВремя = "<font face=Arial size=1 color=#a6a6a6>" + ВремяСообщения + "</font>";
		
		Текст = Текст + "<font face=Arial size=2 color=#2c79bd>" + Элемент.Автор 
			+ "</TD></font><TD  valign=top width=300><font face=Arial size=2>" 
			+ ТекстВHTML(Элемент.ТекстСообщения)
			+ "</font></TD><TD valign=top>"  + ТекстВремя + "</TD></TR>"; 
		
	КонецЦикла;
	
	Текст = Текст + "</Table>";
	
	Возврат Текст;

КонецФункции // УстановитьТекстHTMLПоляСообщений()

Процедура УстановитьУсловноеОформлениеПоЦветамСостояний(УсловноеОформлениеКД,
		ПолноеИмяСправочникаСостояний,
		ИмяПоляСостояния = "Состояние",
		ОформляемоеПоле = Неопределено) Экспорт
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформлениеКД.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЦветСостояния" Тогда
			УдаляемыеЭлементы.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из УдаляемыеЭлементы Цикл
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	МенеджерСостояний = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяСправочникаСостояний);
	ВыборкаСостояний = МенеджерСостояний.Выбрать();
	
	Пока ВыборкаСостояний.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаСостояний.ЦветФонаСостояния) Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветСостояния = ЗначениеИзСтрокиВнутр(ВыборкаСостояний.ЦветФонаСостояния);
		Если ТипЗнч(ЦветСостояния) <> Тип("Цвет") Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
		
		Если ВыборкаСостояний.ИзменятьТекстЦвета Тогда
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветСостояния);
		Иначе
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветСостояния);
		КонецЕсли;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЦветСостояния";
		ЭлементУсловногоОформления.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ЭлементУсловногоОформления.Представление	= НСтр("ru='Оформление в цвет состояния'");
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ИмяПоляСостояния);
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение	= ВыборкаСостояний.Ссылка;
		
		Если ОформляемоеПоле <> Неопределено Тогда
			ОформляемоеПолеКД = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
			ОформляемоеПолеКД.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьТекстHTMLСсылкиОтвета(ТекстПоля, ЗадачаСсылка, ПараметрыОбсуждения, ТаблицаСообщенийДляФормированияПисьма)
	
	Если Не ЗначениеЗаполнено(ПараметрыОбсуждения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаСообщенийДляФормированияПисьма) Тогда
		Возврат;
	КонецЕсли;
	
	АдресЭлектроннойПочтыУчетнойЗаписиДляПриемаВходящихПисем = ЭлектронныйАдресУчетнойЗаписиВходящихЭлектронныхПисем();
		
	ТекстHTML_Ответа = 
	" <div align=""right""> <span style='font-size:10.0pt;font-family:""Arial"",sans-serif'><A href=""%1"">
	|<FONT style=""BACKGROUND-COLOR: #ffd700""><STRONG>%2</STRONG></FONT></A></span></div>";
	СтрокаПараметровСсылки = "mailto:%1?subject=Обр.Запрос№%2#%3 &amp;&body=";	// АПК:1036 Нет орфографической ошибки 
	
	Если ЗначениеЗаполнено(ТаблицаСообщенийДляФормированияПисьма) 
		И ТаблицаСообщенийДляФормированияПисьма.Количество() > 0 Тогда
		
		// вариант ответа, если есть сообщения
		Если ЗначениеЗаполнено(ПараметрыОбсуждения) 
			И ПараметрыОбсуждения.Свойство("ТекущееСообщение") Тогда
			
			КодТекущегоСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбсуждения.ТекущееСообщение, "Код");
			СтрокаОбсуждения = КодТекущегоСообщения;
			
		Иначе
			
			СтрокаОбсуждения = "";
			
		КонецЕсли;
		ТекстПараметров = СтрШаблон(СтрокаПараметровСсылки, 
			АдресЭлектроннойПочтыУчетнойЗаписиДляПриемаВходящихПисем, Формат(ЗадачаСсылка.Номер, "ЧГ=0"), СтрокаОбсуждения);
		
		Если ЗначениеЗаполнено(АдресЭлектроннойПочтыУчетнойЗаписиДляПриемаВходящихПисем) Тогда
			ТекстHTML_Ответа = СтрШаблон(ТекстHTML_Ответа, ТекстПараметров, НСтр("ru = 'Ответ по почте'"));
		Иначе
			ТекстHTML_Ответа = "";
		КонецЕсли;
		
		// Формирование таблицы сообщений.
		ТекстHTMLПоляСообщений = УстановитьТекстHTMLПоляПервогоСообщения(ТаблицаСообщенийДляФормированияПисьма, ТекстHTML_Ответа);
		ТекстПоля = ТекстПоля + СформироватьHTMLБлок(НСтр("ru = 'Новое сообщение:'"), ТекстHTMLПоляСообщений,,, Ложь);
		
		Если ТаблицаСообщенийДляФормированияПисьма.Количество() > 1 Тогда
			// вывод истории обсуждений по ветке
			ТекстHTMLПоляСообщений = УстановитьТекстHTMLПоляСообщений(ТаблицаСообщенийДляФормированияПисьма);
			ТекстПоля = ТекстПоля + "<p>" + СформироватьHTMLБлок(НСтр("ru = 'История обсуждения:'"), ТекстHTMLПоляСообщений,,, Ложь) + "</p>";
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(АдресЭлектроннойПочтыУчетнойЗаписиДляПриемаВходящихПисем) Тогда
		// вариант ответа, если нет сообщений
		ТекстПараметров = СтрШаблон(СтрокаПараметровСсылки, 
			АдресЭлектроннойПочтыУчетнойЗаписиДляПриемаВходящихПисем, Формат(ЗадачаСсылка.Номер, "ЧГ=0"), "");
		
		ТекстHTML_Ответа = СтрЗаменить(ТекстHTML_Ответа, "<div align=""right"">", "<div align=""left"">");
		
		ТекстHTML_Ответа = СтрШаблон(ТекстHTML_Ответа, ТекстПараметров, НСтр("ru = 'Нажать для ответа на запрос по почте'"));
		
		ТекстПоля = ТекстПоля + ТекстHTML_Ответа;
		
	Иначе
		// вариант без ответа
		ТекстПоля = ТекстПоля + "";
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекстHTMLСсылкиОтвета()

#КонецОбласти
