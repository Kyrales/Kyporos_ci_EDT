//////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ МОДУЛЯ ИЗ КОНФИГУРАЦИИ "Резервное копирование" версия 1.4,  автор: bystrov-e
// 	http://infostart.ru/public/128951/
//////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//////////////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ

// Преобразует структуру в РасписаниеРегламентногоЗадания.
//
// Параметры:
//  СтруктураРасписания - Структура;
// 
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания.
//
Функция СтруктураВРасписание(Знач СтруктураРасписания) Экспорт
	
	Если СтруктураРасписания = Неопределено Тогда
		Возврат Новый РасписаниеРегламентногоЗадания();
	КонецЕсли;
	СписокПолей = "ВремяЗавершения,ВремяКонца,ВремяНачала,ДатаКонца,ДатаНачала,ДеньВМесяце,ДеньНеделиВМесяце," + 
		"ДниНедели,ИнтервалЗавершения,Месяцы,ПаузаПовтора,ПериодНедель,ПериодПовтораВТечениеДня,ПериодПовтораДней";
	Результат = Новый РасписаниеРегламентногоЗадания;
	ЗаполнитьЗначенияСвойств(Результат, СтруктураРасписания, СписокПолей);
	ДетальныеРасписанияДня = Новый Массив;
	Для каждого Расписание Из СтруктураРасписания.ДетальныеРасписанияДня Цикл
		  ДетальныеРасписанияДня.Добавить(СтруктураВРасписание(Расписание));
	КонецЦикла;
	Результат.ДетальныеРасписанияДня = ДетальныеРасписанияДня;  
	Возврат Результат;
	
КонецФункции	

// Преобразует РасписаниеРегламентногоЗадания в структуру.
//
// Параметры:
//  Расписание - РасписаниеРегламентногоЗадания;
// 
// Возвращаемое значение:
//  Структура.
//
Функция РасписаниеВСтруктуру(Знач Расписание) Экспорт
	
	ЗначениеРасписания = Расписание;
	Если ЗначениеРасписания = Неопределено Тогда
		ЗначениеРасписания = Новый РасписаниеРегламентногоЗадания();
	КонецЕсли;
	СписокПолей = "ВремяЗавершения,ВремяКонца,ВремяНачала,ДатаКонца,ДатаНачала,ДеньВМесяце,ДеньНеделиВМесяце," + 
		"ДниНедели,ИнтервалЗавершения,Месяцы,ПаузаПовтора,ПериодНедель,ПериодПовтораВТечениеДня,ПериодПовтораДней";
	Результат = Новый Структура(СписокПолей);
	ЗаполнитьЗначенияСвойств(Результат, ЗначениеРасписания, СписокПолей);
	ДетальныеРасписанияДня = Новый Массив;
	Для каждого РасписаниеДля Из Расписание.ДетальныеРасписанияДня Цикл
		ДетальныеРасписанияДня.Добавить(РасписаниеВСтруктуру(РасписаниеДля));
	КонецЦикла;
	Результат.Вставить("ДетальныеРасписанияДня", ДетальныеРасписанияДня);
	Возврат Результат;
	
КонецФункции		

Процедура СообщитьПользователю (ТекстСообщения,СообщатьПользователю = Истина ,ЗаписыватьВЖурналРегистрации = Истина) Экспорт
	
	Если СообщатьПользователю Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ЗаписыватьВЖурналРегистрации Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Сообщение'", ОбщегоНазначения.КодОсновногоЯзыка()),УровеньЖурналаРегистрации.Информация,,ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры	


//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НАСТРОЙКИ ЗАПРОСОВ SQL

Функция ПолучитьЗапросSQLПоУмолчанию() Экспорт
	
	Возврат "USE master
	|EXEC sp_addumpdevice @devtype = disk, @logicalname = BCKUP , @physicalname = ""%ПапкаДляВыгрузок%\%ИмяФайлаВыгрузки%""
	|BACKUP DATABASE ""%ИмяБазыНаСервереSQL%"" TO BCKUP WITH COPY_ONLY, NOFORMAT, INIT, SKIP, NOREWIND, NOUNLOAD
	|exec sp_dropdevice @logicalname = BCKUP";
	
КонецФункции	

Функция ПолучитьСтрокуСоединенияПоУмолчанию (СпособАутентификации = Неопределено) Экспорт
	
	Возврат "Provider=SQLOLEDB.1;
		|" + ?(СпособАутентификации = Перечисления.СпособыАутентификации.Windows,"Integrated Security=SSPI;","User ID=%ИмяПользователя%;Password=%Пароль%;") + "
		|Persist Security Info=True;
		|Initial Catalog=%ИмяБазыНаСервереSQL%;
		|Data Source=%Сервер%;
		|Use Procedure for Prepare=1;";
	
КонецФункции	

// Получение SQL запроса восстановления для SQL-сервера
//
// Возвращаемое значение:
//   Строка   - готовый текст запроса. Параметры выделены символом "%"
//
Функция ПолучитьSQLЗапросВосстановленияПоУмолчанию(ТипСервераSQL) Экспорт
	
	Если ТипСервераSQL=Перечисления.ТипыСерверовSQL.SQL_2012 
		Или ТипСервераSQL.Пустая() Тогда
		Возврат "
			| USE [%ИмяБазыНаСервереSQL%]
			| DECLARE @LogName1 char(90);
			| DECLARE @LogName2 char(90);
			
			| SET @LogName1 = 'N'''+ (select name from sys.database_files where file_id=1)+'''';
			| SET @LogName2 = 'N'''+ (select name from sys.database_files where file_id=2)+'''';
		    | 
			| USE [master]
			| ALTER DATABASE [%ИмяБазыНаСервереSQL_Приемник%] SET SINGLE_USER WITH ROLLBACK IMMEDIATE
			| exec('RESTORE DATABASE [%ИмяБазыНаСервереSQL_Приемник%] FROM  DISK = N''%ИмяФайлаВыгрузки%'' WITH  FILE = 1,  MOVE '+@LogName1+' TO N''%ПапкаКБазамПоУмолчанию%\%ИмяБазыНаСервереSQL_Приемник%.mdf'',  MOVE '+@LogName2+' TO N''%ПапкаКБазамПоУмолчанию%\%ИмяБазыНаСервереSQL_Приемник%_log.ldf'',  NOUNLOAD,  REPLACE,  STATS = 5')
			| ALTER DATABASE [%ИмяБазыНаСервереSQL_Приемник%] SET MULTI_USER";
	Иначе
		// Стартовый вариант до SQL 2012.
		Возврат "USE master
			|EXEC sp_addumpdevice @devtype = disk, @logicalname = BCKUP , @physicalname = ""%ИмяФайлаВыгрузки%""
			|RESTORE DATABASE ""%ИмяБазыНаСервереSQL_Приемник%"" FROM BCKUP
			|exec sp_dropdevice @logicalname = BCKUP";
	КонецЕсли;
		
КонецФункции	


//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ КОПИРОВАНИЯ И ВОССТАНОВЛЕНИЯ БАЗ SQL

Функция СоздатьОбразНастройкиПоЭлементу(Элемент) Экспорт
	
	Настройка = Новый Структура;
	Настройка.Вставить("Ссылка",Элемент.Ссылка);
	Для Каждого Реквизит Из Метаданные.Справочники.СписокИнформационныхБаз1С.Реквизиты Цикл 
		Попытка
			Настройка.Вставить(Реквизит.Имя,Элемент[Реквизит.Имя]);
		Исключение
			Продолжить;
		КонецПопытки;	
	КонецЦикла;	
	
	Для Каждого Реквизит Из Метаданные.Справочники.СерверыSQL.Реквизиты Цикл 
		Попытка
			Настройка.Вставить(Реквизит.Имя,Элемент.СерверSQL[Реквизит.Имя]);
		Исключение
			Продолжить;
		КонецПопытки;	
	КонецЦикла;	
	
	Возврат Настройка;
	
КонецФункции	

Процедура ВыполнитьРезервноеКопированиеПоНастройке(Настройка, РежимПроверки = Ложь) Экспорт
	
	ТекстПроверки = "";
	Если Не ЗаполненыВсеПараметрыДляSQLКопирования(Настройка.Ссылка,ТекстПроверки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстПроверки);
		Возврат;
	КонецЕсли;
	
	ДатаНачалаКопирования = ТекущаяДатаСеанса();
	ПутьДляВосстановления = "";
	
	Если Настройка.Выражение Тогда 
		ИмяФайлаВыгрузки = "";
		Попытка
			// BSLLS:ExecuteExternalCodeInCommonModule-off 
			Выполнить("ИмяФайлаВыгрузки = " + Настройка.ИмяФайлаВыгрузки);
			// BSLLS:ExecuteExternalCodeInCommonModule-on 
		Исключение
			ИмяФайлаВыгрузки = Настройка.ИмяФайлаВыгрузки;
		КонецПопытки;	
	Иначе	
		ИмяФайлаВыгрузки = Настройка.ИмяФайлаВыгрузки;
	КонецЕсли;                                                                             
	
	ПутьКФайлу = Настройка.ПапкаДляВыгрузок + "\" + ИмяФайлаВыгрузки; 
	ПутьДляВосстановления = ПутьКФайлу;
	
	ЗапросSQL = ПолучитьЗапросSQL(Настройка);
	
	Подключение = ВыполнитьПодключениеПоНастройке(Настройка);
	Если Подключение = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Команда                  = Новый COMОбъект("ADODB.Command");
	Команда.ActiveConnection = Подключение;
	Команда.CommandText      = ЗапросSQL;
	Команда.CommandTimeout   = 0;
	
	Попытка
		// Отдаем запрос на бэкап базы.
		Команда.Execute();
		ТекстСообщения = СтрШаблон(НСтр("ru = ' %1 : База успешно сохранена в файл: %2 .'"), Настройка.Ссылка, ПутьКФайлу);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1:  Ошибка создания резервной копии: 
                                         |%2.'"), Настройка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры	

Процедура ВыполнитьВосстановлениеПоНастройке(Настройка, РежимПроверки = Ложь) Экспорт
	
	Попытка
		// BSLLS:ExecuteExternalCodeInCommonModule-off 
		Выполнить("ИмяФайлаВыгрузки = " + Настройка.ИмяФайлаВыгрузки);
		// BSLLS:ExecuteExternalCodeInCommonModule-on 
	Исключение
		ИмяФайлаВыгрузки = Настройка.ИмяФайлаВыгрузки;
	КонецПопытки;	
	
	ИмяФайлаВыгрузки = Настройка.ПапкаДляВыгрузок + "\" + ИмяФайлаВыгрузки;
	
	Если Настройка.ПапкаКБазамПоУмолчанию="" Тогда
		Результат = НСтр("ru = 'Не заполнено поле: Папка к базам по умолчанию на сервере SQL приемник.'"); 
		Возврат;
	КонецЕсли;
	
	Подключение  = ВыполнитьПодключениеПоНастройке(Настройка);
	ЗапросSQL    = ПолучитьЗапросSQLВосстановления(Настройка);
	Файл = Новый Файл (ИмяФайлаВыгрузки);
	Если Не Файл.Существует() Тогда 
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Файл %1 не найден.'"), ИмяФайлаВыгрузки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗапросSQL    = СтрЗаменить(ЗапросSQL,"%ИмяФайлаВыгрузки%",ИмяФайлаВыгрузки);

	Если Подключение = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Команда                  = Новый COMОбъект("ADODB.Command");
	Команда.ActiveConnection = Подключение;
	Команда.CommandText      = ЗапросSQL;
	Попытка
		
		Команда.Execute();
		Если РежимПроверки Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'База успешно восстановлена:  %1.'"), ИмяФайлаВыгрузки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	Исключение
		
		Если РежимПроверки Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка восстановления резервной копии:  %1.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры	

Функция ВыполнитьПодключениеПоНастройке(Настройка, РежимПроверки = Ложь) Экспорт
	
	ТекстПроверки = "";
	Если Не ЗаполненыВсеПараметрыДляSQLКопирования(Настройка.Ссылка,ТекстПроверки,Истина) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстПроверки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаСоединения = ПолучитьСтрокуСоединения(Настройка);
		
	Подключение                   = Новый ComObject("ADODB.Connection");
	Подключение.ConnectionString  = СтрокаСоединения;
	Попытка
		Подключение.Open(СтрокаСоединения);
		Если РежимПроверки Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Подключено успешно.'"));
		Иначе
			Возврат Подключение;
		КонецЕсли;	
	Исключение
		
		Если РежимПроверки Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка подключения: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполненыВсеПараметрыДляSQLКопирования(ИнформационнаяБаза,Результат="",ТолькоПараметрыПроверкиСоединения = Ложь)
	
	Если ИнформационнаяБаза.ТипРасположенияИБ<>0 Тогда
		
		Результат = СтрШаблон(НСтр("ru = '%1: Тип расположение информационной базы должен быть серверный.'"), ИнформационнаяБаза);
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнформационнаяБаза.СерверSQL.Пустая() Тогда
		Результат = СтрШаблон(НСтр("ru = '%1: Не заполнено поле: Сервер SQL.'"), ИнформационнаяБаза);
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнформационнаяБаза.ИмяБазыНаСервереSQL="" Тогда
		Результат = СтрШаблон(НСтр("ru = '%1: Не заполнено поле: Имя базы на сервере SQL.'"), ИнформационнаяБаза); 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ТолькоПараметрыПроверкиСоединения Тогда
		
		Если ИнформационнаяБаза.ПапкаДляВыгрузок="" Тогда
			Результат = СтрШаблон(НСтр("ru = '%1: Не заполнено поле: Папка для выгрузок.'"), ИнформационнаяБаза); 
			Возврат Ложь;
		КонецЕсли;
		
		Если ИнформационнаяБаза.ИмяФайлаВыгрузки="" Тогда
			Результат = СтрШаблон(НСтр("ru = '%1: Не заполнено поле: Имя файла для выгрузок.'"), ИнформационнаяБаза); 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЗапросSQL(Настройка)
	
	Запрос = ПолучитьЗапросSQLПоУмолчанию();
	
	Если Настройка.Выражение Тогда 
		ИмяФайлаВыгрузки = "";
		Попытка
			// BSLLS:ExecuteExternalCodeInCommonModule-off 
			Выполнить("ИмяФайлаВыгрузки = " + Настройка.ИмяФайлаВыгрузки);
			// BSLLS:ExecuteExternalCodeInCommonModule-on 
		Исключение
			ИмяФайлаВыгрузки = Настройка.ИмяФайлаВыгрузки;
		КонецПопытки;	
		Запрос = СтрЗаменить(Запрос,"%ИмяФайлаВыгрузки%",ИмяФайлаВыгрузки);
	КонецЕсли;  
	
	Для Каждого Эл Из Настройка Цикл
		Запрос = СтрЗаменить(Запрос,"%" + Эл.Ключ + "%",Эл.Значение);		
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции	

Функция ПолучитьСтрокуСоединения (Настройка)
	
	СтрокаСоединения =  ПолучитьСтрокуСоединенияПоУмолчанию(Настройка.Аутентификация);
	
	Для Каждого Эл Из Настройка Цикл
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения,"%" + Эл.Ключ + "%",Эл.Значение);		
	КонецЦикла;
	
	Возврат СтрокаСоединения;
	
КонецФункции	

Функция ПолучитьЗапросSQLВосстановления(Настройка)
	
	Запрос = ПолучитьSQLЗапросВосстановленияПоУмолчанию(Настройка.ТипСервераSQL);
	
	Для Каждого Эл Из Настройка Цикл
		Если Эл.Ключ = "ИмяФайлаВыгрузки" Тогда
			Продолжить;
		КонецЕсли;
		Запрос = СтрЗаменить(Запрос,"%" + Эл.Ключ + "%",Эл.Значение);		
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти
