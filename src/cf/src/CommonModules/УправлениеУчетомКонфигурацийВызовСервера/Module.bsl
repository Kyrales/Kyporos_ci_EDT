////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ ПОДСИСТЕМЫ УЧЕТА ВЕРСИЙ КОНФИГУРАЦИИ
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Парсинг текстовой строки и формирование таблицы значений данных соответствующих Методологии "Купорос".
//
// Параметры:
//  СтрокаДанных  - Строка - описание изменений шапки модуля
//  АвторСтрока  - Строка - автор описания изменений модуля
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица значений с колонками:
//		* Режим - ПеречислениеСсылка.РежимРаботыПослеОбновления
//		* СтрокаИзменения - Строка - основная строка изменений
//		* Примечание - Строка - дополнительное примечание разработчика
//		* ВыполненоИзменение - Булево - Истина, если выполнено изменение
//		* ЕстьФункция - Булево - Истина, если функция или процедура
//		* ЗначениеКартинкиОбъектаИзменения - Число - индекс картинки строки изменения(см. функцию ОпределитьЗначениеКартинкиОбъектаИзменения())
//
Функция ЧтениеВТаблицуЗначенийДанныхПоИзменениям(СтрокаДанных, АвторСтрока = "") Экспорт 
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Режим");
	ТаблицаДанных.Колонки.Добавить("СтрокаИзменения");
	ТаблицаДанных.Колонки.Добавить("Примечание");
	ТаблицаДанных.Колонки.Добавить("ВыполненоИзменение");
	ТаблицаДанных.Колонки.Добавить("ЕстьФункция");
	ТаблицаДанных.Колонки.Добавить("ЗначениеКартинкиОбъектаИзменения");
	ТаблицаДанных.Колонки.Добавить("ЗначениеКартинкиЕстьТег");
	
	Для Счетчик = 1 По СтрЧислоСтрок(СтрокаДанных) Цикл
	
		 ТекСтрока = СтрПолучитьСтроку(СтрокаДанных, Счетчик);
		 
		 // определение автора изменения
		 ПозицияНайденаНачало = СтрНайти(ТекСтрока, ">>> ОПИСАНИЕ ИЗМЕНЕНИЙ >>>");
		 ПозНачАвтор = СтрНайти(ТекСтрока, "//{");
		 Если ПозНачАвтор > 0 
			 И ПозицияНайденаНачало > 0 Тогда
			 АвторСтрока = Сред(ТекСтрока, ПозНачАвтор + 4, ПозицияНайденаНачало - (ПозНачАвтор + 4));
			 АвторСтрока = СтрЗаменить(АвторСтрока, ">", "");
			 АвторСтрока = СтрЗаменить(АвторСтрока, "{", "");
			 АвторСтрока = СокрЛП(АвторСтрока);
		 КонецЕсли;
		 
		 // обрабатываем строку
		 ПозицияИзменения = СтрНайти(ТекСтрока, "//  *");
		 ПозицияИзменения = ?(ПозицияИзменения = 0, СтрНайти(ТекСтрока, "// *"), ПозицияИзменения);
		 ПозицияИзменения = ?(ПозицияИзменения = 0, СтрНайти(ТекСтрока, "//  +"), ПозицияИзменения);
		 ПозицияИзменения = ?(ПозицияИзменения = 0, СтрНайти(ТекСтрока, "// +"), ПозицияИзменения);
		 
		 Если ПозицияИзменения = 0 Тогда
		 	Продолжить;
		 КонецЕсли;
		 
		 НовСтрокаТЗ = ТаблицаДанных.Добавить();
		 
		 // режим
		 ПозРежим = СтрНайти(ТекСтрока, "[Р]");
		 Если ПозРежим <> 0 Тогда
			 
			 ПозРежимКонец = СтрНайти(ТекСтрока, "[/Р]");
			 
			 РежимТекст = Сред(ТекСтрока, ПозРежим + 3, ПозРежимКонец - ПозРежим - 3);
			 
			 НовСтрокаТЗ.Режим = Перечисления.РежимРаботыПослеОбновления[РежимТекст];
		 Иначе
			 НовСтрокаТЗ.Режим = Перечисления.РежимРаботыПослеОбновления.ИзмененияНеТребуются;
		 КонецЕсли;
		 
		 // строка изменения
		 НовСтрокаТЗ.СтрокаИзменения = СокрЛП(Сред(ТекСтрока, ПозицияИзменения, СтрДлина(ТекСтрока) - ПозицияИзменения + 1));
		 
		 
		 // примечание
	 	 ПозицияПримечание = СтрНайти(ТекСтрока, "[П]");
		 Если ПозицияПримечание <> 0 Тогда
			ПозРежимКонец = СтрНайти(ТекСтрока, "[/П]");
			
			ПримечаниеТекст = Сред(ТекСтрока, ПозицияПримечание + 3, ПозРежимКонец - ПозицияПримечание - 3);
			НовСтрокаТЗ.Примечание = ПримечаниеТекст;
		 КонецЕсли;
		 
		 // выполнено изменение
	 	 ПозицияВыполненоИзменение = СтрНайти(ТекСтрока, "[И]");
		 Если ПозицияВыполненоИзменение <> 0 Тогда
			НовСтрокаТЗ.ВыполненоИзменение = Истина;
		 КонецЕсли;
		 
		 // есть функция, процедура
	 	 ПозФункция = СтрНайти(ТекСтрока, "[Ф]");
		 Если ПозФункция <> 0 Тогда
			НовСтрокаТЗ.ЕстьФункция = Истина;
		 КонецЕсли;
		 
		 // есть тег
	 	 ПозТег = СтрНайти(ТекСтрока, "#");
		 Если ПозТег <> 0 Тогда
			НовСтрокаТЗ.ЗначениеКартинкиЕстьТег = Истина;
		 КонецЕсли;
		 
	КонецЦикла;
	
	// определить значения картинок объектов изменения
	Для каждого стр Из ТаблицаДанных Цикл
		
		  стр.ЗначениеКартинкиОбъектаИзменения = ОпределитьЗначениеКартинкиОбъектаИзменения(стр.СтрокаИзменения);
		
	КонецЦикла;
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		Возврат ТаблицаДанных;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Запись в строку из таблицы значений изменений соответствующих Методологии "Купорос"
// Обратная от функции ЧтениеВТаблицуЗначенийДанныхПоИзменениям()
// Параметры:
//   ТаблицаДанных - ТаблицаЗначений   - таблица значений с колонками:
//		* Режим - ПеречислениеСсылка.РежимРаботыПослеОбновления
//		* СтрокаИзменения - Строка - основная строка изменений
//		* Примечание - Строка - дополнительное примечание разработчика
//		* ВыполненоИзменение - Булево - Истина, если выполнено изменение
//		* ЕстьФункция - Булево - Истина, если функция или процедура
//		* ЗначениеКартинкиОбъектаИзменения - Число - индекс картинки строки изменения(см. функцию ОпределитьЗначениеКартинкиОбъектаИзменения())
//
// Возвращаемое значение:
//   Строка   - описание изменений шапки модуля
//
Функция ЗаписьИзТаблицыЗначенийДанныхПоИзменениям(ТаблицаДанных) Экспорт 
	
	СтрокаДанных = "";
	сч = 0;
	Для каждого стр Из ТаблицаДанных Цикл
		
		сч = сч + 1;
		
		// режим
		Режим = "";
		Если ЗначениеЗаполнено(стр.Режим) 
			И стр.Режим <> Перечисления.РежимРаботыПослеОбновления.ИзмененияНеТребуются Тогда
			
			Режим = "[Р]" + ОпределитьИмяПеречисления(стр.Режим) + "[/Р]";
			
		КонецЕсли;
		
		// строка изменений
        СтрокаИзменения = стр.СтрокаИзменения;
		
		
		// примечание
		СтрокаПрим = "";
		Если СокрЛП(стр.Примечание) <> "" Тогда
		
			СтрокаПрим = "[П]" + стр.Примечание + "[/П]";
		
		КонецЕсли;
		
		// выполнено изменение
		СтрокаВыполненоИзменение = "";
		Если стр.ВыполненоИзменение Тогда
		
			СтрокаВыполненоИзменение = "[И][/И]";
		
		КонецЕсли;
		
		СтрокаДанных = СтрокаДанных + Режим + СтрокаПрим + СтрокаВыполненоИзменение + СтрокаИзменения ;
		
		СтрокаДанных = ?(ТаблицаДанных.Количество() = сч, СтрокаДанных, СтрокаДанных + Символы.ПС);
		
	КонецЦикла;
	
	Возврат СтрокаДанных;
	
КонецФункции

// Определить результат изменения
//
// Параметры:
//  Запись			 - РегистрСведенийМенеджерЗаписи.УчетВерсийКонфигурации 
//  ТаблицаДанных	 - ТаблицаЗначений	 - содержит колонки:
//		* Режим - ПеречислениеСсылка.РежимРаботыПослеОбновления
//		* СтрокаИзменения - Строка
//		* Примечание - Строка
//		* ВыполненоИзменение - Булево
//		* ЕстьФункция - Булево
//		* ЗначениеКартинкиОбъектаИзменения - Булево
//		* ЗначениеКартинкиЕстьТег - Булево
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.РежимРаботыПослеОбновления - вариант режима работы после обновления
//
Функция ОпределитьРезультатИзменения(Знач Запись, Знач ТаблицаДанных) Экспорт
	
	Если ТаблицаДанных = Неопределено Тогда
		  Возврат Перечисления.РежимРаботыПослеОбновления.ИзмененияНеТребуются;
	КонецЕсли;
	
	Если Запись.ДействияРезультат <> Перечисления.РежимРаботыПослеОбновления.ИзмененияНеТребуются
		И Запись.ДействияРезультат <> Перечисления.РежимРаботыПослеОбновления.ПустаяСсылка() Тогда
		Возврат Запись.ДействияРезультат;
	КонецЕсли;
	
	КолВоИзменений = 0; 
	КолВзять1С = 0; 
	РежимИзменений = Перечисления.РежимРаботыПослеОбновления.ИзмененияНеТребуются;
	Для каждого стр Из ТаблицаДанных Цикл
	
		Если стр.Режим = Перечисления.РежимРаботыПослеОбновления.ВзятьИзменения1СПолностью Тогда
			КолВзять1С = КолВзять1С + 1;	
		ИначеЕсли стр.Режим <> Перечисления.РежимРаботыПослеОбновления.ИзмененияНеТребуются Тогда
			КолВоИзменений = КолВоИзменений + 1;
			РежимИзменений = стр.Режим;
		Иначе
			// без обработки
		КонецЕсли;
	
	КонецЦикла;
	
	Если ТаблицаДанных.Количество() = КолВзять1С 
		И КолВзять1С <> 0 Тогда
		Возврат Перечисления.РежимРаботыПослеОбновления.ВзятьИзменения1СПолностью;
	ИначеЕсли ТаблицаДанных.Количество() <> КолВоИзменений 
		И КолВоИзменений <> 0 Тогда
		Возврат Перечисления.РежимРаботыПослеОбновления.ИндивидуальныеНастройки;
	Иначе
		Возврат РежимИзменений;
	КонецЕсли;
	
КонецФункции

// Получение полной информации по конфигурации и выбранной версии
//
// Параметры:
//  Конфигурация  - СправочникСсылка.Конфигурации
//  ВерсияКонфигурации  - СправочникСсылка.ВерсииКонфигураций
//  ПолнаяИсторияОписанияВерсии  - Булево
//
// Возвращаемое значение:
//   Структура   - структура со свойствами:
//		* Конфигурация - СправочникСсылка.Конфигурации
//		* ПоследняяВерсияКонфигурации - СправочникСсылка.ВерсииКонфигураций
//		* ДатаВнедрения - Дата - дата внедрения конфигурации
//		* Редакция - Строка - редакция конфигурации
//		* Описание - Строка - общее описание конфигурации 
//		* ОписаниеИзменений - Массив -  содержит строки, описание изменений из регистра сведений "ОписаниеИзмененийКонфигурации"
//
Функция ПолучитьДанныеПоКонфигурации(Конфигурация, ВерсияКонфигурации, ПолнаяИсторияОписанияВерсии = Истина) Экспорт

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Конфигурация", Конфигурация);
	СтруктураДанных.Вставить("ПоследняяВерсияКонфигурации", Справочники.ВерсииКонфигураций.ПустаяСсылка());
	СтруктураДанных.Вставить("ДатаВнедрения", Конфигурация.ДатаВнедрения);
	СтруктураДанных.Вставить("Редакция", Конфигурация.Редакция);
	СтруктураДанных.Вставить("Описание", Конфигурация.Описание);
	СтруктураДанных.Вставить("ОписаниеИзменений", Новый Массив);
	
	Если ВерсияКонфигурации.Пустая() Тогда
		
		// получение последней версии конфигурации
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ОписаниеИзмененийКонфигурации.ВерсияКонфигурации КАК ВерсияКонфигурации
		               |ИЗ
		               |	РегистрСведений.ОписаниеИзмененийКонфигурации КАК ОписаниеИзмененийКонфигурации
		               |ГДЕ
		               |	ОписаниеИзмененийКонфигурации.Конфигурация = &Конфигурация
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ОписаниеИзмененийКонфигурации.ВерсияКонфигурации.Наименование УБЫВ";
		
		Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			СтруктураДанных.ПоследняяВерсияКонфигурации = Выборка.ВерсияКонфигурации;
		Иначе
			Возврат СтруктураДанных;
		КонецЕсли;
		
	Иначе
		
		СтруктураДанных.ПоследняяВерсияКонфигурации = ВерсияКонфигурации;
		
	КонецЕсли;	
	
	// формирование данных по изменениям
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОписаниеИзмененийКонфигурации.Конфигурация КАК Конфигурация,
	               |	ОписаниеИзмененийКонфигурации.ВерсияКонфигурации КАК ВерсияКонфигурации,
	               |	ОписаниеИзмененийКонфигурации.РазделОбновления КАК РазделОбновления,
	               |	ОписаниеИзмененийКонфигурации.ПорядковыйНомер КАК ПорядковыйНомер,
	               |	ОписаниеИзмененийКонфигурации.ДатаДобавления КАК ДатаДобавления,
	               |	ОписаниеИзмененийКонфигурации.ОписаниеИзменения КАК ОписаниеИзменения,
	               |	ОписаниеИзмененийКонфигурации.ТипИзменения КАК ТипИзменения,
	               |	ОписаниеИзмененийКонфигурации.Основание КАК Основание
	               |ИЗ
	               |	РегистрСведений.ОписаниеИзмененийКонфигурации КАК ОписаниеИзмененийКонфигурации
	               |ГДЕ
	               |	ОписаниеИзмененийКонфигурации.Конфигурация = &Конфигурация
	               |	И ОписаниеИзмененийКонфигурации.ВерсияКонфигурации.Наименование ПОДОБНО &ВерсияУпрощенная + ""%""
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОписаниеИзмененийКонфигурации.ВерсияКонфигурации.Наименование УБЫВ,
	               |	ОписаниеИзмененийКонфигурации.ПорядковыйНомер
	               |ИТОГИ ПО
	               |	ВерсияКонфигурации,
	               |	РазделОбновления";
	
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	
	Если ПолнаяИсторияОписанияВерсии Тогда
		ВерсияУпрощенная = ПолучитьВерсиюКонфигурации(СтруктураДанных.ПоследняяВерсияКонфигурации);
	Иначе
		ВерсияУпрощенная = СтруктураДанных.ПоследняяВерсияКонфигурации.Наименование;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВерсияУпрощенная", ВерсияУпрощенная);
	
	Результат = Запрос.Выполнить();
	ВыборкаВерсия = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВерсия.Следующий() Цикл
	
		СтруктураВерсии = Новый Структура;
		СтруктураВерсии.Вставить("ВерсияКонфигурации", ВыборкаВерсия.ВерсияКонфигурации);
		СтруктураВерсии.Вставить("ОписаниеИзмененийВерсии", Новый Массив);
		
		СтруктураВерсии.ОписаниеИзмененийВерсии.Добавить("<H4><FONT color=#823602 face=Verdana>Новое в версии " 
			+ Строка(ВыборкаВерсия.ВерсияКонфигурации) + "</FONT></H4>");
		СтруктураВерсии.ОписаниеИзмененийВерсии.Добавить("<UL>");
		
		ВыборкаРазделОбновления = ВыборкаВерсия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРазделОбновления.Следующий() Цикл
			
			СтруктураВерсии.ОписаниеИзмененийВерсии.Добавить("<LI>" + ВыборкаРазделОбновления.РазделОбновления + "</LI>");
			СтруктураВерсии.ОписаниеИзмененийВерсии.Добавить("<UL>");
		
			Выборка = ВыборкаРазделОбновления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				ОписаниеИзмененийHTML = СтрЗаменить(Выборка.ОписаниеИзменения, Символы.ПС, "<br>");
				СтруктураВерсии.ОписаниеИзмененийВерсии.Добавить("<LI>" + ОписаниеИзмененийHTML + "</LI>");
			КонецЦикла;
			СтруктураВерсии.ОписаниеИзмененийВерсии.Добавить("</UL>");
			
		КонецЦикла;
		
		СтруктураВерсии.ОписаниеИзмененийВерсии.Добавить("</UL>");
		
		СтруктураДанных.ОписаниеИзменений.Добавить(СтруктураВерсии);
	
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьДанныеПоКонфигурации()

// Получение строковой версии конфигурацию по ссылке
//
// Параметры:
//  ВерсияКонфигурации  - СправочникСсылка.ВерсииКонфигураций
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьВерсиюКонфигурации(ВерсияКонфигурации) Экспорт

	ВерсияДляОбработки = ВерсияКонфигурации.Наименование;
	Редакция  = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ВерсияДляОбработки, ".");
	Редакция2 = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ВерсияДляОбработки, ".");
	Версия    = ОбщегоНазначенияКупоросКлиентСервер.ВыделитьСлово(ВерсияДляОбработки, ".");
	ВерсияУпрощенная = СтрШаблон("%1.%2.%3", Редакция, Редакция2, Версия);

	Возврат ВерсияУпрощенная;
	
КонецФункции

// Очистить все изменение объекта метаданных, которые были добавлены из табличной части ИзмененияПоУмолчанию 
//
// Параметры:
//  ОбъектМетаданныхКонфигурацииСсылка	 - СправочникСсылка.ОбъектыМетаданныхКонфигураций
//  ТипМодуля - СправочникСсылка.ТипыМодулей							 - 	 - 
//
Процедура ОчиститьИзменениеПоУмолчаниюОбъектаМетаданных(ОбъектМетаданныхКонфигурацииСсылка, ТипМодуля) Экспорт
	
	ОбъектМетаданныхКонфигурации = ОбъектМетаданныхКонфигурацииСсылка.ПолучитьОбъект();
	ОбъектМетаданныхКонфигурации.Заблокировать();
	
	НайденнаяСтрока = ОбъектМетаданныхКонфигурации.ИзмененияПоУмолчанию.Найти(ТипМодуля, "ТипМодуля");	
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданныхКонфигурации.ИзмененияПоУмолчанию.Удалить(НайденнаяСтрока);
	
	ОбъектМетаданныхКонфигурации.Записать();
	
КонецПроцедуры

// Возвращает описание тегов области ТЕГИ ИЗМЕНЕНИЙ
//
// Параметры:
//  СтрокаДанных  - Строка - описание изменений шапки модуля
//
// Возвращаемое значение:
//   Строка   - описание всех тегов
//
// Пример:
// Пример обрабатываемой строки данных, в которой необходимо получить всю область после строки ТЕГИ ИЗМЕНЕНИЙ:
// {{ *ИмяРазработчика >>>>>>>>>>>>>>>>>>>>>>> ОПИСАНИЕ ИЗМЕНЕНИЙ >>>>>>>>>>>>>>>>>>>>>>>>>>>
// 
// НОВЫЕ/ИЗМЕНЕННЫЕ МЕТАДАННЫЕ ОБЪЕКТА ОТСУТСТВУЮТ
// 
// НОВЫЕ/ИЗМЕНЕННЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// 
// ТЕГИ ИЗМЕНЕНИЙ
//  #SLA
//   <описание тега>
//   <продолжение описания тега>
//
// }} *ИмяРазработчика <<<<<<<<<<<<<<<<<<<<<<< ОПИСАНИЕ ИЗМЕНЕНИЙ <<<<<<<<<<<<<<<<<<<<<<<<<<<
//
Функция ТегиИзДанныхПоИзменениям(СтрокаДанных) Экспорт
	
	ИнформацияПоТегам = ""; 
	ОбластьТегов = Ложь; 
	ОбластьОписанияТегов = Ложь;
	Для Счетчик = 1 По СтрЧислоСтрок(СтрокаДанных) Цикл
		
		ТекСтрока = СтрПолучитьСтроку(СтрокаДанных, Счетчик);
		
		КонецОбработки = СтрНайти(ТекСтрока, "//}}");
		Если КонецОбработки <> 0 Тогда
			Прервать;	
		КонецЕсли;
		
		// определение области меток изменения
		Если Не ОбластьТегов Тогда
			НачалоОбластиТегов = СтрНайти(ТекСтрока, "ТЕГИ ИЗМЕНЕНИЙ");
			Если НачалоОбластиТегов = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОбластьТегов = Истина;
			Продолжить; // со следующей строки начнется считывание тегов
		КонецЕсли;
		
		Если Не ОбластьОписанияТегов Тогда
			ИдентификаторТега = СтрНайти(ТекСтрока, "#");
			Если ИдентификаторТега = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОбластьОписанияТегов = Истина;
		КонецЕсли;
		
		ИнформацияПоТегам = ИнформацияПоТегам + ТекСтрока + Символы.ПС; 
		
	КонецЦикла;
	
	ИнформацияПоТегам = СтрЗаменить(ИнформацияПоТегам, "//", "");
	ИнформацияПоТегам = СокрЛП(ИнформацияПоТегам);
	
	Возврат ИнформацияПоТегам;
	
КонецФункции // ТегиИзДанныхПоИзменениям()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьИмяПеречисления(Режим)
	
	РезультатЗначения = "";
	
	Если Режим = Перечисления.РежимРаботыПослеОбновления.ИзмененияНеТребуются Тогда
		 РезультатЗначения = "ИзмененияНеТребуются";
	ИначеЕсли Режим = Перечисления.РежимРаботыПослеОбновления.ПереписатьНашиИзменения Тогда
		 РезультатЗначения = "ПереписатьНашиИзменения";
	ИначеЕсли Режим = Перечисления.РежимРаботыПослеОбновления.ДополнитьИзменения1С Тогда
		 РезультатЗначения = "ДополнитьИзменения1С";
	ИначеЕсли Режим = Перечисления.РежимРаботыПослеОбновления.ВзятьИзменения1СПолностью Тогда
		 РезультатЗначения = "ВзятьИзменения1СПолностью";
	 Иначе
		 РезультатЗначения = "";
	КонецЕсли;

	Возврат РезультатЗначения;
	
КонецФункции // ОпределитьЗначениеПеречисления()

// Определение индекса картинки по строке изменений
//
// Параметры:
//  СтрокаИзменения  - Строка
//
// Возвращаемое значение:
//   Число   - индекс картинки строки изменения (см. общую картинку МетаданныеКоллекция)
//
Функция ОпределитьЗначениеКартинкиОбъектаИзменения(Знач СтрокаИзменения)

	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[РОЛЬ]") > 0 Тогда
	    Возврат 18;
	КонецЕсли;	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[ПАРАМЕТР]") > 0
		Или СтрНайти(ВРЕГ(СтрокаИзменения), "[ПАРАМЕТРЫ]") > 0 Тогда
	    Возврат 18;
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[ТАБЛИЧНАЯЧАСТЬ]") > 0
		Или СтрНайти(ВРЕГ(СтрокаИзменения), "[ТАБЛИЧНЫЕЧАСТИ]") > 0 Тогда
	    Возврат 19;
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[СВОЙСТВА]") > 0
		Или СтрНайти(ВРЕГ(СтрокаИзменения), "[СВОЙСТВО]") > 0 
		Тогда
	    Возврат 0; // ?
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[ПОДСИСТЕМА]") > 0
		Или СтрНайти(ВРЕГ(СтрокаИзменения), "[ПОДСИСТЕМЫ]") > 0 
		Тогда
	    Возврат 3;
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[ЭЛЕМЕНТЫ]") > 0
		Или СтрНайти(ВРЕГ(СтрокаИзменения), "[ЭЛЕМЕНТ]") > 0 
		Тогда
	    Возврат 62; // ?
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[КОМАНДНЫЙИНТЕРФЕЙС]") > 0
		Тогда
	    Возврат 62;
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[РЕКВИЗИТ]") > 0 
		Тогда
	    Возврат 22;
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[РЕКВИЗИТЫ]") > 0 
		Тогда
	    Возврат 21;
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[КОМАНДА]") > 0
		Или СтрНайти(ВРЕГ(СтрокаИзменения), "[КОМАНДЫ]") > 0 
		Тогда
	    Возврат 49;
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[ФОРМА") > 0
		Или СтрНайти(ВРЕГ(СтрокаИзменения), "[ФОРМЫ") > 0 
		Тогда
	    Возврат 15;
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[МАКЕТ]") > 0
		Или СтрНайти(ВРЕГ(СтрокаИзменения), "[МАКЕТЫ]") > 0 
		Тогда
	    Возврат 11;
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[ФУНКЦИЯ]") > 0 Тогда
	    Возврат 70;
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[ПРОЦЕДУРА]") > 0 Тогда
	    Возврат 71;
	КонецЕсли;	
	
	Если СтрНайти(ВРЕГ(СтрокаИзменения), "[ПОДПИСКАНАСОБЫТИЕ]") > 0 
		Или СтрНайти(ВРЕГ(СтрокаИзменения), "[ПОДПИСКАНАСОБЫТИЯ]") > 0
		Тогда
		Возврат 54;
	КонецЕсли;	
	
	Возврат 57;

КонецФункции // ОпределитьЗначениеКартинкиОбъектаИзменения()

#КонецОбласти
