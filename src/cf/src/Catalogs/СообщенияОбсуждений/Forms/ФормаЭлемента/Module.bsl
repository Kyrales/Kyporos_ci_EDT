#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Параметры.Свойство("Предмет") И Не Параметры.Свойство("Тема") И ЗначениеЗаполнено(Параметры.Предмет) Тогда
			
			// Заполнение темы на основании предмета
			НайденнаяТема = РаботаСОбсуждениями.НайтиТемуПоПредмету(Параметры.Предмет);
			Если ЗначениеЗаполнено(НайденнаяТема) Тогда
				Объект.ВладелецСообщения = НайденнаяТема;
				Предмет = Объект.ВладелецСообщения.Документ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметры.Свойство("Тема") И ЗначениеЗаполнено(Параметры.Тема) Тогда
			
			// Создание нового сообщения в теме
			Объект.ВладелецСообщения = Параметры.Тема;
			Предмет = Объект.ВладелецСообщения.Документ;
			
		ИначеЕсли Параметры.Свойство("Сообщение") Тогда
			
			// Создание нового сообщения в ответ на сообщение
			Объект.Родитель = Параметры.Сообщение.Ссылка;
			Объект.ВладелецСообщения = Объект.Родитель.ВладелецСообщения;
			Предмет = Объект.ВладелецСообщения.Документ;
			
		ИначеЕсли Параметры.Свойство("Предмет") Тогда
			
			// Создание темы по предмету обсуждения
			Предмет = Параметры.Предмет;
			ТемаРаздел = Справочники.ПапкиФорума.ТемыДокументов;
			ТемаНаименование = НСтр("ru = 'Обсуждение ""%1""'");
			ТемаНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТемаНаименование, Предмет);
			Объект.ПервоеСообщениеТемы = Истина;
			
		ИначеЕсли Параметры.Свойство("ТемаРаздел") Тогда
			
			// Создание темы в разделе
			ТемаРаздел = Параметры.ТемаРаздел;
			Объект.ПервоеСообщениеТемы = Истина;
			
		ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") 
			И Параметры.ЗначенияЗаполнения.Свойство("Тема") Тогда
			
			Объект.ВладелецСообщения = Параметры.ЗначенияЗаполнения.Тема;
			Предмет = Объект.ВладелецСообщения.Документ;
			
		ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") 
			И Параметры.ЗначенияЗаполнения.Свойство("Предмет") Тогда
			
			Предмет = Параметры.ЗначенияЗаполнения.Предмет;
			
		ИначеЕсли Параметры.Свойство("ШаблонДокумента")
			И Параметры.ШаблонДокумента = "СоздатьПустойДокумент" Тогда
			
			// Создание темы
			Объект.ПервоеСообщениеТемы = Истина;
			
		ИначеЕсли Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
			
			Основание = Параметры.Основание;
			Если ТипЗнч(Основание) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				
				ТемаОснование = Основание;
				ТемаРаздел = ТемаОснование.Папка;
				ТемаНаименование = ТемаОснование.Наименование;
				
				Объект.ПервоеСообщениеТемы = Истина;
				
			КонецЕсли;
			
		Иначе
			
			Сообщение =
				НСтр("ru = 'Для создания нового сообщения необходимо сначала выбрать тему обсуждения'");
			ОбщегоНазначения.СообщитьПользователю(Сообщение,,,, Отказ);
			
			Возврат;
			
		КонецЕсли;
		
		Если Параметры.Свойство("ТекстНовогоСообщения") Тогда
			
			Объект.ТекстСообщения = Параметры.ТекстНовогоСообщения;
			
		КонецЕсли;
		
		СозданиеСообщения = Истина;
		
	Иначе
		
		ОбновитьФайлСообщения();
		ОбновитьДанныеТемы();
		
	КонецЕсли;
	
	// Режим чтения
	УстановитьРежимЧтения();
	
	// Прочтение
	ОповеститьОПрочтении = РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Объект.Ссылка);
	
	// Файлы
	Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	Файлы.Параметры.УстановитьЗначениеПараметра(
		"ТекущийПользователь", Пользователи.ТекущийПользователь());
	РаботаСФайламиСлужебный.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	
	// Голосование
	ГолосованиеВПроцессе = Объект.ДобавленоГолосование;
	ОбновитьГолосованиеСервер(Ложь);
	
	// Настройка отображения формы
	УстановитьЗаголовокФормы();
	УстановитьВидимостьЭлементов();
	СформироватьНаЧтоОтвечаем();
	
	// Показ помеченных на удаление файлов
	ПоказатьПомеченныеНаУдаление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		Ложь);
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	
	// Действие при открытии формы
	Параметры.Свойство("ДействиеПриОткрытии", ДействиеПриОткрытии);
	Элементы.ПервыйПрикрепленныйФайл.АктивизироватьПоУмолчанию = (ДействиеПриОткрытии = "ОткрытьФайлы")
		И КоличествоФайлов = 1;
	Элементы.Файлы.АктивизироватьПоУмолчанию = (ДействиеПриОткрытии = "ОткрытьФайлы")
		И КоличествоФайлов > 1;
	Элементы.Голосование.АктивизироватьПоУмолчанию = (ДействиеПриОткрытии = "ОткрытьГолосование");
	
	// Представление предмета
	ПредметСтрокой = РаботаСОбсуждениями.ПолучитьПредставлениеПредмета(Предмет);
	
	// Автор и дата
	СформироватьАвторДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РаботаСПрочтениямиКлиент.ОповеститьОПрочтении(Объект.Ссылка, ОповеститьОПрочтении);
	
	УстановитьДоступностьФайловыхКоманд();
	
	// Действие при открытии формы
	Если ДействиеПриОткрытии = "ОткрытьФайлы" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаФайлы;
	ИначеЕсли ДействиеПриОткрытии = "ОткрытьГолосование" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаГолосование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		Если Объект.Ссылка = ВыбранноеЗначение Тогда
			ТекстПредупреждения = НСтр("ru = 'Сообщение форума не может отвечать на самого себя.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Объект.Родитель = ВыбранноеЗначение;
		СформироватьНаЧтоОтвечаем();
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		ОбработатьОповещениеОНовыхФайлахСервер();
		Если Параметр <> Неопределено Тогда
			Элементы.Файлы.ТекущаяСтрока = Параметр;
		КонецЕсли;
		Если КоличествоФайлов > 1 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаФайлы;
		КонецЕсли;
		УстановитьДоступностьФайловыхКоманд();
		УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		Если Параметр.Свойство("ВладелецФайла") 
			И Параметр.ВладелецФайла = Объект.Ссылка Тогда
			ОбработатьОповещениеОНовыхФайлахСервер();
			ФайлСозданный = Неопределено;
			Если Параметр.Свойство("Файл", ФайлСозданный) Тогда
				Элементы.Файлы.ТекущаяСтрока = ФайлСозданный;
			КонецЕсли;
			Если КоличествоФайлов > 1 Тогда
				Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаФайлы;
			КонецЕсли;
			УстановитьДоступностьФайловыхКоманд();
			УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненоГолосование" И Параметр = Объект.Ссылка Тогда
		ОбновитьГолосованиеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьВидимостьЭлементов();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СозданиеНовойТемы = Не ЗначениеЗаполнено(ТекущийОбъект.ВладелецСообщения);
	
	ОповеститьОСозданииНовойТемы = СозданиеНовойТемы И Не ЗначениеЗаполнено(Предмет);
	ПараметрыЗаписи.Вставить("ОповеститьОСозданииНовойТемы", ОповеститьОСозданииНовойТемы);
	
	ОповеститьОСозданииТемыПоПредмету = СозданиеНовойТемы И ЗначениеЗаполнено(Предмет);
	ПараметрыЗаписи.Вставить("ОповеститьОСозданииТемыПоПредмету", ОповеститьОСозданииТемыПоПредмету);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СозданиеНовойТемы", СозданиеНовойТемы);
	Если СозданиеНовойТемы Тогда
		РеквизитыТемы = ПолучитьРеквизитыТемы();
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РеквизитыТемы", РеквизитыТемы);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ФормироватьУведомлениеПоЭлектроннойПочте") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ФормироватьУведомлениеПоЭлектроннойПочте", ПараметрыЗаписи.ФормироватьУведомлениеПоЭлектроннойПочте);
	Иначе
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ФормироватьУведомлениеПоЭлектроннойПочте", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Если ТекущийОбъект.ПервоеСообщениеТемы Тогда
		ТемаОбъект = ТекущийОбъект.ВладелецСообщения.ПолучитьОбъект();
		ТемаОбъект.Заблокировать();
		РеквизитыТемы = ПолучитьРеквизитыТемы();
		ЗаполнитьЗначенияСвойств(ТемаОбъект, РеквизитыТемы, , "Документ");
		ТемаОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Файлы
	ЗначениеПараметра = Файлы.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ВладелецФайла"));
	Если Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда 
		Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	КонецЕсли;
	
	ОбновитьДанныеТемы();
	
	Если УдалитьРезультатыГолосованияПослеЗаписи Тогда
		РаботаСОбсуждениями.УдалитьГолосование(Объект.Ссылка);
		УдалитьРезультатыГолосованияПослеЗаписи = Ложь;
	КонецЕсли;
	
	ГолосованиеВПроцессе = ТекущийОбъект.ДобавленоГолосование;
	
	ОбновитьГолосованиеСервер(Ложь);
	
	УстановитьВидимостьЭлементов();
	УстановитьЗаголовокФормы();
	
	// Автор и дата
	СформироватьАвторДата();
	
	// УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ОповеститьОСозданииТемыПоПредмету Тогда
		ПараметрыОповещения = Новый Структура("Тема,Предмет", 
			Объект.ВладелецСообщения, 
			Предмет);
		Оповестить("СозданаТемаПоПредмету", ПараметрыОповещения);
	КонецЕсли;
	
	Если ПараметрыЗаписи.ОповеститьОСозданииНовойТемы Тогда
		ПараметрыОповещения = Новый Структура("Тема", Объект.ВладелецСообщения);
		Оповестить("Создание_ТемыОбсуждений", ПараметрыОповещения);
	КонецЕсли;
	
	Если Объект.ПервоеСообщениеТемы Тогда
		Оповестить("Изменение_ТемыОбсуждений");
	Иначе
		Оповестить("Изменение_СообщенияОбсуждений", Объект.Ссылка);
	КонецЕсли;
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не Объект.ПервоеСообщениеТемы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ТемаРаздел");
		МассивНепроверяемыхРеквизитов.Добавить("ТемаНаименование");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// не восстанавливать настройки получателей у не новых элементов
		Настройки.Вставить("Объект.ОтправитьПоПочтеИсполнителю",Неопределено);
		Настройки.Вставить("Объект.ОтправитьПоПочтеПользователю",Неопределено);
		Настройки.Вставить("Объект.ОтправитьПоПочтеРабочейГруппе",Неопределено);
		
		Настройки.Удалить("Объект.ОтправитьПоПочтеИсполнителю");
		Настройки.Удалить("Объект.ОтправитьПоПочтеПользователю");
		Настройки.Удалить("Объект.ОтправитьПоПочтеРабочейГруппе");
		
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Файлы

&НаКлиенте
Процедура ПервыйПрикрепленныйФайлНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ФайлПрикрепленный = Неопределено ИЛИ ФайлПрикрепленный.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ФайлПрикрепленный, ЭтаФорма.УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Голосование

&НаКлиенте
Процедура ГолосованиеПриИзменении(Элемент)
	
	Элементы.Проголосовать.Доступность = ЗначениеЗаполнено(Голосование);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТекстСообщенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если КоличествоФайлов <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Неопределено, ФайлПрикрепленный);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если КоличествоФайлов <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Неопределено, ФайлПрикрепленный);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецСообщенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыОповещения = Новый Структура("Тема, Сообщение", 
		Объект.ВладелецСообщения, 
		Объект.Ссылка);
	Оповестить("ВыбраноСообщениеДляПросмотра", ПараметрыОповещения);
		
	Форма = ОткрытьФорму("Справочник.ТемыОбсуждений.Форма.ФормаПросмотраТемы",
		Новый Структура("Тема, ТекущееСообщение",
			Объект.ВладелецСообщения,
			Объект.Ссылка),
		,	
		Объект.ВладелецСообщения.УникальныйИдентификатор());
			
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНеУказаноНаЧтоОтвечаемНажатие(Элемент)
	
	ВыбратьРодителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Предмет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
	ПерсональныеНастройкиРаботыСФайлами =
		РаботаСФайламиСлужебныйКлиент.ПерсональныеНастройкиРаботыСФайлами();
	КакОткрывать = ПерсональныеНастройкиРаботыСФайлами.ДействиеПоДвойномуЩелчкуМыши;
	
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока, Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);  // АПК:278 Допускать вызов сервеного вызова 
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения(
			"УстановитьДоступностьКомандКлиент", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиСлужебныйКлиент.ОткрытьФайлСОповещением(
			Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПараметрыЗаписи = Новый Структура("ФормироватьУведомлениеПоЭлектроннойПочте",Ложь);
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:.'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 2;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания, Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка создания нового файла: %1'"),
				КраткоеПредставлениеОшибки(Инфо));
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	ОбновитьФайлСообщения();
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВариантыГолосования

&НаКлиенте
Процедура ВариантыГолосованияТекстВариантаПриИзменении(Элемент)
	
	УдалитьРезультатыГолосования();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыГолосованияПередНачаломИзменения(Элемент, Отказ)
	
	ПредложитьУдалитьРезультатыГолосования(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыГолосованияПередУдалением(Элемент, Отказ)
	
	ПредложитьУдалитьРезультатыГолосования(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыГолосованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПредложитьУдалитьРезультатыГолосования(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Файлы

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		ПараметрыЗаписи = Новый Структура("ФормироватьУведомлениеПоЭлектроннойПочте",Ложь);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдаление(Команда)
	
	ПоказатьПомеченныеНаУдаление = Не ПоказатьПомеченныеНаУдаление;
	ПоказатьПомеченныеНаУдалениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если (ЗначениеЗаполнено(ТекущиеДанные.Редактирует) И НЕ ТекущиеДанные.ФайлРедактируетТекущийПользователь)
		ИЛИ ТекущиеДанные.Зашифрован
		ИЛИ ТекущиеДанные.ПодписанЭП Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Неопределено, ТекущиеДанные.Ссылка,УникальныйИдентификатор);
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован
		ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Редактирует) И НЕ ТекущиеДанные.ФайлРедактируетТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка, , УникальныйИдентификатор);
	РаботаСФайламиСлужебныйКлиент.СохранитьКак(Неопределено, ДанныеФайла, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	МассивФайлов = Новый Массив;
	Для Каждого ЭлементСписка Из Элементы.Файлы.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ЭлементСписка);
		
		Если НЕ ДанныеСтроки.ФайлРедактируется
			ИЛИ НЕ ДанныеСтроки.ФайлРедактируетТекущийПользователь Тогда
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	Если МассивФайлов.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивФайлов",                     МассивФайлов);
		ПараметрыФормы.Вставить("ВозможностьСоздаватьВерсииФайлов", ВозможностьСоздаватьВерсииФайлов);  
		ПараметрыФормы.Вставить("Редактирует",                      ДанныеСтроки.РедактируетПользователь);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ФормаЗавершениеРедактирования", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли МассивФайлов.Количество() = 1 Тогда 
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
		ПараметрыОбновленияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОбновленияФайла(Обработчик, ДанныеСтроки.Ссылка, УникальныйИдентификатор);  // АПК:278 Допускать вызов служебного модуля
		Если Не ВозможностьСоздаватьВерсииФайлов Тогда
			ПараметрыОбновленияФайла.Вставить("СоздатьНовуюВерсию", Ложь);
		КонецЕсли;
		РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);   // АПК:278 Допускать вызов служебного модуля
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваФайла(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",              ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр",    ТолькоПросмотр);
	ПараметрыФормы.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	
	РаботаСФайламиКлиент.ОткрытьФормуФайла(ТекущиеДанные.Ссылка,, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлПервый(Команда)
	
	Если ФайлПрикрепленный = Неопределено Или ФайлПрикрепленный.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьФайлПервыйЗавершение", ЭтотОбъект);
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'Пометить ""%1"" на удаление?'"), ФайлПрикрепленный);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлПервыйЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПометкуУдаленияФайла();
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлПервый(Команда)
	
	Если ФайлПрикрепленный = Неопределено ИЛИ ФайлПрикрепленный.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ФайлПрикрепленный, ЭтаФорма.УникальныйИдентификатор);
	
	Если (  ДанныеФайла.ФайлРедактируется
	      И НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь)
	 ИЛИ ДанныеФайла.Зашифрован
	 ИЛИ ДанныеФайла.ПодписанЭП Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ФайлПрикрепленный);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФайла.ФайлРедактируется) Тогда
		РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Неопределено,
			ДанныеФайла, УникальныйИдентификатор);
	Иначе
		РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Неопределено,
			ДанныеФайла, УникальныйИдентификатор);
		
		ОповеститьОбИзменении(ФайлПрикрепленный);
		Оповестить("Запись_Файл", Новый Структура, ФайлПрикрепленный);
	КонецЕсли;
	
	УстановитьДоступностьКоманд(ФайлПрикрепленный);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеПервогоФайла(Команда)

	Если ФайлПрикрепленный = Неопределено ИЛИ ФайлПрикрепленный.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(ФайлПрикрепленный);  // АПК:278 Допускать вызов служебного модуля 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьРедактированиеВыполненоПомещение", ЭтотОбъект);
	ПараметрыОбновленияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОбновленияФайла(ОписаниеОповещения, ДанныеФайла.Ссылка, УникальныйИдентификатор);   // АПК:278 Допускать вызов служебного модуля
	ПараметрыОбновленияФайла.ХранитьВерсии = ДанныеФайла.ХранитьВерсии;
	Если Не ВозможностьСоздаватьВерсииФайлов Тогда
		ПараметрыОбновленияФайла.Вставить("СоздатьНовуюВерсию", Ложь);
	КонецЕсли;
	ПараметрыОбновленияФайла.ФайлРедактируетТекущийПользователь = ДанныеФайла.ФайлРедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ДанныеФайла.Редактирует;
	РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла); // АПК:278 Допускать вызов служебного модуля
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВыполненоПомещение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	ОповеститьОбИзменении(ФайлПрикрепленный);
	Оповестить("Запись_Файл", Новый Структура, ФайлПрикрепленный);
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПервыйФайл(Команда)
	
	РаботаСФайламиКлиент.ОткрытьФормуФайла(ФайлПрикрепленный);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ОсвободитьФайлы(Элементы.Файлы);
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	РаботаСФайламиСлужебныйКлиент.ОбновитьИзФайлаНаДискеСОповещением(Неопределено, ДанныеФайла, УникальныйИдентификатор);
	
	
КонецПроцедуры

#КонецОбласти

#Область Голосование

&НаКлиенте
Процедура ДобавитьГолосование(Команда)
	
	Объект.ДобавленоГолосование = Истина;
	Если Объект.ВариантыГолосования.Количество() = 0 Тогда
		ЗаполнитьВариантыГолосованияПоУмолчанию();
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаГолосование;
	
КонецПроцедуры

&НаКлиенте
Процедура Проголосовать(Команда)
	
	ВыбранныйВариантГолосования = Голосование;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		ПараметрыЗаписи = Новый Структура("ФормироватьУведомлениеПоЭлектроннойПочте",Ложь);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	РаботаСОбсуждениямиКлиент.Проголосовать(Объект.Ссылка, ВыбранныйВариантГолосования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСвойГолос(Команда)
	
	ОтменитьСвойГолосСервер();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Прокомментировать(Команда)
	
	ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", 
		Новый Структура("Сообщение, ТекстНовогоСообщения",
			Объект.Ссылка,
			ГолосПользователя));
			
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГолосование(Команда)
	
	ТекстВопроса = 
		НСтр("ru = 'Если изменить голосование, то все предыдущие результаты голосования будут удалены.
			|Продолжить?'");
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ИзменитьГолосованиеЗавершение", ЭтотОбъект);
		
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьГолосование(Команда)
	
	ТекстВопроса = 
		НСтр("ru = 'Если удалить голосование, то все предыдущие результаты голосования будут удалены.
			|Продолжить?'");
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("УдалитьГолосованиеЗавершение", ЭтотОбъект);
		
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыборСообщенияИзТемы(Команда)
	
	ВыбратьРодителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСообщению(Команда)
	
	ПоказатьЗначение(, Объект.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТеме(Команда)
	
	ПоказатьЗначение(, Объект.ВладелецСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьНаСообщение(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветитьНаСообщениеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для ответа на сообщение необходимо записать. Выполнить запись?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сообщение", Объект.Ссылка);
	ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьНаСообщениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура("ФормироватьУведомлениеПоЭлектроннойПочте",Ложь);
	Если Не Записать(ПараметрыЗаписи) Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		"Создание:", 
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сообщение", Объект.Ссылка);
	ОткрытьФорму("Справочник.СообщенияОбсуждений.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Цитировать(Команда)
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		
		ВыделенныйТекстИсходногоСообщения = Элементы.РодительТекстСообщения.ВыделенныйТекст;
		Если ЗначениеЗаполнено(ВыделенныйТекстИсходногоСообщения) Тогда
			ТекстЦитирования = ВыделенныйТекстИсходногоСообщения;
		Иначе
			ТекстЦитирования = Элементы.РодительТекстСообщения.ТекстРедактирования;
		КонецЕсли;
		
		ДобавитьКвотирование(ТекстЦитирования, "> ");
		
		ВыделенныйТекстТекущегоСообщения = Элементы.ТекстСообщения.ВыделенныйТекст;
		Если ЗначениеЗаполнено(Элементы.ТекстСообщения.ТекстРедактирования) Тогда
			ТекстЦитирования = Символы.ПС + ТекстЦитирования;
		КонецЕсли;
		Элементы.ТекстСообщения.ВыделенныйТекст = ВыделенныйТекстТекущегоСообщения + ТекстЦитирования;
		
	КонецЕсли;
	
КонецПроцедуры


// Добавляет к каждой строке спереди символ квотирования.
//
&НаСервере
Процедура ДобавитьКвотирование(Текст, Знач СимволКвотирования)
	
	ТекстИсточника = Новый ТекстовыйДокумент;
	ТекстИсточника.УстановитьТекст(Текст);
	КоличествоСтрок = ТекстИсточника.КоличествоСтрок();
	ТекстРезультата = Новый ТекстовыйДокумент;
	
	Для К = 1 По КоличествоСтрок Цикл
		Строка = ТекстИсточника.ПолучитьСтроку(К);
		ТекстРезультата.ДобавитьСтроку(СимволКвотирования + Строка);
	КонецЦикла;
	
	Текст = ТекстРезультата.ПолучитьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьТему(Команда)
	
	ТемаЗакрытая = Истина;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТему(Команда)
	
	ТемаЗакрытая = Ложь;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ПараметрыЗаписи = Новый Структура("ФормироватьУведомлениеПоЭлектроннойПочте",Ложь);
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		КомпонентаПолученияКартинкиИзБуфера = ПараметрыПриложения["УчетЗадачПользователей.КомпонентаПолученияКартинкиИзБуфера"]; 
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			МассивИменФайлов = Новый Массив;
			МассивИменФайлов.Добавить(ПутьКФайлу);
				
			РаботаСФайламиСлужебныйКлиент.ДобавитьФайлыПеретаскиванием(Объект.Ссылка,УникальныйИдентификатор,МассивИменФайлов);

		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Файлы

// Возвращает количество файлов по документу
&НаСервере
Функция КоличествоФайлов(Документ, ПоказатьУдаленные = Ложь) 
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Документ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Если Не ПоказатьУдаленные Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И Файлы.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции

&НаСервере
Процедура ПоказатьПомеченныеНаУдалениеНаСервере()
	
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		ПоказатьПомеченныеНаУдаление);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоказПомеченныхНаУдалениеФайлов()
	
	Элементы.ФайлыПоказатьПомеченныеНаУдаление.Пометка = ПоказатьПомеченныеНаУдаление;
	
	Если ПоказатьПомеченныеНаУдаление Тогда
		ПараметрПометкиУдаления = Новый ПараметрКомпоновкиДанных("НеПоказыватьПомеченныеНаУдаление");
		Для Каждого Элемент Из Файлы.Параметры.Элементы Цикл
			Если Элемент.Параметр = ПараметрПометкиУдаления Тогда
				Элемент.Использование = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Файлы.Параметры.УстановитьЗначениеПараметра("НеПоказыватьПомеченныеНаУдаление", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФайлСообщения()
	
	КоличествоФайлов = 0;
	ФайлПрикрепленный = Справочники.Файлы.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка,МассивФайлов);
	КоличествоФайлов = МассивФайлов.Количество();
	
	Если МассивФайлов.Количество() > 0 Тогда
		ФайлПрикрепленный = МассивФайлов[0];
		
		ФайлИндексКартинки = ФайлПрикрепленный.ИндексКартинки;

		ФайлРедактирует = ФайлПрикрепленный.Редактирует;
		ФайлПрикрепленныйПометкаУдаления = ФайлПрикрепленный.ПометкаУдаления;
		ФайлСРасширением =
			ФайлПрикрепленный.Наименование+ "."
			+ ФайлПрикрепленный.Расширение;
		
		Если ФайлРедактирует = Пользователи.ТекущийПользователь() Тогда
			ФайлРедактируетТекущийПользователь = Истина;
		Иначе
			ФайлРедактируетТекущийПользователь = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивФайлов.Количество() > 1 Тогда
		Элементы.Файлы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(Элементы.Файлы.ТекущаяСтрока, ЭтаФорма.УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуУдаленияФайла()
	
	ОбъектФайлПрикрепленный = ФайлПрикрепленный.ПолучитьОбъект();
	ОбъектФайлПрикрепленный.УстановитьПометкуУдаления(Не ОбъектФайлПрикрепленный.ПометкаУдаления);
	ОбновитьФайлСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд(Параметры = Неопределено)
	
	Если ФайлПрикрепленный <> Неопределено Тогда
		
		Элементы.ЗакончитьРедактированиеПервый.Доступность = ФайлРедактируетТекущийПользователь;
		Элементы.РедактироватьПервый.Доступность = 
			(ФайлРедактирует.Пустая()
			ИЛИ ФайлРедактируетТекущийПользователь)
			И НЕ РежимЧтенияСообщения;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандКлиент(
	Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьФайлСообщения();
	УстановитьДоступностьФайловыхКоманд();
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если (ТекущиеДанные = Неопределено)
		ИЛИ ТипЗнч(Элементы.Файлы.ТекущаяСтрока) <> Тип("СправочникСсылка.СообщенияОбсужденийПрисоединенныеФайлы") Тогда
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОткрытьФайл, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыРедактировать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьСвойстваФайла, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьКак, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОсвободить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Ложь);
			
	Иначе	
		ФайлРедактируетТекущийПользователь = ТекущиеДанные.ФайлРедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОткрытьФайл, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Редактирует.Пустая() И Не РежимЧтенияСообщения);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыРедактировать, 
			Редактирует.Пустая() И Не РежимЧтенияСообщения);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, ФайлРедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование,
			ФайлРедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьСвойстваФайла, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьКак, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Освободить,
			Не Редактирует.Пустая() И Не РежимЧтенияСообщения);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОсвободить,
			Не Редактирует.Пустая() И Не РежимЧтенияСообщения);
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске,
			Истина И Не РежимЧтенияСообщения);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске,
			Истина И Не РежимЧтенияСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеОНовыхФайлахСервер()
	
	ОбновитьФайлСообщения();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область Голосование

&НаСервере
Процедура ОбновитьГолосованиеСервер(УстановитьВидимостьЭлементов = Истина)
	
	Элементы.Голосование.СписокВыбора.Очистить();
	
	РезультатГолосования = РаботаСОбсуждениями.ПолучитьРезультатГолосования(Объект.Ссылка);
	Для Каждого РезультатГолосования Из РезультатГолосования Цикл
		Если РезультатГолосования.Значение = 0 Тогда
			ВсегоГолосов = РезультатГолосования.Представление;
			Продолжить;	
		КонецЕсли;
		
		Элементы.Голосование.СписокВыбора.Добавить(
			РезультатГолосования.Значение,
			РезультатГолосования.Представление);
	КонецЦикла;
	
	Голосование = РаботаСОбсуждениями.ПолучитьРезультатГолосованияТекущегоПользователя(Объект.Ссылка);
	ГолосПользователя = РаботаСОбсуждениями.ПолучитьПредставлениеГолосаПользователя(Объект.Ссылка);
	Если Голосование <> 0 Тогда
		ПользовательПроголосовал = Истина;
	Иначе
		ПользовательПроголосовал = Ложь;
	КонецЕсли;	
	
	Если УстановитьВидимостьЭлементов Тогда
		УстановитьВидимостьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСвойГолосСервер()
	
	РаботаСОбсуждениями.ОтменитьГолос(Объект.Ссылка);
	ОбновитьГолосованиеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантыГолосованияПоУмолчанию()
	
	Объект.ВопросГолосования = "";
	НовыйВариантГолосования = Объект.ВариантыГолосования.Добавить();
	НовыйВариантГолосования.ТекстВарианта = НСтр("ru = 'Да'");
	НовыйВариантГолосования = Объект.ВариантыГолосования.Добавить();
	НовыйВариантГолосования.ТекстВарианта = НСтр("ru = 'Нет'");
	НовыйВариантГолосования = Объект.ВариантыГолосования.Добавить();
	НовыйВариантГолосования.ТекстВарианта = НСтр("ru = 'Не знаю'");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРезультатыГолосования()
	
	Если ГолосованиеВПроцессе Тогда
		ГолосованиеВПроцессе = Ложь;
		УдалитьРезультатыГолосованияПослеЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьУдалитьРезультатыГолосования(Отказ)
	
	Если Не ГолосованиеВПроцессе Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредложитьУдалитьРезультатыГолосованияЗавершение", ЭтотОбъект);
	ТекстВопроса = 
		НСтр("ru = 'Если изменить варианты ответов, то все предыдущие результаты голосования будут удалены.
			|Продолжить редактирование?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьУдалитьРезультатыГолосованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьРезультатыГолосования();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ЯвляетсяТемой = Объект.ПервоеСообщениеТемы;
	
	// Закрытая тема
	Элементы.ФормаОтветитьНаСообщение.Доступность = Не ТемаЗакрытая;
	Элементы.ТемаЗакрыта.Видимость = ТемаЗакрытая;
	Элементы.ЗакрытьТему.Видимость = ЯвляетсяТемой И Не РежимЧтенияСообщения И Не ТемаЗакрытая;
	Элементы.ОткрытьТему.Видимость = ЯвляетсяТемой И Не РежимЧтенияСообщения И ТемаЗакрытая;
	
	// Предмет
	Элементы.Предмет.Видимость = ЗначениеЗаполнено(Предмет);
	
	// Тема
	Элементы.ТемаРаздел.Видимость = ЯвляетсяТемой;
	Элементы.ТемаНаименование.Видимость = ЯвляетсяТемой И Не РежимЧтенияСообщения;
	Элементы.ФормаПерейтиКТеме.Видимость = ЗначениеЗаполнено(Объект.ВладелецСообщения);
	Элементы.ФормаПерейтиКТеме.ТолькоВоВсехДействиях = Не (Элементы.ТемаНаименование.Видимость);
	Элементы.ТемаСсылка.Видимость = Не ЯвляетсяТемой Или РежимЧтенияСообщения;
	Элементы.ТемаРаздел.Видимость = ЯвляетсяТемой;
	Элементы.ФормаВыборСообщенияИзТемы.Видимость = Не ЯвляетсяТемой И Не РежимЧтенияСообщения;
	Элементы.ФормаПерейтиКСообщению.Видимость = Не ЯвляетсяТемой И РежимЧтенияСообщения;
	
	// Файлы
	Элементы.ДобавитьФайл.Видимость = (КоличествоФайлов = 0) И Не РежимЧтенияСообщения;
	Элементы.ВставитьКартинкуИзБуфера.Видимость = (КоличествоФайлов = 0) И Не РежимЧтенияСообщения;
	Элементы.ГруппаФайл.Видимость = (КоличествоФайлов = 1);
	Элементы.СтраницаФайлы.Видимость = (КоличествоФайлов > 1);
	
	// Режим чтения
	Элементы.ФормаЗакрыть.Видимость = РежимЧтенияСообщения;
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = РежимЧтенияСообщения;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = Не РежимЧтенияСообщения;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Не РежимЧтенияСообщения;
	Элементы.СоздатьФайл.Доступность = Не РежимЧтенияСообщения;
	Элементы.ФайлыВставитьКартинкуИзБуфера.Доступность = Не РежимЧтенияСообщения;
	
	Если Элементы.Найти("КонтекстноеМенюФайлыСоздать") <> Неопределено Тогда
		Элементы.КонтекстноеМенюФайлыСоздать.Доступность = Не РежимЧтенияСообщения;
		Элементы.Удалить.Доступность = Не РежимЧтенияСообщения;
		Элементы.КонтекстноеМенюФайлыУстановитьПометкуУдаления.Доступность = Не РежимЧтенияСообщения;
	КонецЕсли;
	
	Элементы.СоздатьФайлОдинКомПанель.Доступность = Не РежимЧтенияСообщения;
	Элементы.ВставитьКартинкуИзБуфераОдин.Доступность = Не РежимЧтенияСообщения;
	Элементы.РедактироватьПервый.Доступность = Не РежимЧтенияСообщения;
	Элементы.УдалитьФайлПервый.Доступность = Не РежимЧтенияСообщения;
	Элементы.КоманднаяПанельДобавление.Видимость = Не РежимЧтенияСообщения;
	Элементы.ЦитироватьИсходноеСообщение.Видимость = Не РежимЧтенияСообщения;
	Элементы.ПерейтиКСообщению.Видимость = РежимЧтенияСообщения;
	Элементы.ФормаУстановитьПометкуУдаления.Видимость = Не РежимЧтенияСообщения;
	
	// Автора сообщения можно редактировать только полным правам и ответственному за учет задач
	Элементы.АвторСообщения.ТолькоПросмотр = Не (РаботаСЗадачами.ЭтоПолноправныйПользовательЗадач());
	
	// Создание сообщения
	Элементы.ФормаОтветитьНаСообщение.Видимость = Не СозданиеСообщения;
	
	// Голосование
	ГолосованиеВключено = Объект.ДобавленоГолосование;
	Элементы.СтраницаГолосование.Видимость = ГолосованиеВключено;
	Элементы.ДобавитьГолосование.Видимость = Не ГолосованиеВключено;
	Элементы.УдалитьГолосование.Видимость = ГолосованиеВключено И Не РежимЧтенияСообщения;
	Элементы.ГруппаГолосование.Видимость = ГолосованиеВПроцессе;
	Элементы.Проголосовать.Видимость = ГолосованиеВПроцессе;
	Элементы.Прокомментировать.Видимость = ГолосованиеВПроцессе;
	Элементы.ОтменитьСвойГолос.Видимость = ГолосованиеВПроцессе;
	Элементы.ИзменитьГолосование.Видимость = ГолосованиеВПроцессе И Не РежимЧтенияСообщения;
	
	// Голосование редактируется
	ГолосованиеРедактируется = ГолосованиеВключено И Не ГолосованиеВПроцессе И Не РежимЧтенияСообщения;
	Элементы.ДобавитьВариантГолосования.Видимость = ГолосованиеРедактируется;
	Элементы.УдалитьВариантГолосования.Видимость = ГолосованиеРедактируется;
	Элементы.ВариантыГолосования.Видимость = ГолосованиеРедактируется;
	Элементы.ВопросГолосования.РедактированиеТекста = ГолосованиеРедактируется;
	
	// Голосование доступно для участия
	ВыбранВариантГолосования = ЗначениеЗаполнено(Голосование);
	ГолосованиеДоступноДляУчастия = Не ТемаЗакрытая;
	Элементы.Голосование.Доступность = ГолосованиеДоступноДляУчастия;
	Элементы.Проголосовать.Доступность = ГолосованиеДоступноДляУчастия И ВыбранВариантГолосования;
	Элементы.Прокомментировать.Доступность = ГолосованиеДоступноДляУчастия И ПользовательПроголосовал;
	Элементы.ОтменитьСвойГолос.Доступность = ГолосованиеДоступноДляУчастия И ПользовательПроголосовал;
	
	// Тип закладок страниц
	ОтображатьЗакладки = 
		Элементы.СтраницаФайлы.Видимость
		Или Элементы.СтраницаГолосование.Видимость;
	Если ОтображатьЗакладки Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	// На что отвечаем
	УказанРодитель = ЗначениеЗаполнено(Объект.Родитель);
	Элементы.ГруппаНаЧтоОтвечаем.Видимость = УказанРодитель;
	Элементы.ГиперссылкаНеУказаноНаЧтоОтвечаем.Видимость = Не УказанРодитель И Не Объект.ПервоеСообщениеТемы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимЧтения()
	
	УстановитьРежимЧтения = Ложь;
	
	Если Объект.ВладелецСообщения.Закрытая И Не Объект.ПервоеСообщениеТемы Тогда
		
		УстановитьРежимЧтения = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
		УстановитьРежимЧтения = Истина;
			
	КонецЕсли;
	
	Если УстановитьРежимЧтения Тогда
		ТолькоПросмотр = Истина;
		РежимЧтенияСообщения = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Включение режима редактирования сообщения (команда доступна только для "Полные права" или "Контроль задач")
//
&НаКлиенте
Процедура РедактироватьСообщение(Команда)
	
	ТолькоПросмотр = Ложь;
	
	РежимЧтенияСообщения = Ложь;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	АвтоЗаголовок = Не Объект.ПервоеСообщениеТемы;
	Если Объект.ПервоеСообщениеТемы Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ТекстЗаголовка = РаботаСОбсуждениями.ПолучитьЗаголовок(ТемаНаименование);
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 (%2)", ТекстЗаголовка, НСтр("ru = 'Тема'"));
		Иначе
			Заголовок = НСтр("ru = 'Тема (создание)'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТемы()
	
	ТемаНаименование = Объект.ВладелецСообщения.Наименование;
	ТемаРаздел = Объект.ВладелецСообщения.Папка;
	Предмет = Объект.ВладелецСообщения.Документ;
	ТемаЗакрытая = Объект.ВладелецСообщения.Закрытая;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыТемы()
	
	СтруктураРеквизитов = Справочники.ТемыОбсуждений.ПолучитьСтруктуруРеквизитов();
	
	СтруктураРеквизитов.Наименование = ТемаНаименование;
	СтруктураРеквизитов.Документ = Предмет;
	СтруктураРеквизитов.Папка = ТемаРаздел;
	СтруктураРеквизитов.Закрытая = ТемаЗакрытая;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаСервере
Процедура СформироватьНаЧтоОтвечаем()
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		
		ДатаРодителя = Макс(Объект.Родитель.ДатаСоздания, Объект.Родитель.ДатаИзменения);
		Элементы.НадписьНаЧтоОтвечаем.Заголовок =
			ПолучитьСтрокуАвторДата(Объект.Родитель.Автор, ДатаРодителя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьАвторДата()
	
	ДатаРодителя = Макс(Объект.ДатаСоздания, Объект.ДатаИзменения);
	Элементы.НадписьАвторДата.Заголовок = ПолучитьСтрокуАвторДата(Объект.Автор, ДатаРодителя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокуАвторДата(Автор, Дата)
	
	ЧастиЗаголовка = Новый Массив;
	
	// Автор
	ТекстАвтор = Строка(Автор);
	СтрокаАвтор = Новый ФорматированнаяСтрока(ТекстАвтор, ШрифтыСтиля.ВажнаяНадписьШрифт, , , ПолучитьНавигационнуюСсылку(Автор));
	ЧастиЗаголовка.Добавить(СтрокаАвтор);
	
	Если ЗначениеЗаполнено(Дата) Тогда
		// Писал
		СтрокаПисал = НСтр("ru = ' писал '");
		ЧастиЗаголовка.Добавить(СтрокаПисал);
		
		// Дата
		СтрокаДата = РаботаСОбсуждениямиКлиентСервер.СформироватьТекстовоеПредставлениеДаты(Дата, Ложь);
		ЧастиЗаголовка.Добавить(СтрокаДата);
	КонецЕсли;
	
	СтрокаАвторДата = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
	
	Возврат СтрокаАвторДата;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьРодителя()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Родитель);
	ПараметрыФормы.Вставить("Тема", Объект.ВладелецСообщения);
	
	ОткрытьФорму("Справочник.СообщенияОбсуждений.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГолосованиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	УдалитьРезультатыГолосования();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьГолосованиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.ДобавленоГолосование = Ложь;
	УдалитьРезультатыГолосования();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

#КонецОбласти