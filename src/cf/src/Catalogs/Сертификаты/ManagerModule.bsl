#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Установливает напоминание по сертификату (за указанную размерность)
//
// Параметры:
//  ПредметСертификат			 - СправочникСсылка.Сертификаты
//  СрокДействия				 - Дата
//  СписокПользователей			 - Массив из СправочникСсылка.Пользователи
//  ТекстНапоминания			 - Строка
//  РазмерностьСрокаУведомления	 - Строка - Варианты: Месяц, Неделя, День, Час, Секунда
//
Процедура УстановитьНапоминаниеПоСертификатуОтветственным(ПредметСертификат,
		СрокДействия, СписокПользователей, ТекстНапоминания, РазмерностьСрокаУведомления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокУведомления = ОбщегоНазначенияКупоросСервер.ДобавитьКДате(СрокДействия, -1, РазмерностьСрокаУведомления);
	
	Если СрокУведомления < ТекущаяДатаСеанса() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторНапоминания = "ПриближаетсяПросрочкаСертификата";
	
	СписокПользователейДляЗаписи = Новый Массив;
	
	// Формирование списка с учетом групп пользователей.
	Для каждого ТекПользователь Из СписокПользователей Цикл
		
		Если ТипЗнч(ТекПользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			
			НовыеПользователи = ТекПользователь.Состав.ВыгрузитьКолонку("Пользователь");
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокПользователейДляЗаписи, НовыеПользователи, Истина);
			
			Продолжить;
			
		КонецЕсли;
		
		СписокПользователейДляЗаписи.Добавить(ТекПользователь);
		
	КонецЦикла;
	
	СписокПользователейДляЗаписи = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПользователейДляЗаписи);
	
	Для каждого ТекПользователь Из СписокПользователейДляЗаписи Цикл
		
		ДопПараметрыНапоминания = Новый Структура;
		ДопПараметрыНапоминания.Вставить("Пользователь", ТекПользователь);
		ДопПараметрыНапоминания.Вставить("УведомлятьПоЭлектроннойПочте", Истина);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьТелеграм") Тогда
			ДопПараметрыНапоминания.Вставить("УведомлятьПоТелеграм", Истина);
		КонецЕсли;
		
		НапоминанияПользователяСлужебный.ПодключитьПроизвольноеНапоминание(ТекстНапоминания, СрокУведомления, 3600,
			ПредметСертификат, ИдентификаторНапоминания, ДопПараметрыНапоминания);
		
	КонецЦикла;
	
КонецПроцедуры

// Удалить напоминания по сертификату
//
// Параметры:
//  ПредметСертификат	 - СправочникСсылка.Сертификаты
//
Процедура УдалитьНапоминанияПоСертификату(ПредметСертификат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторНапоминания = "ПриближаетсяПросрочкаСертификата";
	
	НайденныеНапоминания = ОбщегоНазначенияКупоросСервер.НайтиНапоминанияПоВсемПользователям(ПредметСертификат, ИдентификаторНапоминания);
	
	Для каждого ТекНапоминание Из НайденныеНапоминания Цикл
		
		НапоминанияПользователя.УдалитьНапоминание(ТекНапоминание);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновление напоминаний активных сертификатов, там где используются группы пользователей
// Вызывается из команды "Обновление всех напоминаний с группами" в форме списка для полных прав
Процедура ОбновлениеНапоминанийАктивныхСертификатовТолькоСГруппамиПользователей() Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Обновлять может только пользователь с полными правами.'"));
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	СертификатыОтветственные.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(СертификатыОтветственные.Пользователь КАК Справочник.ГруппыПользователей) КАК ГруппаПользователя
		|ИЗ
		|	Справочник.Сертификаты.Ответственные КАК СертификатыОтветственные
		|ГДЕ
		|	СертификатыОтветственные.Пользователь ССЫЛКА Справочник.ГруппыПользователей
		|	И НЕ СертификатыОтветственные.Ссылка.ПометкаУдаления
		|	И СертификатыОтветственные.Ссылка.СтатусСертификата = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатов.Активный)
		|
		|СГРУППИРОВАТЬ ПО
		|	СертификатыОтветственные.Ссылка,
		|	ВЫРАЗИТЬ(СертификатыОтветственные.Пользователь КАК Справочник.ГруппыПользователей)";
	
	//Запрос.УстановитьПараметр("ТекущаяДата", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСертификат = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСертификат.НапоминанияУстановлены = Ложь;
		Попытка
			
			ОбъектСертификат.Записать();
			
		Исключение
			
			КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ИмяСобытия = НСтр("ru = 'ИТАктивы.Обновление групп пользователей сертификатов'", КодЯзыка);
			ТекстКомментария = НСтр("ru = 'Ошибка работы системы: 
					|%1'", КодЯзыка);
			КомментарийДляЖурнала = СтрШаблон(ТекстКомментария, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , КомментарийДляЖурнала);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстКомментария);
			
		КонецПопытки;
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Обновлен: %1.'"), Выборка.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
	
КонецПроцедуры

// Обновление статуса сертификата с активного на просроченный
//
Процедура ОбновлениеДанныхПоПросрочкеСертификатов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	Сертификаты.СрокДействия КАК СрокДействия,
		|	Сертификаты.СтатусСертификата КАК СтатусСертификата
		|ИЗ
		|	Справочник.Сертификаты КАК Сертификаты
		|ГДЕ
		|	Сертификаты.СрокДействия < &ТекущаяДата
		|	И Сертификаты.СтатусСертификата = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатов.Активный)
		|	И Сертификаты.СтатусСертификата <> ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатов.Просрочен)
		|	И НЕ Сертификаты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСертификат = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСертификат.СтатусСертификата = Перечисления.СтатусыСертификатов.Просрочен;
		ОбъектСертификат.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	//Ограничение.Текст =
	//"ПрисоединитьДополнительныеТаблицы
	//|		ЭтотСписок КАК Сертификат
	//|		
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сертификаты.Ответственные КАК СертификатОтветственные
	//|		ПО
	//|			СертификатОтветственные.Ссылка = Сертификат.Ссылка
	//|	
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	//|		ПО
	//|			СоставыГруппПользователей.ГруппаПользователей = СертификатОтветственные.Пользователь
	//|		;
	//|	РазрешитьЧтениеИзменение
	//|	ГДЕ
	//|		ЭтоАвторизованныйПользователь(ВладелецСертификата)
	//|	 ИЛИ ЭтоАвторизованныйПользователь(СертификатОтветственные.Пользователь)
	//|	 ИЛИ ЭтоАвторизованныйПользователь(СоставыГруппПользователей.Пользователь)
	//|	
	//|	";

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|		ЭтотСписок КАК Сертификат
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сертификаты.Ответственные КАК СертификатОтветственные
	|		ПО
	|			СертификатОтветственные.Ссылка = Сертификат.Ссылка
	|	
	|		;
	|	РазрешитьЧтениеИзменение
	|	ГДЕ
	|		ЗначениеРазрешено(ВладелецСертификата)
	|	 ИЛИ ЗначениеРазрешено(Ответственный)
	|	 ИЛИ ЗначениеРазрешено(СертификатОтветственные.Пользователь)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецЕсли