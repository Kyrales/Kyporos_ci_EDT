
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// #РаскраскаКода
	РаскраситьПрограммныйКодHTML("КодПроверки", "КодПроверкиHTML");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Контекст.Количество() > 0 Тогда
	ИначеЕсли Объект.Условия.Количество() > 0 Тогда
		Элементы.СтраницаУсловия.ТекущаяСтраница = Элементы.СтраницаСодержаниеОбновления;
	ИначеЕсли Объект.ПрограммнаяПроверка Тогда
		Элементы.СтраницаУсловия.ТекущаяСтраница = Элементы.СтраницаПрограммнаяПроверкаРедактирование;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// #РаскраскаКода
	Объект.КодПроверки = ОбщегоНазначенияКупоросКлиент.КодПрограммыИзРаскрашенногоHTML(Элементы.КодПроверкиHTML);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПрограммнаяПроверкаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВставитьКомментарий(Команда)
	
	// #РаскраскаКода
	Объект.КодПроверки = ОбщегоНазначенияКупоросКлиент.КодПрограммыИзРаскрашенногоHTML(Элементы.КодПроверкиHTML);
	
	МаксимальныйКомментарий = 
	"// При формировании сообщения доступна структура НакопленныеДанные
	|// Ключи структуры:
	|// НакопленныеДанные.ДанныеБота.Бот - текущий бот, <СправочникСсылка.ТелеграмБоты>
	|// НакопленныеДанные.ДанныеБота.Жетон - жетон бота, <строка>
	|// НакопленныеДанные.ДанныеБота.Имя - представление бота, <Строка>
	|// НакопленныеДанные.ДанныеБота.Смещение - последний обработанный ботом идентификатор обновления, <Число>
	|// НакопленныеДанные.ИдентификаторОбновления - идентификатор текущего обновления, <число>
	|// НакопленныеДанные.ИдентификаторСообщения - идентификатор сообщения, <число>
	|// НакопленныеДанные.ИдентификаторЧата - идентификатор чата, <число>
	|// НакопленныеДанные.ВидВходящегоОбновления - вид входящего обновления, определяемый на основании содержания обновления, <Перечисления.ТелеграмВидыВходящихОбновлений> (чаще всего Сообщение)
	|// НакопленныеДанные.Обновление - обрабатываемое обновление https://core.telegram.org/bots/api#update, <ОбъектXDTO>
	|// НакопленныеДанные.Сообщение - сообщение, https://core.telegram.org/bots/api#message, <ОбъектXDTO> или НЕОПРЕДЕЛЕНО
	|// НакопленныеДанные.ТекстСообщения  - текст сообщения, <строка> или НЕОПРЕДЕЛЕНО
	|// НакопленныеДанные.НастройкиПользователя - структура с настройками пользователя из регистра сведений ТелеграмНастройкиПользователя
	|// НакопленныеДанные.ОтветКонтекстнойКлавиатуры - ответ контекстной клавиатуры, если ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры, <строка> или НЕОПРЕДЕЛЕНО
	|// 
	|// 
	|// Результат проверки должен возвращаться в переменную Ответ, <Булево>
	|// 
	|// 
	|";
	
	Объект.КодПроверки = МаксимальныйКомментарий + Объект.КодПроверки;
	
	// #РаскраскаКода
	РаскраситьПрограммныйКодHTML("КодПроверки", "КодПроверкиHTML");
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.СтраницаПрограммнаяПроверкаРедактирование.Видимость = Объект.ПрограммнаяПроверка;
	
КонецПроцедуры
// #РаскраскаКода
&НаСервере
Процедура РаскраситьПрограммныйКодHTML(РеквизитОбъекта, РаскрашиваемыйРеквизитФормыHTML)

	ОбъектВыполняторКода = Обработки.ВыполняторКода.Создать();
	ЭтаФорма[РаскрашиваемыйРеквизитФормыHTML] = ОбъектВыполняторКода.РаскрашеннаяСтраница1C(Объект[РеквизитОбъекта]);

КонецПроцедуры

#КонецОбласти
