
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполнение регистра УчетРабочегоВремени по расчитанным данным шаблонов входящих в период
//
// Параметры:
//  НачалоПериода	 - Дата
//  КонецПериода	 - Дата
//  Шаблон			 - СправочникСсылка.ШаблоныПлановыхТрудозатрат
//
Процедура ЗаполнитьПоШаблонуФактическиеТрудозатраты(НачалоПериода, КонецПериода, Шаблон) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПланРабочегоВремениПоДням.День КАК День,
	               |	ПланРабочегоВремениПоДням.Выделено КАК Выделено
	               |ИЗ
	               |	РегистрСведений.ПланРабочегоВремениПоДням КАК ПланРабочегоВремениПоДням
	               |ГДЕ
	               |	ПланРабочегоВремениПоДням.Выделено > 0
	               |	И ПланРабочегоВремениПоДням.День МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ПланРабочегоВремениПоДням.Исполнитель = &Исполнитель
	               |	И ПланРабочегоВремениПоДням.День <= &ТекущийДень
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	День";
	
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "Исполнитель, ЗадачаПользователя, НачалоДействия");
	Запрос.УстановитьПараметр("Исполнитель", РеквизитыШаблона.Исполнитель);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ТекущийДень", НачалоДня(ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		// Фиксируем трудозатраты.
		ТрудозатратыЗаДень = Новый ТаблицаЗначений;
		ТрудозатратыЗаДень.Колонки.Добавить("ТипРаботы");
		ТрудозатратыЗаДень.Колонки.Добавить("Затрачено");
		ТрудозатратыЗаДень.Колонки.Добавить("Комментарий");
		ТрудозатратыЗаДень.Колонки.Добавить("ШаблонПлановыхЗатрат");
		
		Для каждого ТекСтрокаДняНедели Из Шаблон.ДниНедели Цикл
			
			// Очистка трудозатрат по шаблону на каждый день периода работы. На случай если поменялись дни недели в шаблоне.
			
			НаборЗаписей = ПланированиеЗадачСервер.НаборЗаписейПоРегистру(РеквизитыШаблона.Исполнитель, РеквизитыШаблона.ЗадачаПользователя, Выборка.День, Шаблон);
			НаборЗаписей.Прочитать(); 
			НаборЗаписей.Очистить(); 
			НаборЗаписей.Записать(); 
			
			// Проверка на условия шаблона.
			Если Не ВходитВПериодШаблона(Выборка.День, РеквизитыШаблона.НачалоДействия, ТекСтрокаДняНедели.Повторять, ТекСтрокаДняНедели.ДеньНедели) Тогда
				Продолжить;
			КонецЕсли;
		
			НовСтрока = ТрудозатратыЗаДень.Добавить();
			НовСтрока.ТипРаботы = ТекСтрокаДняНедели.ТипРаботы; 
			НовСтрока.Затрачено = ТекСтрокаДняНедели.Трудозатраты; 
			НовСтрока.Комментарий = ТекСтрокаДняНедели.Комментарий; 
			НовСтрока.ШаблонПлановыхЗатрат = Шаблон; 

		КонецЦикла;
		
		Если ТрудозатратыЗаДень.Количество() > 0 Тогда
			
			ПланированиеЗадачСервер.ФиксацияТрудозатратЗаДень(РеквизитыШаблона.Исполнитель, РеквизитыШаблона.ЗадачаПользователя,
				Выборка.День, ТрудозатратыЗаДень, Шаблон); 
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВходитВПериодШаблона(ПроверяемыйДень, НачалоДействия, Повторять, ДеньНедели)

	РезультатПроверки = Ложь;
	
	ТекущийТипДняНедели = ТипДеньНедели(ПроверяемыйДень);
	ТекущаяНеделяМесяца = НеделяМесяца(ПроверяемыйДень);
	
	Если ТекущийТипДняНедели <> ДеньНедели
		И Повторять <> Перечисления.ПовторятьНедель.КаждыйДень Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Повторять = Перечисления.ПовторятьНедель.РазВНеделю 
		Или Повторять = Перечисления.ПовторятьНедель.КаждыйДень Тогда
	
		РезультатПроверки = Истина;
		
	ИначеЕсли Повторять = Перечисления.ПовторятьНедель.РазВДвеНедели Тогда
		
		КолВоНедель = ОбщегоНазначенияКупоросСервер.РазностьДат(НачалоДействия, ПроверяемыйДень, "Неделя");
		
		РезультатПроверки = Не ЧетноеЧисло(КолВоНедель); 	
		
	ИначеЕсли Повторять = Перечисления.ПовторятьНедель.ПервуюНеделюМесяца Тогда
		
		РезультатПроверки = ТекущаяНеделяМесяца = 1;
		
	ИначеЕсли Повторять = Перечисления.ПовторятьНедель.ВторуюНеделюМесяца Тогда
		
		РезультатПроверки = ТекущаяНеделяМесяца = 2;
		
	ИначеЕсли Повторять = Перечисления.ПовторятьНедель.ТретьюНеделюМесяца Тогда
		
		РезультатПроверки = ТекущаяНеделяМесяца = 3;
		
	ИначеЕсли Повторять = Перечисления.ПовторятьНедель.ЧетвертуюНеделюМесяца Тогда
		
		РезультатПроверки = ТекущаяНеделяМесяца = 4;
		
	ИначеЕсли Повторять = Перечисления.ПовторятьНедель.ВторуюЧетвертуюНеделюМесяца Тогда
		
		РезультатПроверки = ТекущаяНеделяМесяца = 2
			Или ТекущаяНеделяМесяца = 4 ;
		
	ИначеЕсли Повторять = Перечисления.ПовторятьНедель.ПервуюТретьюНеделюМесяца Тогда
		
		РезультатПроверки = ТекущаяНеделяМесяца = 1
			Или ТекущаяНеделяМесяца = 3;
			
	Иначе	
		
		РезультатПроверки = Ложь;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции

Функция НеделяМесяца(Дата)

	Возврат НеделяГода(Дата) - НеделяГода(НачалоМесяца(Дата)) + 1;

КонецФункции 

Функция ТипДеньНедели(ПроверяемыйДень)
	
	НомерДняНедели = ДеньНедели(ПроверяемыйДень);
	
	Если НомерДняНедели = 1 Тогда
		РезультатТип = Перечисления.ДниНедели.Понедельник;
	ИначеЕсли НомерДняНедели = 2 Тогда	
		РезультатТип = Перечисления.ДниНедели.Вторник;
	ИначеЕсли НомерДняНедели = 3 Тогда	
		РезультатТип = Перечисления.ДниНедели.Среда;
	ИначеЕсли НомерДняНедели = 4 Тогда	
		РезультатТип = Перечисления.ДниНедели.Четверг;
	ИначеЕсли НомерДняНедели = 5 Тогда	
		РезультатТип = Перечисления.ДниНедели.Пятница;
	ИначеЕсли НомерДняНедели = 6 Тогда	
		РезультатТип = Перечисления.ДниНедели.Суббота;
	ИначеЕсли НомерДняНедели = 7 Тогда	
		РезультатТип = Перечисления.ДниНедели.Воскресенье;
	Иначе
		РезультатТип = Перечисления.ДниНедели.ПустаяСсылка();
	КонецЕсли;	
	
	Возврат РезультатТип;
	
КонецФункции 

Функция ЧетноеЧисло(ПроверяемоеЧисло)    
	 
	Четное = ПроверяемоеЧисло % 2 = 0;
    Возврат Четное; 
	
КонецФункции 

#КонецОбласти

#КонецЕсли
