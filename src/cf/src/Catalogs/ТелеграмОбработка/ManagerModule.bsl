
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получение обработок сервиса, подходящих по условиям
Функция ПолучитьОбработкиДляВыполнения(Сервис, НакопленныеДанные) Экспорт
	
	Ответ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервис", Сервис);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТелеграмСервисОбработки.Обработка КАК Обработка,
	|	ТелеграмСервисОбработки.НаборУсловий КАК НаборУсловий
	|ИЗ
	|	Справочник.ТелеграмСервис.Обработки КАК ТелеграмСервисОбработки
	|ГДЕ
	|	ТелеграмСервисОбработки.Ссылка = &Сервис
	|	И ТелеграмСервисОбработки.Обработка.Статус = ЗНАЧЕНИЕ(Перечисление.ТелеграмСтатусыИспользования.Используется)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТелеграмСервисОбработки.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.НаборУсловий) Тогда
			УсловиеИстинно = Справочники.ТелеграмНаборУсловий.ПроверкаНабораУсловий(Выборка.НаборУсловий, НакопленныеДанные);
			Если УсловиеИстинно Тогда
				Ответ.Добавить(Выборка.Обработка);
			КонецЕсли;
		Иначе
			Ответ.Добавить(Выборка.Обработка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьОбработкиИсключения(НакопленныеДанные) Экспорт
	
	Ответ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелеграмОбработка.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТелеграмОбработка КАК ТелеграмОбработка
	|ГДЕ
	|	ТелеграмОбработка.ТипОбработки = ЗНАЧЕНИЕ(Перечисление.ТелеграмТипыОбработок.Исключение)
	|	И ТелеграмОбработка.Статус = ЗНАЧЕНИЕ(Перечисление.ТелеграмСтатусыИспользования.Используется)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Ответ.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Процедура ВыполнитьОбработку(Обработка, НакопленныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Обработка", Обработка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелеграмОбработка.ОчиститьКонтекст КАК ОчиститьКонтекст,
	|	ТелеграмОбработка.КодСборкиОтвета КАК КодСборкиОтвета,
	|	ТелеграмОбработка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ТелеграмОбработка КАК ТелеграмОбработка
	|ГДЕ
	|	ТелеграмОбработка.Ссылка = &Обработка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелеграмОбработкаДействияНадКонтекстом.Параметр КАК Параметр,
	|	ТелеграмОбработкаДействияНадКонтекстом.Действие КАК Действие,
	|	ТелеграмОбработкаДействияНадКонтекстом.Значение КАК Значение
	|ИЗ
	|	Справочник.ТелеграмОбработка.ДействияНадКонтекстом КАК ТелеграмОбработкаДействияНадКонтекстом
	|ГДЕ
	|	ТелеграмОбработкаДействияНадКонтекстом.Ссылка = &Обработка";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	РезультатОбработка = Пакет[0];
	ВыборкаОбработка = РезультатОбработка.Выбрать();
	ВыборкаОбработка.Следующий();
	
	КодСборкиОтвета = ВыборкаОбработка.КодСборкиОтвета;
	НаименованиеОбработки = ВыборкаОбработка.Наименование;
	
	Бот = НакопленныеДанные.ДанныеБота.Бот;
	ИдентификаторЧата = НакопленныеДанные.ИдентификаторЧата;
	
	Если ЗначениеЗаполнено(КодСборкиОтвета) Тогда
		
		НакопленныеДанные.Вставить("КонтекстСеанса", РегистрыСведений.ТелеграмКонтекстСеансов.ПолучитьКонтекстСеанса(Бот, ИдентификаторЧата));
		НакопленныеДанные.Вставить("ФиксироватьПервоеСообщениеКонтекстаСеанса", Ложь);  // для программного управления фиксацией текущего первого контекста сеанса
		НакопленныеДанные.Вставить("НаименованиеОбработки", НаименованиеОбработки);
		
		ТекстИнформации = СтрШаблон(НСтр("ru = 'ВыполнитьОбработку(): Начало выполнения обработки по коду сборки %1'"), Обработка); 
		ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Телеграм.ВебХук", 
				ТекстИнформации, 
				УровеньЖурналаРегистрации.Информация);
	
		ТелеграмСервер.ВыполнитьКодСборкиОтвета(КодСборкиОтвета, НакопленныеДанные);
		
		ТекстИнформации = СтрШаблон(НСтр("ru = 'ВыполнитьОбработку(): Код сборки ответа выполнен успешно по обработке %1'"), Обработка); 
		ОбщегоНазначенияКупоросСервер.ЗаписьЖурналаРегистрацииРасширенная("Телеграм.ВебХук", 
				ТекстИнформации, 
				УровеньЖурналаРегистрации.Информация);
		
	КонецЕсли;
	
	Если ИдентификаторЧата <> Неопределено Тогда
		
		Если ВыборкаОбработка.ОчиститьКонтекст Тогда
			РегистрыСведений.ТелеграмКонтекстСеансов.ОчиститьКонтекстСеанса(Бот, ИдентификаторЧата);
			НакопленныеДанные.КонтекстСеанса = Новый Соответствие; // очистка кэша соответствия
		КонецЕсли;
	
		РезультатДействияНадКонтекстом = Пакет[1];
		ВыборкаДействияНадКонтекстом = РезультатДействияНадКонтекстом.Выбрать();
		
		// Получаем кэш из текущего контекста сеанса.
		СтроковоеПредставлениеКэшПараметров = НакопленныеДанные.КонтекстСеанса.Получить(ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.КэшПараметров); 
		
		Если ВыборкаДействияНадКонтекстом.Количество() > 0
			Или СтроковоеПредставлениеКэшПараметров <> Неопределено Тогда
			
			// - Определяем кэш из предопределенного параметра "КэшПараметров".
			Если СтроковоеПредставлениеКэшПараметров = Неопределено Тогда
				// Создаем новую таблицу значений, если ранее не был создан.
				
				ТаблицаТекущегоКонтекстаСеанса = Новый ТаблицаЗначений;
				ТаблицаТекущегоКонтекстаСеанса.Колонки.Добавить("ВидВходящегоОбновления");
				ТаблицаТекущегоКонтекстаСеанса.Колонки.Добавить("ИдентификаторСообщения");
				ТаблицаТекущегоКонтекстаСеанса.Колонки.Добавить("ТекстСообщения");
				ТаблицаТекущегоКонтекстаСеанса.Колонки.Добавить("ОтветКонтекстнойКлавиатуры");
				ТаблицаТекущегоКонтекстаСеанса.Колонки.Добавить("ЗагруженныйФайл");
				
				Если НакопленныеДанные.ФиксироватьПервоеСообщениеКонтекстаСеанса Тогда
			        // формируем пустую таблицу раньше
					СтроковоеПредставлениеКэшПараметров = ЗначениеВСтрокуВнутр(ТаблицаТекущегоКонтекстаСеанса);
			
				КонецЕсли;
		
			КонецЕсли;
			
			Если СтроковоеПредставлениеКэшПараметров <> Неопределено Тогда
				// Получаем таблицу значений из ранее созданной таблицы.
				
				ТаблицаТекущегоКонтекстаСеанса = ЗначениеИзСтрокиВнутр(СтроковоеПредставлениеКэшПараметров);
				
				// - Обновляем "КэшПараметров".
				НоваяСтрокаТекущегоКэшСеанса = ТаблицаТекущегоКонтекстаСеанса.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТекущегоКэшСеанса, НакопленныеДанные); 
				
			КонецЕсли;
			
			НовоеСтроковоеПредставлениеКэшПараметров = ЗначениеВСтрокуВнутр(ТаблицаТекущегоКонтекстаСеанса);
			
			РегистрыСведений.ТелеграмКонтекстСеансов.ИзменитьПараметрКонтекстаСеанса(
				Бот,
				ИдентификаторЧата,
				ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.КэшПараметров,
				Перечисления.ТелеграмДействияСКонтекстом.Установить,
				ТаблицаТекущегоКонтекстаСеанса.Количество(),
				НовоеСтроковоеПредставлениеКэшПараметров);
		
		КонецЕсли;  // Изменение "КэшПараметров"
		
		Пока ВыборкаДействияНадКонтекстом.Следующий() Цикл
			РегистрыСведений.ТелеграмКонтекстСеансов.ИзменитьПараметрКонтекстаСеанса(
				Бот,
				ИдентификаторЧата,
				ВыборкаДействияНадКонтекстом.Параметр,
				ВыборкаДействияНадКонтекстом.Действие,
				ВыборкаДействияНадКонтекстом.Значение);
		КонецЦикла;
		      
	КонецЕсли;
	
КонецПроцедуры

// Таблица значений накопленного кэша сеанса из параметра ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.КэшПараметров
//	Инициализируется в процедуре Справочники.ТелеграмОбработка.ВыполнитьОбработку().
//	Существует только на время ожидания контекста.
//
// Параметры:
//  ДанныеКонтекстСеанса - Соответствие - см. описание возвращаемого значения РегистрыСведений.ТелеграмКонтекстСеансов.ПолучитьКонтекстСеанса(Бот, ИдентификаторЧата) АПК:1143  
// 
// Возвращаемое значение:
//   ТаблицаЗначений:
//		* ВидВходящегоОбновления - ПеречислениеСсылка.ТелеграмВидыВходящихОбновлений
//		* ИдентификаторСообщения - Строка
//		* ТекстСообщения - Строка
//		* ОтветКонтекстнойКлавиатуры - Строка
//		* ЗагруженныйФайл - Строка - полное имя файла
//						  - Неопределено - если нет файлов
//
Функция ТаблицаКэшСеанса(ДанныеКонтекстСеанса) Экспорт

	 СтроковоеПредставлениеКэшПараметров = ДанныеКонтекстСеанса.Получить(ПланыВидовХарактеристик.ТелеграмПараметрыКонтекста.КэшПараметров);
	 
	 Если СтроковоеПредставлениеКэшПараметров = Неопределено Тогда
		 Возврат Новый ТаблицаЗначений;	 
	 КонецЕсли;
	 
	 ТаблицаТекущегоКонтекстаСеанса = ЗначениеИзСтрокиВнутр(СтроковоеПредставлениеКэшПараметров);
	 
	 Возврат ТаблицаТекущегоКонтекстаСеанса;
	 
 КонецФункции // ТаблицаКэшСеанса()

#КонецОбласти

#КонецЕсли
 