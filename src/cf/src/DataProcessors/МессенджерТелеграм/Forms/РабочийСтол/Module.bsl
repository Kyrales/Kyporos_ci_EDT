
#Область ОписаниеПеременных

&НаКлиенте
Перем Автообновление_Интервал;

&НаКлиенте
Перем Автообновление_ПериодUNIXCloudПолученияОбновления;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - При создании на сервере
//
// Параметры:
//  Отказ				 - 	 - 
//  СтандартнаяОбработка - 	 - 
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КэшируемыеЗначения = Новый Структура;
	КэшируемыеЗначения.Вставить("ТипыСообщенийЧатБота", Новый Структура);
	Для Каждого ЭлементПеречисления Из Метаданные.Перечисления.ТипыСообщенийЧатБота.ЗначенияПеречисления Цикл
		КэшируемыеЗначения.ТипыСообщенийЧатБота.Вставить(ЭлементПеречисления.Имя, Перечисления.ТипыСообщенийЧатБота[ЭлементПеречисления.Имя]);
	КонецЦикла;	
	КэшируемыеЗначения.Вставить("ИдентификаторПользователяИБ", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	КэшируемыеЗначения.Вставить("СписокПользователейМессенджера", ПолучитьПользователейИБ());
	
	Для Каждого ПользовательМессенджераИБ Из КэшируемыеЗначения.СписокПользователейМессенджера Цикл
		Элементы.ПереводДиалога_ГУИДПользователяИБ.СписокВыбора.Добавить(Строка(ПользовательМессенджераИБ.Значение), ПользовательМессенджераИБ.Представление);
	КонецЦикла;	
	
	Врем_ПризнакАвтообновления = ХранилищеОбщихНастроек.Загрузить("МессенджерТелеграм", "Автообновление");
	Элементы.Автообновление.Пометка = ?(Врем_ПризнакАвтообновления <> Неопределено, Врем_ПризнакАвтообновления, Истина);
	
	СписокСообщений.Параметры.УстановитьЗначениеПараметра("ЧатБот", Неопределено);
	СписокСообщений.Параметры.УстановитьЗначениеПараметра("IDЧата", Неопределено);
	
КонецПроцедуры

&НаКлиенте
// Процедура - При открытии
//
// Параметры:
//  Отказ	 - 	 - 
//
Процедура ПриОткрытии(Отказ)
	
	Если Элементы.Автообновление.Пометка Тогда
		ОбновитьСписокСообщенийИОповеститьПриНеобходимости();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - Список контактов при активизации строки
//
// Параметры:
//  Элемент	 - 	 - 
//
Процедура СписокКонтактовПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.СписокКонтактов.ТекущаяСтрока;
	ТекущиеДанные = Элементы.СписокКонтактов.ТекущиеДанные;

	Если Элементы.СписокКонтактов.ВыделенныеСтроки.Количество() = 1 Тогда
		Врем_СписокКонтактов_ВыделенныеСтроки.Очистить();
		Врем_СписокКонтактов_ВыделенныеСтроки.Добавить(ТекущиеДанные);
		СписокСообщений.Параметры.УстановитьЗначениеПараметра("ЧатБот", ТекущиеДанные.ЧатБот);
		СписокСообщений.Параметры.УстановитьЗначениеПараметра("IDЧата", ТекущиеДанные.IDЧата);		
	ИначеЕсли Элементы.СписокКонтактов.ВыделенныеСтроки.Количество() >= 2 Тогда
		Врем_СписокКонтактов_ВыделенныеСтроки.Добавить(ТекущиеДанные);
		Если СписокСообщений.Параметры.Элементы.Найти("ЧатБот").Значение <> Неопределено
				ИЛИ СписокСообщений.Параметры.Элементы.Найти("IDЧата").Значение <> Неопределено Тогда
			СписокСообщений.Параметры.УстановитьЗначениеПараметра("ЧатБот", Неопределено);
			СписокСообщений.Параметры.УстановитьЗначениеПараметра("IDЧата", Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДанныеПоследнегоСообщения = ПолучитьДанныеПоследнегоСообщения(ТекущиеДанные.ЧатБот, ТекущиеДанные.IDЧата);
		Если ДанныеПоследнегоСообщения <> Неопределено Тогда
			Элементы.СписокСообщений.ТекущаяСтрока = ПолучитьКлючЗаписиРегистраСведений("СообщенияЧатБота", 
				Новый Структура("Период, ЧатБот, IDЧата", ДанныеПоследнегоСообщения.Период, ТекущиеДанные.ЧатБот, ТекущиеДанные.IDЧата));
		КонецЕсли;
		
		Если ТекущиеДанные.ЕстьНовые Тогда
			ТекущиеДанные.ЕстьНовые = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтактовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокКонтактов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено  Тогда
		
		МассивКонструктораКлюча = Новый Массив;
		МассивКонструктораКлюча.Добавить(Новый Структура("Бот, ИдентификаторЧата", ТекущиеДанные.ЧатБот,  ТекущиеДанные.IDЧата));	
		
		КлючЗаписиРегистра = Новый ("РегистрСведенийКлючЗаписи.ТелеграмСобеседники", МассивКонструктораКлюча);
		ОткрытьФорму("РегистрСведений.ТелеграмСобеседники.Форма.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиРегистра));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - Сообщения выбор
//
// Параметры:
//  Элемент				 - 	 - 
//  ВыбраннаяСтрока		 - 	 - 
//  Поле				 - 	 - 
//  СтандартнаяОбработка - 	 - 
//
Процедура СообщенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокСообщений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипСообщения = КэшируемыеЗначения.ТипыСообщенийЧатБота.Картинка
			Или ТекущиеДанные.ТипСообщения = КэшируемыеЗначения.ТипыСообщенийЧатБота.Аудио
			Или ТекущиеДанные.ТипСообщения = КэшируемыеЗначения.ТипыСообщенийЧатБота.Видео
			Или ТекущиеДанные.ТипСообщения = КэшируемыеЗначения.ТипыСообщенийЧатБота.Файл Тогда
			
		// АПК:1348-выкл Корректный вариант 	
		КлючЗаписиСообщенияЧатБота = ПолучитьКлючЗаписиРегистраСведений("СообщенияЧатБота", Новый Структура("Период,ЧатБот,IDЧата", ТекущиеДанные.Период, ТекущиеДанные.ЧатБот, ТекущиеДанные.IDЧата));

		ПолучитьФайл(
			ПолучитьНавигационнуюСсылку(
					КлючЗаписиСообщенияЧатБота,
					"СообщениеХранимыйФайл"),
			ТекущиеДанные.ИмяХранимогоФайла,
			Истина);
		// АПК:1348-вкл
		
	Иначе
			
		МассивКонструктораКлюча = Новый Массив;
		МассивКонструктораКлюча.Добавить(Новый Структура("ЧатБот, IDЧата, Период", ТекущиеДанные.ЧатБот,  ТекущиеДанные.IDЧата, ТекущиеДанные.Период));	
		
		КлючЗаписиРегистра = Новый ("РегистрСведенийКлючЗаписи.СообщенияЧатБота", МассивКонструктораКлюча);
		ОткрытьФорму("РегистрСведений.СообщенияЧатБота.Форма.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиРегистра));
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокКонтактовПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	НачалоВчерашнегоДня = НачалоДня(ТекущаяДатаСеанса() - 24*60*60);
	
	Для Каждого СтрокаТЗ Из Строки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Значение.Данные.ДатаОбновленияСообщений) Тогда
			СтрокаТЗ.Значение.Данные.ДатаОбновленияСообщенийПредставление = "";
		ИначеЕсли НачалоДня(СтрокаТЗ.Значение.Данные.ДатаОбновленияСообщений) = НачалоДня Тогда
			СтрокаТЗ.Значение.Данные.ДатаОбновленияСообщенийПредставление = Формат(СтрокаТЗ.Значение.Данные.ДатаОбновленияСообщений, "ДФ=HH:mm");
		ИначеЕсли НачалоДня(СтрокаТЗ.Значение.Данные.ДатаОбновленияСообщений) = НачалоВчерашнегоДня Тогда
			СтрокаТЗ.Значение.Данные.ДатаОбновленияСообщенийПредставление = "Вчера";
		Иначе
			СтрокаТЗ.Значение.Данные.ДатаОбновленияСообщенийПредставление = Формат(СтрокаТЗ.Значение.Данные.ДатаОбновленияСообщений, "ДФ='dd.MM.yyyy'");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокСообщенийПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого СтрокаТЗ Из Строки Цикл
		
		ТипФормата = "";
		Если СтрокаТЗ.Значение.Данные.ТипСообщения = Перечисления.ТипыСообщенийЧатБота.Картинка Тогда
			ТипФормата = НСтр("ru = 'Картинка'");
		ИначеЕсли СтрокаТЗ.Значение.Данные.ТипСообщения = Перечисления.ТипыСообщенийЧатБота.Аудио Тогда
			ТипФормата = НСтр("ru = 'Аудио'");
		ИначеЕсли СтрокаТЗ.Значение.Данные.ТипСообщения = Перечисления.ТипыСообщенийЧатБота.Видео Тогда
			ТипФормата = НСтр("ru = 'Видео'");
		ИначеЕсли СтрокаТЗ.Значение.Данные.ТипСообщения = Перечисления.ТипыСообщенийЧатБота.Файл Тогда
			ТипФормата = НСтр("ru = 'Файл'");
		Иначе
			Продолжить;			
		КонецЕсли;
		
		СообщениеДляВставки = "" + СтрокаТЗ.Значение.Данные.Сообщение;
		СтрокаТЗ.Значение.Данные.Сообщение = СокрЛП(СтрШаблон(НСтр("ru = '%1: %2 (нажмите для открытия)
                                                             |%3'"), ТипФормата, СтрокаТЗ.Значение.Данные.ИмяХранимогоФайла, СообщениеДляВставки));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - Отправить сообщение
//
// Параметры:
//  Команда	 - 	 - 
//
Процедура ОтправитьСообщение(Команда)
	
	ТекущиеДанные = Элементы.СписокКонтактов.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.СписокКонтактов.ВыделенныеСтроки;
	Если ТекущиеДанные = Неопределено
			Или Сообщение = "" Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОтправкуСообщения(ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
// Процедура - Отправить мультимедиа контент
//
// Параметры:
//  Команда	 - 	 - 
//
Процедура ОтправитьМультимедиаКонтент(Команда)
	
	ТекущиеДанные = Элементы.СписокКонтактов.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.СписокКонтактов.ВыделенныеСтроки;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(КэшируемыеЗначения.ТипыСообщенийЧатБота.Файл, "Файл");
	СписокЗначений.Добавить(КэшируемыеЗначения.ТипыСообщенийЧатБота.Аудио, "Аудио");
	СписокЗначений.Добавить(КэшируемыеЗначения.ТипыСообщенийЧатБота.Видео, "Видео");
	СписокЗначений.Добавить(КэшируемыеЗначения.ТипыСообщенийЧатБота.Картинка, "Картинка");
	
	ПараметрыДляОтправки = Новый Структура;
	ПараметрыДляОтправки.Вставить("ЧатБот", ТекущиеДанные.ЧатБот);
	ПараметрыДляОтправки.Вставить("IDЧата", ?(ВыделенныеСтроки.Количество() <= 1, ТекущиеДанные.IDЧата, ВыделенныеСтроки));
	Если ВыделенныеСтроки.Количество()=1 Тогда
		ПараметрыДляОтправки.Вставить("Контрагент", ТекущиеДанные.Контрагент);
	КонецЕсли;
	
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьМультимедиаКонтентОповещениеВыбора", ЭтаФорма, ПараметрыДляОтправки);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокЗначений, Элементы.ОтправитьМультимедиаКонтент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - Автообновление
//
// Параметры:
//  Команда	 - 	 - 
//
Процедура Автообновление(Команда)
	
	Элементы.Автообновление.Пометка = НЕ Элементы.Автообновление.Пометка;
	СохранитьНаСервере("Автообновление", Элементы.Автообновление.Пометка);
	
	Если Элементы.Автообновление.Пометка Тогда
		Автообновление_Интервал = 1;
		ОбновитьСписокСообщенийИОповеститьПриНеобходимости();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - Обновить
//
// Параметры:
//  Команда	 - 	 - 
//
Процедура Обновить(Команда)
	
	Элементы.СписокКонтактов.Обновить();
	Элементы.СписокСообщений.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереводДиалогаОтмена(Команда)
	
	Элементы.ГруппаДанныеПеренаправленияДиалога.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиДиалогНаСотрудника(Команда)
	
	ТекущиеДанные = Элементы.СписокКонтактов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПереводДиалога_ГУИДПользователяИБ = Неопределено;
	ПереводДиалога_Примечание = Неопределено;
	
	Элементы.ГруппаДанныеПеренаправленияДиалога.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область ПредметныеМетоды

&НаКлиенте
// Процедура - Оповещение о новых сообщениях
//
Процедура ОбновитьСписокСообщенийИОповеститьПриНеобходимости()

	ТекущийКонтактДанные = Элементы.СписокКонтактов.ТекущиеДанные;
	
	// Обновление если форма активна
	СписокIDИзмененныхСообщений = ПолучитьIDПоследнихИзмененныхСообщений(Автообновление_ПериодUNIXCloudПолученияОбновления);
	Если СписокIDИзмененныхСообщений.Количество() > 0 Тогда
		Элементы.СписокКонтактов.Обновить();
		Если ТекущийКонтактДанные <> Неопределено И СписокIDИзмененныхСообщений.Получить(ТекущийКонтактДанные.IDЧата) <> Неопределено Тогда
			Элементы.СписокСообщений.Обновить();
			Элементы.СписокСообщений.ТекущаяСтрока = ПолучитьКлючЗаписиРегистраСведений("СообщенияЧатБота", 
				Новый Структура("Период, ЧатБот, IDЧата", ТекущийКонтактДанные.ДатаОбновленияСообщений, ТекущийКонтактДанные.ЧатБот, ТекущийКонтактДанные.IDЧата));		
		КонецЕсли;
		Для Каждого ЭлементIDИзмененногоСообщения Из СписокIDИзмененныхСообщений Цикл
			Автообновление_ПериодUNIXCloudПолученияОбновления = ?(Автообновление_ПериодUNIXCloudПолученияОбновления < ЭлементIDИзмененногоСообщения.Значение.Период, ЭлементIDИзмененногоСообщения.Значение.Период, Автообновление_ПериодUNIXCloudПолученияОбновления);
		КонецЦикла;
	КонецЕсли;

	// Проверка на оповещения
	СписокОповещений = Новый Массив;
	
	// Повторяем обработку событий
	Если Элементы.Автообновление.Пометка Тогда
		Автообновление_Интервал = ?(СписокОповещений.Количество() > 0, 1, Автообновление_Интервал);
		Автообновление_Интервал = ?(Автообновление_Интервал < 25, Автообновление_Интервал * 1.1, Автообновление_Интервал);
		ПодключитьОбработчикОжидания("ОбновитьСписокСообщенийИОповеститьПриНеобходимости", Автообновление_Интервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция - Проверить наличие новых сообщений
//
// Параметры:
//  СДаты	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьIDПоследнихИзмененныхСообщений(ПериодUNIXCloudПолученияОбновления)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодUNIXCloudПолученияОбновления", ПериодUNIXCloudПолученияОбновления + 1);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СообщенияЧатБота.ЧатБот КАК ЧатБот,
	               |	СообщенияЧатБота.IDЧата КАК IDЧата,
	               |	СообщенияЧатБота.IDЗаписи КАК IDЗаписи,
	               |	СообщенияЧатБота.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.СообщенияЧатБота КАК СообщенияЧатБота
	               |ГДЕ
	               |	СообщенияЧатБота.Период >= &ПериодUNIXCloudПолученияОбновления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СообщенияЧатБота.Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();			   
	
	Результат = Новый Соответствие;
	Для Каждого СтрокаТЗ Из РезультатЗапроса Цикл
		Если Результат.Получить(СтрокаТЗ.IDЧата) = Неопределено Тогда
			Результат.Вставить(СтрокаТЗ.IDЧата, Новый Структура("ЧатБот, IDЧата, IDЗаписи, Период", СтрокаТЗ.ЧатБот, СтрокаТЗ.IDЧата, СтрокаТЗ.IDЗаписи, СтрокаТЗ.Период));  // АПК:293 Не проверять структуру 
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
// Процедура - Отправить мультимедиа контент оповещение выбора
//
// Параметры:
//  ВыбранныйЭлемент		 - 	 - 
//  ДополнительныеПараметры	 - 	 - 
//
Процедура ОтправитьМультимедиаКонтентОповещениеВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = НСтр("ru = 'Выберите файл для отправки'");
	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.ПолноеИмяФайла = "";
	Диалог.Фильтр = ВернутьФильтрДиалогаВыбораПоТипуСообщения(ВыбранныйЭлемент.Значение);
	ДополнительныеПараметры.Вставить("ТипДанныхФайла", ВыбранныйЭлемент.Значение);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Новый ОписаниеОповещения("ДиалогЗавершениеВыбораОповещение", ЭтаФорма, ДополнительныеПараметры), Диалог);
	
КонецПроцедуры

&НаКлиенте
// Процедура - Отправить мультимедиа контент оповещение выбора
//
// Параметры:
//  ВыбранныйЭлемент		 - 	 - 
//  ДополнительныеПараметры	 - 	 - 
//
Процедура ДиалогЗавершениеВыбораОповещение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено
		 	Или ВыбранныйЭлемент.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыделитьИмяФайлаИзПути(ВыбранныйЭлемент[0]);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ВыбранныйЭлемент[0]);
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
	
	Вложения = Новый Структура;
	Вложения.Вставить("ТипФайла", ДополнительныеПараметры.ТипДанныхФайла);
	Вложения.Вставить("ИмяФайла", ИмяФайла);
	Вложения.Вставить("АдресФайла", АдресФайла);
	
	ВыполнитьОтправкуСообщения(ДополнительныеПараметры.IDЧата, Вложения); 
		
КонецПроцедуры

&НаКлиенте
// Процедура - Активировать новое сообщение оповещение выбора
//
// Параметры:
//  ДополнительныеПараметры	 - 	 - 
//
Процедура АктивироватьНовоеСообщениеОповещениеВыбора(ДополнительныеПараметры) Экспорт
	
	ЭтаФорма.Активизировать();
	
	КонтактВСпискеАктивен = Ложь;
	Если Элементы.СписокКонтактов.ТекущиеДанные <> Неопределено
			И Элементы.СписокКонтактов.ТекущиеДанные.ЧатБот = ДополнительныеПараметры.ЧатБот
			И Элементы.СписокКонтактов.ТекущиеДанные.IDЧата = ДополнительныеПараметры.IDЧата Тогда
		КонтактВСпискеАктивен = Истина;
	КонецЕсли;
		
	Если КонтактВСпискеАктивен <> Истина Тогда
		КлючРегистраКонтакта = ПолучитьКлючЗаписиРегистраСведений("КонтактыЧатБота", Новый Структура("ЧатБот, IDЧата", ДополнительныеПараметры.ЧатБот, ДополнительныеПараметры.IDЧата));
		Элементы.СписокКонтактов.ТекущаяСтрока = КлючРегистраКонтакта;
		ОповеститьОбИзменении(КлючРегистраКонтакта);
	Иначе
		СписокКонтактовПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - Активировать новое сообщение оповещение выбора
//
// Параметры:
//  ДополнительныеПараметры	 - 	 - 
//
Процедура ОткрытьОписаниеОбновленияОповещениеВыбора(ДополнительныеПараметры) Экспорт
	
	ОписаниеОбновления = Новый ТекстовыйДокумент;
	ОписаниеОбновления.УстановитьТекст(ДополнительныеПараметры.Сообщение);
	ОписаниеОбновления.Показать(НСтр("ru = 'Описание обновлений'"));
	
	Если СтрНайти(ДополнительныеПараметры.Сообщение, "https://") > 0 Тогда
		
		ПозицияНачала = СтрНайти(ДополнительныеПараметры.Сообщение, "https://");
		ПозицияОкончания = СтрНайти(ДополнительныеПараметры.Сообщение, Символы.ПС, НаправлениеПоиска.СНачала, ПозицияНачала);
		Оповещение = Новый ОписаниеОповещения("ЗаглушкаОписаниеОповещения", ЭтаФорма, ДополнительныеПараметры.IDЗаписиСообщения);
		НачатьЗапускПриложения(Оповещение, Сред(ДополнительныеПараметры.Сообщение, ПозицияНачала, ?(ПозицияОкончания > 0, ПозицияОкончания-ПозицияНачала, СтрДлина(ДополнительныеПараметры.Сообщение)-ПозицияНачала+1)));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаглушкаОписаниеОповещения(Результат, Параметры) Экспорт
	
	РезультатЗапуск = НСтр("ru = 'Запуск приложения успешен'");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуСообщения(ВыделенныеСтроки, Вложение = Неопределено)

	ТекущиеДанные = Элементы.СписокКонтактов.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.СписокКонтактов.ВыделенныеСтроки;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") 
		Или ВыделенныеСтроки.Количество() = 1 Тогда
		
		ПоследнееСообщение = ПолучитьДанныеПоследнегоСообщения(ТекущиеДанные.ЧатБот, ТекущиеДанные.IDЧата);
	
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Необходимо заполнить пользователя контакта.'"));
			Возврат;
		КонецЕсли;
		
		ОтправитьЕдиничноеСообщениеПользователюСервер(ТекущиеДанные.ЧатБот, ТекущиеДанные.Контрагент, Сообщение, Вложение);
	
		Сообщение = "";
		Элементы.СписокСообщений.Обновить();

	Иначе 
		
		ПоследнееСообщение = ПолучитьДанныеПоследнегоСообщения(ТекущиеДанные.ЧатБот, ТекущиеДанные.IDЧата);
		Для Каждого ТекущиеДанные Из ВыделенныеСтроки Цикл
			
			ОтправитьСообщениеПользователюСервер(ТекущиеДанные, Сообщение, Вложение);
			
		КонецЦикла;
		
		Сообщение = "";
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Массовая отправка сообщений завершена.'"));
		Элементы.СписокСообщений.Обновить();
		
	КонецЕсли;


КонецПроцедуры // ВыполнитьОтправкуСообщения()

&НаСервере
Процедура ОтправитьЕдиничноеСообщениеПользователюСервер(ЧатБот, Контрагент, Сообщение, Вложение)

	ТелеграмСервер.ОтправитьСообщениеПользователю(ЧатБот, Контрагент, Сообщение,, Вложение); 

КонецПроцедуры 


&НаСервере
Процедура ОтправитьСообщениеПользователюСервер(КлючЗаписи, ТекстСообщенияДляОтправки, Вложения = Неопределено)
	
	НастройкиПользователя = РегистрыСведений.ТелеграмНастройкиПользователей.ПолучитьНастройкиПользователя(КлючЗаписи.Бот, КлючЗаписи.ИдентификаторЧата);
	
	Если Не НастройкиПользователя.Свойство("Пользователь") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиПользователя.Пользователь) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Необходимо заполнить пользователя контакта: %1.'"), НастройкиПользователя.Пользователь);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ТелеграмСервер.ОтправитьСообщениеПользователю(КлючЗаписи.Бот, НастройкиПользователя.Пользователь, ТекстСообщенияДляОтправки,,Вложения); 
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Отправлено: %1.'"), НастройкиПользователя.Пользователь);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Функция - Вернуть фильтр диалога выбора по типу сообщения
//
// Параметры:
//  ТипСообщения - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаСервереБезКонтекста
Функция ВернутьФильтрДиалогаВыбораПоТипуСообщения(ТипСообщения) 
	
	Результат = "Все (*)|*";
	
	Если ТипСообщения = Перечисления.ТипыСообщенийЧатБота.Картинка Тогда
		Результат = "Картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf" 
						+ "|Все (*)|*|";
	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийЧатБота.Аудио Тогда
		Результат = "Аудио (*.mp3;*.wav;*.aac;*.wma;*.m4a)|*.mp3;*.wav;*.aac;*.wma;*.m4a"
						+ "|Все (*)|*";
	ИначеЕсли ТипСообщения = Перечисления.ТипыСообщенийЧатБота.Видео Тогда
		Результат = "Видео (*.avi;*.mp4;*.mov;*.flv;*.mpg)|*.avi;*.mp4;*.mov;*.flv;*.mpg"
						+ "|Все (*)|*";
	КонецЕсли;
		
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиРегистраСведений(ИмяРегистра, СтруктураКлюча)
	
	Возврат РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(СтруктураКлюча)
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоследнегоСообщения(ЧатБот, IDЧата, ТолькоИсходящего = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СообщенияЧатБота.ЧатБот КАК ЧатБот,
	               |	СообщенияЧатБота.IDЧата КАК IDЧата,
	               |	СообщенияЧатБота.Период КАК Период,
				   |	СообщенияЧатБота.ОжидатьОтвет КАК ОжидатьОтвет,
				   |	СообщенияЧатБота.ПользовательСообщения КАК ПользовательСообщения
	               |ИЗ
	               |	РегистрСведений.СообщенияЧатБота.СрезПоследних(
	               |			,
	               |			ЧатБот = &ЧатБот
	               |				И IDЧата = &IDЧата
				   |				//ТолькоИсходящего
				   |					) КАК СообщенияЧатБота";
	Запрос.УстановитьПараметр("ЧатБот", ЧатБот);
	Запрос.УстановитьПараметр("IDЧата", IDЧата);
	Запрос.Текст = ?(ТолькоИсходящего = Истина, СтрЗаменить(Запрос.Текст, "//ТолькоИсходящего", "И Статус = ЗНАЧЕНИЕ(Перечисление.СтатусСообщенийЧатБота.Отправлено)"), Запрос.Текст);
	Результат = Запрос.Выполнить().Выбрать();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Период", Результат.Период);
	СтруктураДанных.Вставить("ЧатБот", Результат.ЧатБот);
	СтруктураДанных.Вставить("IDЧата", Результат.IDЧата);
	СтруктураДанных.Вставить("ОжидатьОтвет", Результат.ОжидатьОтвет);
	СтруктураДанных.Вставить("ПользовательСообщения", Результат.ПользовательСообщения);
	
	Возврат ?(Результат.Следующий(), СтруктураДанных, Неопределено);
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНаСервере(ИмяНастройки, Значение)
	
	ХранилищеОбщихНастроек.Сохранить("МессенджерТелеграм", ИмяНастройки, Значение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПользователейИБ()
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый СписокЗначений;
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ТелеграмРедактирование) Тогда
			Результат.Добавить(ПользовательИБ.УникальныйИдентификатор, ПользовательИБ.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыделитьИмяФайлаИзПути(ПутьКФайлу)
	
	ИмяФайла = ПутьКФайлу;
	Если СтрНайти(ПутьКФайлу, "\") Тогда
		ИмяФайла = Сред(ПутьКФайлу, СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца) + 1);
	ИначеЕсли СтрНайти(ПутьКФайлу, "/") Тогда //Если линукс
		ИмяФайла = Сред(ПутьКФайлу, СтрНайти(ПутьКФайлу, "/", НаправлениеПоиска.СКонца) + 1);
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

#КонецОбласти

#Область Инициализация

Автообновление_ПериодUNIXCloudПолученияОбновления = ?(Автообновление_ПериодUNIXCloudПолученияОбновления = Неопределено, Дата(01, 01, 01), Автообновление_ПериодUNIXCloudПолученияОбновления);
Автообновление_Интервал = ?(Автообновление_Интервал = Неопределено, 1, Автообновление_Интервал);

#КонецОбласти
