
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Исполнитель = Пользователи.ТекущийПользователь();
	МесяцАнализа = НачалоМесяца(ТекущаяДатаСеанса());
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	ПериодЗадач.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	
	Элементы.Исполнитель.ТолькоПросмотр = Не Пользователи.ЭтоПолноправныйПользователь();
	ПропуститьОбновлениеОписания = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьСписокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СнятьВыделениеСтрок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ОбновитьСписокНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДней

//- РаспределитьТрудозатратыПоДням

&НаКлиенте
Процедура РаспределитьТрудозатратыПоДням(Команда)
	
	Если Элементы.ТаблицаДней.ВыделенныеСтроки.Количество() < 2 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Должно быть выделено минимум 2 дня.'"));
		Возврат;
		
	КонецЕсли;
	
	СписокДней = Новый СписокЗначений;
	
	Для каждого ИдентификаторСтроки Из Элементы.ТаблицаДней.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТаблицаДней.НайтиПоИдентификатору(ИдентификаторСтроки);
		СписокДней.Добавить(СтрокаТаблицы.День);
		
	КонецЦикла;
	
	РедактироватьТрудозатраты(ТекущаяЗадача, , СписокДней);
	
КонецПроцедуры

// Элементы

&НаКлиенте
Процедура МесяцАнализаПриИзменении(Элемент)
	
	МесяцАнализа = НачалоМесяца(МесяцАнализа);
	ОбновитьСписокНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцАнализаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МесяцАнализа = ДобавитьМесяц(МесяцАнализа, Направление);
	ОбновитьСписокНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНерабочиеДниПриИзменении(Элемент)
	
	ОбновитьСписокНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоДнямПриИзменении(Элемент)
	
	ОтборСтрок = Новый Структура;
	
	Если ОтборПоДням = 1 Тогда
		
		ОтборСтрок.Вставить("ДеньТекущейЗадачи", Истина);
		
	КонецЕсли;
	
	Элементы.ТаблицаДней.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

// Табличное поле

&НаКлиенте
Процедура ТаблицаДнейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТаблицаДнейЗатраченоПоЗадаче Тогда
		
		РедактироватьТрудозатраты(ТекущаяЗадача, ТекущийДень);
		
	ИначеЕсли Поле = Элементы.ТаблицаДнейЗатрачено Тогда
		
		ОтборПоЗадачам = 2;
		ОбновитьОтборПоЗадачам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДнейПриАктивизацииСтроки(Элемент)
	
	ОбновитьОписаниеТекущихЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДнейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДнейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ТаблицаДней.НайтиПоИдентификатору(Строка);
	РедактироватьТрудозатраты(ТекущаяЗадача, ТекущаяСтрока.День);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗадач

//- ДобавитьЗадачу

&НаКлиенте
Процедура ДобавитьЗадачу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЗадачуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Задача.ЗадачиПользователя.ФормаВыбора", , ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Задача", Результат);
	НайденныеСтроки = ТаблицаЗадач.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаЗадач.Добавить();
	НоваяСтрока.Задача = Результат;
	РеквизитыЗадачи = ОбщегоНазначенияКупоросВызовСервера.ЗначенияРеквизитовОбъекта(Результат, "ДатаНачала, ДатаВыполнения, ВнешнийНомер");
	ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыЗадачи);
	
	НоваяСтрока.ЗадачаТекущегоДня = Истина;
	НоваяСтрока.ЗадачаТекущегоМесяца = Истина;
	
	ТаблицаЗадач.Сортировать("ДатаЗадачи, ДатаВыполнения");
	
КонецПроцедуры

//- РедактироватьТрудозатратыЗаДень

&НаКлиенте
Процедура РедактироватьТрудозатратыЗаДень(Команда)
	
	РедактироватьТрудозатраты(ТекущаяЗадача, ТекущийДень);
	
КонецПроцедуры

//- ОткрытьЗадачуВоВнешнейСистеме

&НаКлиенте
Процедура ОткрытьЗадачуВоВнешнейСистеме(Команда)
	
	ОткрытьТекущуюЗадачуПоСсылке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущуюЗадачуПоСсылке()
	
	ТекущиеДанные = Элементы.ТаблицаЗадач.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВнешняяСсылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ТекущиеДанные.ВнешняяСсылка);
	
КонецПроцедуры

// Элементы

&НаКлиенте
Процедура ПериодЗадачПриИзменении(Элемент)
	
	ОбновитьСписокНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЗадачамПриИзменении(Элемент)
	
	ОбновитьОтборПоЗадачам();

КонецПроцедуры

// Табличное поле

&НаКлиенте
Процедура ТаблицаЗадачПриАктивизацииСтроки(Элемент)
	
	ОбновитьОписаниеТекущихЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТаблицаДней.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ТаблицаЗадачЗадачаНаименование Тогда
		
		ПоказатьЗначение(, ТекущаяЗадача);
		
	ИначеЕсли Поле = Элементы.ТаблицаЗадачЗатраченоЗаДень Тогда
		
		РедактироватьТрудозатраты(ТекущаяЗадача, ТекущийДень);
		
	ИначеЕсли Поле = Элементы.ТаблицаЗадачВнешнийНомер Тогда
		
		ОткрытьТекущуюЗадачуПоСсылке();
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОбновитьСписокНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокНаКлиенте()
	
	ОбновитьСписокНаСервере();
	ПропуститьОбновлениеОписания = Истина;
	СнятьВыделениеСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня В (&ВидДня)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НерабочийДень
	|ПОМЕСТИТЬ ВТ_РабочиеДни
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РабочиеДни.Дата КАК День
	|ПОМЕСТИТЬ ВТ_ОтсутствияИсполнителей
	|ИЗ
	|	РегистрСведений.ОтсутствияИсполнителей КАК ОтсутствияИсполнителей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РабочиеДни КАК ВТ_РабочиеДни
	|		ПО ОтсутствияИсполнителей.ДатаНачала <= ВТ_РабочиеДни.Дата
	|			И ОтсутствияИсполнителей.ДатаОкончания >= ВТ_РабочиеДни.Дата
	|ГДЕ
	|	ОтсутствияИсполнителей.Исполнитель = &Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетРабочегоВремени.Задача КАК Задача,
	|	УчетРабочегоВремени.День КАК День,
	|	СУММА(УчетРабочегоВремени.Затрачено) КАК Затрачено
	|ПОМЕСТИТЬ ВТ_ЗатраченноеВремя
	|ИЗ
	|	РегистрСведений.УчетРабочегоВремени КАК УчетРабочегоВремени
	|ГДЕ
	|	УчетРабочегоВремени.Месяц = &МесяцАнализа
	|	И УчетРабочегоВремени.Исполнитель = &Исполнитель
	|	И УчетРабочегоВремени.Затрачено <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетРабочегоВремени.Задача,
	|	УчетРабочегоВремени.День
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.День КАК День,
	|	ВложенныйЗапрос.Выделено КАК Выделено,
	|	ВложенныйЗапрос.Затрачено КАК Затрачено,
	|	ВложенныйЗапрос.НерабочийДень КАК НерабочийДень,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Выделено = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.Затрачено / ВложенныйЗапрос.Выделено * 100
	|	КОНЕЦ КАК ПроцентЗаполнения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.День КАК День,
	|		СУММА(ВложенныйЗапрос.Выделено) КАК Выделено,
	|		СУММА(ВложенныйЗапрос.Затрачено) КАК Затрачено,
	|		МАКСИМУМ(ВложенныйЗапрос.НерабочийДень) КАК НерабочийДень
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_РабочиеДни.Дата КАК День,
	|			0 КАК Выделено,
	|			0 КАК Затрачено,
	|			ВТ_РабочиеДни.НерабочийДень
	|				ИЛИ НЕ ВТ_ОтсутствияИсполнителей.День ЕСТЬ NULL КАК НерабочийДень
	|		ИЗ
	|			ВТ_РабочиеДни КАК ВТ_РабочиеДни
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтсутствияИсполнителей КАК ВТ_ОтсутствияИсполнителей
	|				ПО ВТ_РабочиеДни.Дата = ВТ_ОтсутствияИсполнителей.День
	|		ГДЕ
	|			(ВТ_ОтсутствияИсполнителей.День ЕСТЬ NULL
	|					ИЛИ &ПоказыватьНерабочиеДни)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВТ_ЗатраченноеВремя.День,
	|			0,
	|			ВТ_ЗатраченноеВремя.Затрачено,
	|			ЛОЖЬ
	|		ИЗ
	|			ВТ_ЗатраченноеВремя КАК ВТ_ЗатраченноеВремя
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПланРабочегоВремениПоДням.День,
	|			ПланРабочегоВремениПоДням.Выделено,
	|			0,
	|			ЛОЖЬ
	|		ИЗ
	|			РегистрСведений.ПланРабочегоВремениПоДням КАК ПланРабочегоВремениПоДням
	|		ГДЕ
	|			ПланРабочегоВремениПоДням.Исполнитель = &Исполнитель
	|			И ПланРабочегоВремениПоДням.Месяц = &МесяцАнализа) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.День) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.Затрачено > 0
	|			ИЛИ &ПоказыватьНерабочиеДни
	|			ИЛИ НЕ ВложенныйЗапрос.НерабочийДень)
	|
	|УПОРЯДОЧИТЬ ПО
	|	День
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Задача КАК Задача,
	|	ВложенныйЗапрос.Задача.ДатаНачала КАК ДатаЗадачи,
	|	ВложенныйЗапрос.Задача.ДатаВыполнения КАК ДатаВыполнения,
	|	ВложенныйЗапрос.Задача.ВнешнийНомер КАК ВнешнийНомер,
	|	ВложенныйЗапрос.Задача.ВнешняяСсылка КАК ВнешняяСсылка,
	|	ВложенныйЗапрос.ПланНаМесяц КАК ПланНаМесяц,
	|	ВложенныйЗапрос.ЗатраченоЗаМесяц КАК ЗатраченоЗаМесяц,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ЗатраченоЗаМесяц > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗадачаТекущегоМесяца
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Задача КАК Задача,
	|		СУММА(ВложенныйЗапрос.ПланНаМесяц) КАК ПланНаМесяц,
	|		СУММА(ВложенныйЗапрос.ЗатраченоЗаМесяц) КАК ЗатраченоЗаМесяц
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_ЗатраченноеВремя.Задача КАК Задача,
	|			0 КАК ПланНаМесяц,
	|			ВТ_ЗатраченноеВремя.Затрачено КАК ЗатраченоЗаМесяц
	|		ИЗ
	|			ВТ_ЗатраченноеВремя КАК ВТ_ЗатраченноеВремя
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗадачиПользователя.Ссылка,
	|			0,
	|			0
	|		ИЗ
	|			Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|		ГДЕ
	|			ЗадачиПользователя.Исполнитель = &Исполнитель
	|			И ЗадачиПользователя.ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗадачиПользователя.Ссылка,
	|			0,
	|			0
	|		ИЗ
	|			Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|		ГДЕ
	|			ЗадачиПользователя.Исполнитель = &Исполнитель
	|			И ЗадачиПользователя.ДатаВыполнения МЕЖДУ &НачалоПериода И &КонецПериода
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПланыПоЗадачам.Задача,
	|			ПланыПоЗадачам.Запланировано,
	|			0
	|		ИЗ
	|			РегистрСведений.ПланыПоЗадачам КАК ПланыПоЗадачам
	|		ГДЕ
	|			ПланыПоЗадачам.Месяц = &МесяцАнализа
	|			И ПланыПоЗадачам.Исполнитель = &Исполнитель) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Задача) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗадачи,
	|	ДатаВыполнения";
	
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", РегистрыСведений.ПараметрыПодсистемыПланированиеЗадач.ЗначениеПараметра("ПроизводственныйКалендарь"));
	Запрос.УстановитьПараметр("МесяцАнализа", МесяцАнализа);
	Запрос.УстановитьПараметр("НачалоМесяца", МесяцАнализа);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(МесяцАнализа));
	Запрос.УстановитьПараметр("НачалоПериода", ПериодЗадач.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ПериодЗадач.ДатаОкончания);
	Запрос.УстановитьПараметр("ПоказыватьНерабочиеДни", ПоказыватьНерабочиеДни);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	
	ВидДня = Новый Массив;
	ВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	ВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	Запрос.УстановитьПараметр("ВидДня", ВидДня);
	
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Выгрузка = РезультатЗапроса[2].Выгрузить();
	УчетРабочегоВремени.Загрузить(Выгрузка);
	
	Выгрузка = РезультатЗапроса[3].Выгрузить();
	ТаблицаДней.Загрузить(Выгрузка);
	
	Выгрузка = РезультатЗапроса[4].Выгрузить();
	ТаблицаЗадач.Загрузить(Выгрузка);
	
	ВыделеноНаМесяц = ТаблицаДней.Итог("Выделено");
	ЗатраченоЗаМесяц = ТаблицаДней.Итог("Затрачено");
	
	// Процент заполнения на текущий день.
	ПроцентЗаполненияНаТекущийДень = ОпределитьПроцентЗаполненияНаТекущийДень();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеСтрок()
	
	ПодключитьОбработчикОжидания("СнятьВыделениеСтрокОтложено", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеСтрокОтложено()
	
	Элементы.ТаблицаДней.ТекущаяСтрока = Неопределено;
	Элементы.ТаблицаЗадач.ТекущаяСтрока = Неопределено;
	ТекущаяЗадача = Неопределено;
	ТекущийДень = Неопределено;
	ПропуститьОбновлениеОписания = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонам(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Исполнитель", Исполнитель);
	ПараметрыФормы.Вставить("МесяцАнализа", МесяцАнализа);
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонамЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.РаспределениеЗатраченногоВремени.Форма.ЗаполнитьПоШаблонам", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонамЗавершение(РезультатЗаполнения, ДополнительныеПараметры) Экспорт

	Если РезультатЗаполнения = Неопределено
		Или РезультатЗаполнения = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Обработано шаблонов: %1.'"), РезультатЗаполнения);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
	ОбновитьСписокНаКлиенте();

КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьОписаниеТекущихЗначений(Принудительно = Ложь)
	
	Если ПропуститьОбновлениеОписания Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Элементы.ТаблицаДней.ТекущаяСтрока = Неопределено Тогда
		
		НовыйДень = '00010101';
		
	Иначе
		
		ТекущаяСтрока = ТаблицаДней.НайтиПоИдентификатору(Элементы.ТаблицаДней.ТекущаяСтрока);
		НовыйДень = ТекущаяСтрока.День;
		
	КонецЕсли;
	
	Если Элементы.ТаблицаЗадач.ТекущаяСтрока = Неопределено Тогда
		
		НоваяЗадача = ПредопределенноеЗначение("Задача.ЗадачиПользователя.ПустаяСсылка");
		
	Иначе
		
		ТекущаяСтрока = ТаблицаЗадач.НайтиПоИдентификатору(Элементы.ТаблицаЗадач.ТекущаяСтрока);
		НоваяЗадача = ТекущаяСтрока.Задача;
		
	КонецЕсли;
	
	Если Не Принудительно
		И НовыйДень = ТекущийДень
		И НоваяЗадача = ТекущаяЗадача Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийДень = НовыйДень;
	ТекущаяЗадача = НоваяЗадача;
	
	// Обнулим предыдущие значения.
	Для каждого СтрокаТаблицы Из ТаблицаДней Цикл
		
		СтрокаТаблицы.ДеньТекущейЗадачи = Ложь;
		СтрокаТаблицы.ЗатраченоПоЗадаче = 0;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗадач Цикл
		
		СтрокаТаблицы.ЗадачаТекущегоДня = Ложь;
		СтрокаТаблицы.ЗатраченоЗаДень = 0;
		
	КонецЦикла;
	
	// Определим задачи текущего дня.
	ПараметрыОтбора = Новый Структура("День", ТекущийДень);
	ЗадачиЗаДень = УчетРабочегоВремени.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого ЗадачаСтрока Из ЗадачиЗаДень Цикл
		
		ПараметрыОтбора = Новый Структура("Задача", ЗадачаСтрока.Задача);
		НайденныеСтроки = ТаблицаЗадач.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			СтрокаТаблицы.ЗатраченоЗаДень = ЗадачаСтрока.Затрачено;
			СтрокаТаблицы.ЗадачаТекущегоДня = ЗначениеЗаполнено(СтрокаТаблицы.ЗатраченоЗаДень);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Определим дни текущей задачи.
	ПараметрыОтбора = Новый Структура("Задача", ТекущаяЗадача);
	ДниТекущейЗадачи = УчетРабочегоВремени.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого ДеньСтрока Из ДниТекущейЗадачи Цикл
		
		ПараметрыОтбора = Новый Структура("День", ДеньСтрока.День);
		НайденныеСтроки = ТаблицаДней.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			СтрокаТаблицы.ЗатраченоПоЗадаче = ДеньСтрока.Затрачено;
			СтрокаТаблицы.ДеньТекущейЗадачи = ЗначениеЗаполнено(СтрокаТаблицы.ЗатраченоПоЗадаче);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//- РедактироватьТрудозатраты

&НаКлиенте
Процедура РедактироватьТрудозатраты(ЗадачаРедактирования, ДеньРедактирования = Неопределено, СписокДней = Неопределено)
	
	Если Не ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выделена задача для редактирования.'"));
		Возврат;
		
	КонецЕсли;
	
	Если СписокДней = Неопределено Тогда
		
		СписокДней = Новый СписокЗначений;
		
		Если ЗначениеЗаполнено(ДеньРедактирования) Тогда
			
			СписокДней.Добавить(ДеньРедактирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокДней.Количество() > 0  Тогда
		
		ДеньИзБудущего = Ложь;
		Для каждого ТекСтрока Из СписокДней Цикл
		
			Если ТекСтрока.Значение > ТекущаяДата Тогда
				ДеньИзБудущего = Истина;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ДеньИзБудущего Тогда
		
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя вводить трудозатраты по задачам из будущего периода.'"));
			Возврат;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Исполнитель", Исполнитель);
	ПараметрыФормы.Вставить("Задача", ЗадачаРедактирования);
	ПараметрыФормы.Вставить("День", ДеньРедактирования);
	ПараметрыФормы.Вставить("СписокДней", ОбщегоНазначенияКлиент.СкопироватьРекурсивно(СписокДней));
	
	ДополнительныеПараметры = Новый Структура("СписокДней", СписокДней);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьТрудозатратыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.РаспределениеЗатраченногоВремени.Форма.РедактированиеТрудозатрат", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТрудозатратыЗавершение(ИтогиПоДням, ДополнительныеПараметры) Экспорт
	
	Если ИтогиПоДням = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РедактироватьТрудозатратыНаСервере(ИтогиПоДням);
	ОбновитьОписаниеТекущихЗначений(Истина);
	
КонецПроцедуры

&НаСервере
Процедура РедактироватьТрудозатратыНаСервере(ИтогиПоДням)
	
	Для каждого КлючИЗначение Из ИтогиПоДням Цикл
		
		ДеньТрудозатрат = КлючИЗначение.Ключ;
		
		// Обновим общую таблицу по затраченному времени.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("День", ДеньТрудозатрат);
		ПараметрыОтбора.Вставить("Задача", ТекущаяЗадача);
		
		НайденныеСтроки = УчетРабочегоВремени.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТаблицы = УчетРабочегоВремени.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыОтбора);
			
		Иначе
			
			СтрокаТаблицы = НайденныеСтроки[0];
			
		КонецЕсли;
		
		СтрокаТаблицы.Затрачено = КлючИЗначение.Значение;
		
		// Обновим затраты по дню.
		ПараметрыОтбора = Новый Структура("День", ДеньТрудозатрат);
		
		ИтогиПоДню = УчетРабочегоВремени.Выгрузить(ПараметрыОтбора);
		
		НайденныеСтроки = ТаблицаДней.НайтиСтроки(ПараметрыОтбора);
		НайденныеСтроки[0].Затрачено = ИтогиПоДню.Итог("Затрачено");
		
		Если НайденныеСтроки[0].Выделено > 0 Тогда
			НайденныеСтроки[0].ПроцентЗаполнения = НайденныеСтроки[0].Затрачено / НайденныеСтроки[0].Выделено * 100;
		КонецЕсли;
		
		// Обновим затраты по задаче.
		ПараметрыОтбора = Новый Структура("Задача", ТекущаяЗадача);
		
		ИтогиПоЗадаче = УчетРабочегоВремени.Выгрузить(ПараметрыОтбора);
		
		НайденныеСтроки = ТаблицаЗадач.НайтиСтроки(ПараметрыОтбора);
		НайденныеСтроки[0].ЗатраченоЗаМесяц = ИтогиПоЗадаче.Итог("Затрачено");
		НайденныеСтроки[0].ЗадачаТекущегоМесяца = ЗначениеЗаполнено(НайденныеСтроки[0].ЗатраченоЗаМесяц);
		
	КонецЦикла;
	
	ЗатраченоЗаМесяц = ТаблицаДней.Итог("Затрачено");
	ПроцентЗаполненияНаТекущийДень = ОпределитьПроцентЗаполненияНаТекущийДень();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборПоЗадачам()

	ОтборСтрок = Новый Структура;
	
	Если ОтборПоЗадачам = 1 Тогда
		
		ОтборСтрок.Вставить("ЗадачаТекущегоМесяца", Истина);
		
	ИначеЕсли ОтборПоЗадачам = 2 Тогда
		
		ОтборСтрок.Вставить("ЗадачаТекущегоДня", Истина);
		
	Иначе
		
		Элементы.ТаблицаЗадач.ОтборСтрок = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	Элементы.ТаблицаЗадач.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);

КонецПроцедуры 

&НаСервере
Функция ОпределитьПроцентЗаполненияНаТекущийДень()
	
	ПроцентЗаполнения = 0;
	
	ВыделеноДоТекущегоДня = 0;
	ЗатраченоДоТекущегоДня = 0;
	Для каждого ТекСтрока Из ТаблицаДней Цикл
	
		Если ТекСтрока.День > ТекущаяДата Тогда
			Прервать;
		КонецЕсли;
		Если ТекСтрока.Выделено = 0 Тогда
			// Не запланированные работы на день не учитываются.
			Продолжить;
		КонецЕсли;
		
		ВыделеноДоТекущегоДня = ВыделеноДоТекущегоДня + ТекСтрока.Выделено;
		ЗатраченоДоТекущегоДня = ЗатраченоДоТекущегоДня + ТекСтрока.Затрачено;
		
	КонецЦикла;
	
	Если ВыделеноДоТекущегоДня > 0 Тогда
		ПроцентЗаполнения = ЗатраченоДоТекущегоДня / ВыделеноДоТекущегоДня * 100;
	КонецЕсли;

	
	Возврат ПроцентЗаполнения;

КонецФункции


#КонецОбласти
