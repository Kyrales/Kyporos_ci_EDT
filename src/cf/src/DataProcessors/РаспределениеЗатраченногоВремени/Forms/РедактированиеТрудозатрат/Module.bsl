
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "Исполнитель, Задача, День");
	
	ЗаполнитьИсториюПоследних();
	
	ЭтаЗадачаВыполнена = Задача.Выполнена;
	
	Если ЗначениеЗаполнено(День) Тогда
		
		НаборЗаписей = ПланированиеЗадачСервер.НаборЗаписейПоРегистру(Исполнитель, Задача, День);
		НаборЗаписей.Прочитать();
		УчетРабочегоВремени.Загрузить(НаборЗаписей.Выгрузить());
		
		СписокДней.Добавить(День);
		
		Элементы.ПояснениеРаспределениеПоДням.Заголовок = "";
		Элементы.ПогрешностьВМинутах.ТолькоПросмотр = Истина;
		Элементы.БезКонтроляОстаткаПоДню.Видимость = Ложь;
		
	Иначе
		
		СписокДней.ЗагрузитьЗначения(Параметры.СписокДней.ВыгрузитьЗначения());
		Заголовок = НСтр("ru = 'Распределение трудозатрат по дням'");
		ЭтоРаспределениеПоДням = Истина;
		Элементы.БезКонтроляОстаткаПоДню.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтаЗадачаВыполнена Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранная задача уже выполнена.'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчетРабочегоВремени

&НаКлиенте
Процедура УчетРабочегоВремениПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.УчетРабочегоВремени.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.ШаблонПлановыхЗатрат = "";
		
	ИначеЕсли НоваяСтрока Тогда
	
		ТекущиеДанные.ТипРаботы = ТипРаботыПоЗадаче(Задача);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетРабочегоВремениВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.УчетРабочегоВремениШаблонПлановыхЗатрат Тогда
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные.ШаблонПлановыхЗатрат);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ИтогиПоДням = СохранитьИзмененияНаСервере();
	Закрыть(ИтогиПоДням);
	
КонецПроцедуры

&НаСервере
Функция СохранитьИзмененияНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетРабочегоВремени.Затрачено КАК ЗатраченоВсего,
	|	ВЫБОР
	|		КОГДА УчетРабочегоВремени.Задача = &Задача
	|			ТОГДА УчетРабочегоВремени.Затрачено
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗатраченоПоЗадаче
	|ИЗ
	|	РегистрСведений.УчетРабочегоВремени КАК УчетРабочегоВремени
	|ГДЕ
	|	УчетРабочегоВремени.Исполнитель = &Исполнитель
	|	И УчетРабочегоВремени.День = &День
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланРабочегоВремениПоДням.Выделено КАК Выделено
	|ИЗ
	|	РегистрСведений.ПланРабочегоВремениПоДням КАК ПланРабочегоВремениПоДням
	|ГДЕ
	|	ПланРабочегоВремениПоДням.Исполнитель = &Исполнитель
	|	И ПланРабочегоВремениПоДням.День = &День";
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("Задача", Задача);
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
	ИтогиПоДням = Новый Соответствие;
	
	НачатьТранзакцию();
	Попытка
				
		Для каждого ЭлементСписка Из СписокДней Цикл
			
			УстановитьТрудозатратыЗаДень(ЭлементСписка, Запрос, ГенераторСлучайныхЧисел, ИтогиПоДням);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
			
	Возврат ИтогиПоДням;
	
КонецФункции

&НаСервере
Процедура УстановитьТрудозатратыЗаДень(ЭлементСписка, Запрос, ГенераторСлучайныхЧисел, ИтогиПоДням)
	
	ТрудозатратыЗаДень = ТрудозатратыЗаДень(ЭлементСписка, Запрос, ГенераторСлучайныхЧисел);
	
	Если ТрудозатратыЗаДень = Неопределено Тогда
		
		ИтогиПоДням.Вставить(ЭлементСписка.Значение, 0);
		Возврат;
		
	Иначе
		
		ИтогиПоДням.Вставить(ЭлементСписка.Значение, ТрудозатратыЗаДень.Итог("Затрачено"));
		
	КонецЕсли;
	
	ДеньТрудозатрат = ЭлементСписка.Значение;
	
	ПланированиеЗадачСервер.ФиксацияТрудозатратЗаДень(Исполнитель, Задача, ДеньТрудозатрат, ТрудозатратыЗаДень);
	
КонецПроцедуры

&НаСервере
Функция ТрудозатратыЗаДень(ЭлементСписка, Запрос, ГенераторСлучайныхЧисел)
	
	ТрудозатратыЗаДень = УчетРабочегоВремени.Выгрузить();
	
	Если Не ЭтоРаспределениеПоДням Тогда
		
		Возврат ТрудозатратыЗаДень;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("День", ЭлементСписка.Значение);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выгрузка = РезультатЗапроса[0].Выгрузить();
	ЗатраченоДругимиЗадачами = Выгрузка.Итог("ЗатраченоВсего") - Выгрузка.Итог("ЗатраченоПоЗадаче");
	
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ВыделеноНаДень = Выборка.Выделено;
		
	Иначе
		
		ВыделеноНаДень = 0;
		
	КонецЕсли;
	
	Если Не БезКонтроляОстаткаПоДню Тогда
		
		ОстатокНаДень = ВыделеноНаДень - ЗатраченоДругимиЗадачами;
		
		Если ОстатокНаДень < (ПогрешностьВМинутах / 60) Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		УказаноЧасов = ТрудозатратыЗаДень.Итог("Затрачено");
		
		Если УказаноЧасов > ОстатокНаДень Тогда
			
			ДоляРаспределения = ОстатокНаДень / УказаноЧасов;
			
			Для каждого СтрокаТаблицы Из ТрудозатратыЗаДень Цикл
				
				СтрокаТаблицы.Затрачено = СтрокаТаблицы.Затрачено * ДоляРаспределения;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;  // Не БезКонтроляОстаткаПоДню
	
	Для каждого СтрокаТаблицы Из ТрудозатратыЗаДень Цикл
		
		Отклонение = ГенераторСлучайныхЧисел.СлучайноеЧисло(, ПогрешностьВМинутах * 2);
		Отклонение = (Отклонение - ПогрешностьВМинутах) / 60;
		СтрокаТаблицы.Затрачено = СтрокаТаблицы.Затрачено + Отклонение;
		
	КонецЦикла;
	
	Возврат ТрудозатратыЗаДень;
	
КонецФункции

&НаСервере
Функция НаборЗаписейПоРегистру(ОтборДень)
	
	НаборЗаписей = РегистрыСведений.УчетРабочегоВремени.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Исполнитель.Установить(Исполнитель);
	НаборЗаписей.Отбор.Задача.Установить(Задача);
	НаборЗаписей.Отбор.День.Установить(ОтборДень);
	
	Возврат НаборЗаписей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипРаботыПоЗадаче(ЗадачаСсылка)

	ТипЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаСсылка, "ТипЗадачи");
	
	Если ТипЗадачи = Перечисления.ТипыЗадач.Сопровождение Тогда
	
		Результат = Перечисления.ТипыРаботПоЗадачам.Сопровождение;
		
	ИначеЕсли ТипЗадачи = Перечисления.ТипыЗадач.Разработка Тогда	
		
		Результат = Перечисления.ТипыРаботПоЗадачам.Разработка;
		
	Иначе
		
		Результат = Перечисления.ТипыРаботПоЗадачам.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ДекорацияВставитьИзИсторииНажатие(Элемент)
	
	СписокИсторииПоследних = Новый СписокЗначений;
	
	Для каждого ТекСтрока Из ИсторияПоследних Цикл
		
		ДанныеПоИстории = Новый Структура;
		ДанныеПоИстории.Вставить("ТипРаботы", ТекСтрока.ТипРаботы);
		ДанныеПоИстории.Вставить("Комментарий", ТекСтрока.Комментарий);
		ДанныеПоИстории.Вставить("Затрачено", ТекСтрока.Затрачено);
		
		СписокИсторииПоследних.Добавить(ДанныеПоИстории, ТекСтрока.Представление);
	
	КонецЦикла;

	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюВариантовИсторииПоследних", ЭтотОбъект, ЭтаФорма);
	ЭтаФорма.ПоказатьВыборИзМеню(Оповещение, СписокИсторииПоследних, Элементы.ДекорацияВставитьИзИстории);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюВариантовИсторииПоследних(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДанныеПоИстории = Результат.Значение;
	
	НовСтрока = УчетРабочегоВремени.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, ДанныеПоИстории);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсториюПоследних()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	ВложенныйЗапрос.ТипРаботы КАК ТипРаботы,
	                |	ВложенныйЗапрос.Затрачено КАК Затрачено,
	                |	ПОДСТРОКА(ВложенныйЗапрос.Комментарий, 1, 250) КАК Комментарий
	                |ИЗ
	                |	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
	                |		УчетРабочегоВремени.ТипРаботы КАК ТипРаботы,
	                |		УчетРабочегоВремени.Затрачено КАК Затрачено,
	                |		ПОДСТРОКА(УчетРабочегоВремени.Комментарий, 1, 250) КАК Комментарий,
	                |		УчетРабочегоВремени.День КАК День
	                |	ИЗ
	                |		РегистрСведений.УчетРабочегоВремени КАК УчетРабочегоВремени
	                |	ГДЕ
	                |		УчетРабочегоВремени.Исполнитель = &Исполнитель
	                |		И УчетРабочегоВремени.ШаблонПлановыхЗатрат = ЗНАЧЕНИЕ(Справочник.ШаблоныПлановыхТрудозатрат.ПустаяСсылка)
	                |	
	                |	УПОРЯДОЧИТЬ ПО
	                |		УчетРабочегоВремени.День УБЫВ) КАК ВложенныйЗапрос";
	 
	 Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	 
	 Результат = Запрос.Выполнить();
	 ТаблицаДанных = Результат.Выгрузить();
	 ИсторияПоследних.Загрузить(ТаблицаДанных);
 
	 Для каждого ТекСтрока Из ИсторияПоследних Цикл
		 
		  КомментарийДляВывода = ?(СтрДлина(ТекСтрока.Комментарий) < 15, ТекСтрока.Комментарий, Лев(ТекСтрока.Комментарий, 15) + "...");
		  КомментарийДляВывода = ?(ЗначениеЗаполнено(КомментарийДляВывода), СтрШаблон(НСтр("ru = ' - [%1]'"), КомментарийДляВывода), "");
		  
	 	  ТекСтрока.Представление = СтрШаблон(НСтр("ru = '%1 - %2%3'"), ТекСтрока.ТипРаботы, ТекСтрока.Затрачено, КомментарийДляВывода);
	 
	 КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти
