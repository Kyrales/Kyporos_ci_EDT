
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВариантПланирования) Тогда
		
		ВариантПланирования = "НовыеЗадачи";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МесяцПланирования) Тогда
		
		МесяцПланирования = НачалоМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), 1));
		
	КонецЕсли;
	
	ОбновитьОтборСписков(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	МесяцПланированияПредыдущий = МесяцПланирования;
	ВариантПланированияПредыдущий = ВариантПланирования;
	ИсполнительПредыдущий = Исполнитель;
	ОбновитьЗадачиНаСервере();
	ОбновитьОтборСписков(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность
		И ПланированиеДоступно(Исполнитель) Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Изменения в планировании выполнения задач не сохранены.'");
			
		Иначе
			
			ПроверитьМодифицированность("ПослеПроверкиМодифицированностиЗакрытьФорму");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательные функции

&НаКлиенте
Процедура ПослеПроверкиМодифицированностиЗакрытьФорму(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцПланированияПриИзменении(Элемент)
	
	МесяцПланирования = НачалоМесяца(МесяцПланирования);
	
	Если Не ПроверитьМодифицированность("ПослеПроверкиМодифицированностиИзмененМесяцПланирования") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МесяцПланированияПредыдущий = МесяцПланирования;
	ОбновитьЗадачиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПланированияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МесяцПланирования = ДобавитьМесяц(МесяцПланирования, Направление);
	
	Если Не ПроверитьМодифицированность("ПослеПроверкиМодифицированностиИзмененМесяцПланирования") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МесяцПланированияПредыдущий = МесяцПланирования;
	ОбновитьЗадачиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПланированияПриИзменении(Элемент)
	
	Если Не ПроверитьМодифицированность("ПослеПроверкиМодифицированностиИзмененВариантПланирования") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВариантПланированияПредыдущий = ВариантПланирования;
	ОбновитьЗадачиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	Если Не ПроверитьМодифицированность("ПослеПроверкиМодифицированностиИзмененИсполнитель") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИсполнительПредыдущий = Исполнитель;
	ОбновитьЗадачиНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗанятыеЗадачиПриИзменении(Элемент)
	
	ОбновитьОтборСписков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНеприоритизированныеЗадачиПриИзменении(Элемент)
	
	ОбновитьОтборСписков(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗадач

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	
	Если Поле = Элементы.СписокЗадачПроект
		Или Поле = Элементы.СписокЗадачТрудозатраты Тогда
		
		СтандартнаяОбработка = Ложь;
		ДобавитьЗадачуВПланНаКлиенте();
		
	ИначеЕсли Поле = Элементы.СписокЗадачЗадача Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Задача);
		
	ИначеЕсли Поле = Элементы.СписокЗадачПроцентЗавершения Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.СписокЗадач.ТекущаяСтрока);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПроцентаЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВводЧисла(ОписаниеОповещения, 
				ТекущиеДанные.ПроцентЗавершения, 
				НСтр("ru = 'Процент завершения задачи'"), 3, 0);
		
	Иначе
		
		// Не требуется обработка.
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПроцентаЗавершения(ПроцентЗавершения, ДополнительныеПараметры) Экспорт
	
	Если ПроцентЗавершения = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПослеВыбораПроцентаЗавершенияНаСервере(ПроцентЗавершения, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыбораПроцентаЗавершенияНаСервере(ПроцентЗавершения, ДополнительныеПараметры)
	
	ПроцентЗавершения = Мин(ПроцентЗавершения, 100);
	ПроцентЗавершения = Макс(ПроцентЗавершения, 0);
	СтрокаТаблицы = СписокЗадач.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	ЗадачаОбъект = СтрокаТаблицы.Задача.ПолучитьОбъект();
	ЗадачаОбъект.Заблокировать();
	ЗадачаОбъект.ПроцентЗавершения = ПроцентЗавершения;
	
	ЗадачаОбъект.Записать();
	
	СтрокаТаблицы.ПроцентЗавершения = ПроцентЗавершения;
	
	Если СтрокаТаблицы.УчитыватьТолькоВремяНаОценку Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.Трудозатраты = ЗадачаОбъект.ОстатокТрудозатрат;
	
	ПараметрыОтбора = Новый Структура("Задача", СтрокаТаблицы.Задача);
	НайденныеСтроки = ПланПоЗадачам.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		
		НайденныеСтроки[0].Трудозатраты = СтрокаТаблицы.Трудозатраты;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланПоЗадачам

&НаКлиенте
Процедура ПланПоЗадачамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПланПоЗадачам.ТекущиеДанные;
	
	Если Поле = Элементы.ПланПоЗадачамЗадача Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Задача);
		
	ИначеЕсли Поле = Элементы.ПланПоЗадачамПроект Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Проект);
		
	Иначе
		
		// Продолжение выполнения обработки.
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПоЗадачамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПоЗадачамПослеУдаления(Элемент)
	
	ОбновитьИтогиПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПоЗадачамПриИзменении(Элемент)
	
	ОбновитьИтогиПланирования();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвободноеВремяПоПроектам

&НаКлиенте
Процедура СвободноеВремяПоПроектамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элементы.СвободноеВремяПоПроектам.ТекущиеДанные.Проект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвободноеВремяПоПроектамПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СвободноеВремяПоПроектам.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		НовыйПроект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		
	Иначе
		
		НовыйПроект = ТекущиеДанные.Проект;
		
	КонецЕсли;
	
	Если НовыйПроект = ТекущийПроект Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийПроект = НовыйПроект;
	
	ОбновитьОтборСписков(ЭтотОбъект);
	ОбновитьТаблицыСвободногоВремени();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвободноеВремяПоИсполнителям

&НаКлиенте
Процедура СвободноеВремяПоИсполнителямВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элементы.СвободноеВремяПоИсполнителям.ТекущиеДанные.Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура СвободноеВремяПоИсполнителямПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СвободноеВремяПоИсполнителям.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		НовыйИсполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		
	Иначе
		
		НовыйИсполнитель = ТекущиеДанные.Исполнитель;
		
	КонецЕсли;
	
	Если НовыйИсполнитель = ТекущийИсполнитель Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийИсполнитель = НовыйИсполнитель;
	
	ОбновитьОтборСписков(ЭтотОбъект);
	ОбновитьТаблицыСвободногоВремени();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// - ОбновитьЗадачи

&НаКлиенте
Процедура ОбновитьЗадачи(Команда)
	
	Если Не ПроверитьМодифицированность("ПослеПроверкиМодифицированностиОбновитьЗадачи") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьЗадачиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиМодифицированностиОбновитьЗадачи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОбновитьЗадачиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

// - ДобавитьЗадачуВПлан

&НаКлиенте
Процедура ДобавитьЗадачуВПлан(Команда)
	
	Если Элементы.СписокЗадач.ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьЗадачуВПланНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуВПланНаКлиенте()
	
	Если Не ПланированиеДоступно(Исполнитель) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	
	Если ТекущиеДанные.ЕстьВПлане Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Задача уже есть в плане.'"));
		
	ИначеЕсли ТекущиеДанные.ЗапланированаДругим Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Задача уже взята в работу другим исполнителем.'"));
		
	Иначе
		
		ДобавитьЗадачуВПланНаСервере();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачуВПланНаСервере()
	
	СтрокаТаблицы = СписокЗадач.НайтиПоИдентификатору(Элементы.СписокЗадач.ТекущаяСтрока);
	
	НоваяСтрока = ПланПоЗадачам.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	НоваяСтрока.Запланировано = СтрокаТаблицы.Трудозатраты;
	НоваяСтрока.Исполнитель = Исполнитель;
	
	ОбновитьИтогиПланирования();
	
КонецПроцедуры

// - СохранитьПлан

&НаКлиенте
Процедура СохранитьПлан(Команда)
	
	Если Не ПланированиеДоступно(Исполнитель) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Сохранять план можно только для пользователей.'"));
		Возврат;
		
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'В строке %1 не заполнена плановая дата выполнения.'");
	ШаблонПути = "ПланПоЗадачам[%1].ПлановаяДатаВыполнения";
	ЕстьОшибки = Ложь;
	
	Для каждого СтрокаТаблицы Из ПланПоЗадачам Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПлановаяДатаВыполнения) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИндексСтроки = ПланПоЗадачам.Индекс(СтрокаТаблицы);
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ИндексСтроки + 1);
		ПутьКСтроке = СтрШаблон(ШаблонПути, Формат(ИндексСтроки, "ЧГ="));
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ПутьКСтроке, , ЕстьОшибки);
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьПланНаСервере();
	ОповеститьОбИзменении(Тип("ЗадачаСсылка.ЗадачиПользователя"));
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПланНаСервере()
	
	МаксимальныеПриоритеты = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ПланПоЗадачам Цикл
		
		Если СтрокаТаблицы.ПервичныйПриоритет = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если МаксимальныеПриоритеты[СтрокаТаблицы.Проект] = Неопределено Тогда
			
			МаксимальныеПриоритеты[СтрокаТаблицы.Проект] = 0;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ПервичныйПриоритет < МаксимальныеПриоритеты[СтрокаТаблицы.Проект] Тогда
			
			ТекстСообщения = НСтр("ru = 'Порядок выполнения задачи ""%1"" не соответствует приоритизации за месяц планирования.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТаблицы.Задача);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Задача, "ПланПоЗадачам");
			
			Возврат;
			
		Иначе
			
			МаксимальныеПриоритеты[СтрокаТаблицы.Проект] = СтрокаТаблицы.ПервичныйПриоритет;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Получим задачи из предыдущего распределения
	НаборЗаписей = РегистрыСведений.ПланыПоЗадачам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Исполнитель.Установить(Исполнитель);
	НаборЗаписей.Отбор.Месяц.Установить(МесяцПланирования);
	
	ЗадачиДляОбновления = Новый Соответствие;
	НаборЗаписей.Прочитать();
	ЗадачиДляОбновления = НаборЗаписей.Выгрузить(, "Задача").ВыгрузитьКолонку("Задача");
	
	НачатьТранзакцию();
	
	Попытка
		
		// Обновим план.
		НаборЗаписей.Очистить();
		
		Для каждого СтрокаТаблицы Из ПланПоЗадачам Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
			НоваяЗапись.Приоритет = НаборЗаписей.Индекс(НоваяЗапись);
			НоваяЗапись.Исполнитель = Исполнитель;
			НоваяЗапись.Месяц = МесяцПланирования;
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Задача, "Исполнитель") <> Исполнитель Тогда
				
				ЗадачаОбъект = СтрокаТаблицы.Задача.ПолучитьОбъект();
				ЗадачаОбъект.Заблокировать();
				ЗадачаОбъект.Исполнитель = Исполнитель;
				ЗадачаОбъект.Записать();
				
			КонецЕсли;
			
			ЗадачиДляОбновления.Добавить(СтрокаТаблицы.Задача);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		// Обновим общие сведения
		ЗадачиДляОбновления = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗадачиДляОбновления);
		
		Для каждого ЗадачаСсылка Из ЗадачиДляОбновления Цикл
			
			ПланированиеЗадачСервер.ОбновитьСведенияОЗадаче(Исполнитель, ЗадачаСсылка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();

		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ИмяСобытия = НСтр("ru = 'УчетЗадачПользователей.ПланированиеЗадач.СохранениеПлана'", КодЯзыка);
		ТекстКомментария = НСтр("ru = 'Ошибка работы системы при сохранении плана на сервере: 
		|%1'", КодЯзыка); 
		КомментарийДляЖурнала = СтрШаблон(ТекстКомментария, 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , КомментарийДляЖурнала);
		
	КонецПопытки;
	
	ОбновитьЗадачиНаСервере();
	
КонецПроцедуры

// - ТолькоДоступныеИсполнители

&НаКлиенте
Процедура ТолькоДоступныеИсполнители(Команда)
	
	ТолькоДоступныеИсполнители = Не ТолькоДоступныеИсполнители;
	Элементы.СвободноеВремяПоИсполнителямТолькоДоступныеИсполнители.Пометка = ТолькоДоступныеИсполнители;
	ОбновитьОтборСписков(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеПроверкиМодифицированностиИзмененМесяцПланирования(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		МесяцПланированияПредыдущий = МесяцПланирования;
		ОбновитьЗадачиНаСервере();
		
	Иначе
		
		МесяцПланирования = МесяцПланированияПредыдущий;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиМодифицированностиИзмененВариантПланирования(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВариантПланированияПредыдущий = ВариантПланирования;
		ОбновитьЗадачиНаСервере();
		
	Иначе
		
		ВариантПланирования = ВариантПланированияПредыдущий;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиМодифицированностиИзмененИсполнитель(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ИсполнительПредыдущий = Исполнитель;
		ОбновитьЗадачиНаСервере();
		
	Иначе
		
		Исполнитель = ИсполнительПредыдущий;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗадачиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_Исполнители
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Исполнитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыПользователейСостав.Пользователь
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&Исполнитель)
	|	И &Исполнитель <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПоЗадачам.Исполнитель КАК Исполнитель,
	|	ПланыПоЗадачам.Задача КАК Задача,
	|	ПланыПоЗадачам.Задача.Проект КАК Проект,
	|	ПланыПоЗадачам.Запланировано КАК Запланировано,
	|	ПланыПоЗадачам.Приоритет КАК Приоритет,
	|	ПланыПоЗадачам.ПлановаяДатаВыполнения КАК ПлановаяДатаВыполнения,
	|	ПланыПоЗадачам.УчитыватьТолькоВремяНаОценку КАК УчитыватьТолькоВремяНаОценку
	|ПОМЕСТИТЬ ВТ_ПланыПоЗадачам
	|ИЗ
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыПоЗадачам КАК ПланыПоЗадачам
	|		ПО ВТ_Исполнители.Исполнитель = ПланыПоЗадачам.Исполнитель
	|ГДЕ
	|	ПланыПоЗадачам.Месяц = &МесяцПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланРабочегоВремениСводный.Исполнитель КАК Исполнитель,
	|	ПланРабочегоВремениСводный.Проект КАК Проект,
	|	ПланРабочегоВремениСводный.Выделено КАК Выделено
	|ПОМЕСТИТЬ ВТ_ОстатокВремениДетальный
	|ИЗ
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланРабочегоВремениСводный КАК ПланРабочегоВремениСводный
	|		ПО ВТ_Исполнители.Исполнитель = ПланРабочегоВремениСводный.Исполнитель
	|ГДЕ
	|	ПланРабочегоВремениСводный.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.ТипыЗадач.Разработка)
	|	И ПланРабочегоВремениСводный.Месяц = &МесяцПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Исполнитель КАК Исполнитель,
	|	ВложенныйЗапрос.Проект КАК Проект,
	|	СУММА(ВложенныйЗапрос.Выделено) КАК Выделено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ОстатокВремениДетальный.Исполнитель КАК Исполнитель,
	|		ВТ_ОстатокВремениДетальный.Проект КАК Проект,
	|		ВТ_ОстатокВремениДетальный.Выделено КАК Выделено
	|	ИЗ
	|		ВТ_ОстатокВремениДетальный КАК ВТ_ОстатокВремениДетальный
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ПланыПоЗадачам.Исполнитель,
	|		ВТ_ПланыПоЗадачам.Проект,
	|		0
	|	ИЗ
	|		ВТ_ПланыПоЗадачам КАК ВТ_ПланыПоЗадачам) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Исполнитель,
	|	ВложенныйЗапрос.Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстатокВремениДетальный.Проект КАК Проект,
	|	СУММА(ВТ_ОстатокВремениДетальный.Выделено) КАК Выделено
	|ПОМЕСТИТЬ ВТ_ОстатокВремениПоПроектам
	|ИЗ
	|	ВТ_ОстатокВремениДетальный КАК ВТ_ОстатокВремениДетальный
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстатокВремениДетальный.Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритизацияЗадачСписокЗадач.Задача КАК Задача,
	|	ВЫБОР
	|		КОГДА ПриоритизацияЗадачСписокЗадач.Задача.Исполнитель = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВТ_Исполнители.Исполнитель ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапланированаДругим,
	|	ПриоритизацияЗадачСписокЗадач.НомерСтроки КАК ПервичныйПриоритет,
	|	""НовыеЗадачи"" КАК ВариантПланирования,
	|	ПриоритизацияЗадачСписокЗадач.Распределена КАК Распределена,
	|	ВЫБОР
	|		КОГДА ПриоритизацияЗадачСписокЗадач.УчитыватьТолькоВремяНаОценку
	|			ТОГДА ПриоритизацияЗадачСписокЗадач.Задача.ТрудозатратыНаОценку
	|		ИНАЧЕ ПриоритизацияЗадачСписокЗадач.Задача.ОстатокТрудозатрат
	|	КОНЕЦ КАК Трудозатраты,
	|	ПриоритизацияЗадачСписокЗадач.УчитыватьТолькоВремяНаОценку КАК УчитыватьТолькоВремяНаОценку
	|ПОМЕСТИТЬ ВТ_СписокЗадач
	|ИЗ
	|	ВТ_ОстатокВремениПоПроектам КАК ВТ_ОстатокВремениПоПроектам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриоритизацияЗадач.СписокЗадач КАК ПриоритизацияЗадачСписокЗадач
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исполнители КАК ВТ_Исполнители
	|			ПО ПриоритизацияЗадачСписокЗадач.Задача.Исполнитель = ВТ_Исполнители.Исполнитель
	|		ПО ВТ_ОстатокВремениПоПроектам.Проект = ПриоритизацияЗадачСписокЗадач.Задача.Проект
	|ГДЕ
	|	ПриоритизацияЗадачСписокЗадач.Ссылка.Дата = &МесяцПланирования
	|	И НЕ ПриоритизацияЗадачСписокЗадач.Ссылка.СлужебнаяПриоритизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка,
	|	ЛОЖЬ,
	|	0,
	|	""ТекущиеЗадачи"",
	|	ИСТИНА,
	|	ЗадачиПользователя.ОстатокТрудозатрат,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияЗадач КАК ТекущиеСостоянияЗадач
	|			ПО ЗадачиПользователя.Ссылка = ТекущиеСостоянияЗадач.Задача
	|		ПО ВТ_Исполнители.Исполнитель = ЗадачиПользователя.Исполнитель
	|ГДЕ
	|	НЕ ЗадачиПользователя.Выполнена
	|	И НЕ ТекущиеСостоянияЗадач.Состояние В (&ИсключаемыеСостояния)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокЗадач.Задача КАК Задача,
	|	ВТ_СписокЗадач.ПервичныйПриоритет КАК ПервичныйПриоритет
	|ПОМЕСТИТЬ ВТ_ПервичныеПриоритеты
	|ИЗ
	|	ВТ_СписокЗадач КАК ВТ_СписокЗадач
	|ГДЕ
	|	ВТ_СписокЗадач.ВариантПланирования = ""НовыеЗадачи""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокЗадач.Задача.Проект КАК Проект,
	|	ВТ_СписокЗадач.Задача КАК Задача,
	|	ВТ_СписокЗадач.УчитыватьТолькоВремяНаОценку КАК УчитыватьТолькоВремяНаОценку,
	|	ВТ_СписокЗадач.Трудозатраты КАК Трудозатраты,
	|	ЕСТЬNULL(ВТ_ПервичныеПриоритеты.ПервичныйПриоритет, 0) КАК ПервичныйПриоритет,
	|	ВТ_СписокЗадач.ЗапланированаДругим КАК ЗапланированаДругим,
	|	ВТ_СписокЗадач.Задача.ПроцентЗавершения КАК ПроцентЗавершения,
	|	ВТ_СписокЗадач.Распределена КАК Распределена,
	|	ТекущиеСостоянияЗадач.Состояние КАК Состояние,
	|	ТекущиеСостоянияЗадач.СтатусОбработки КАК Статус
	|ИЗ
	|	ВТ_СписокЗадач КАК ВТ_СписокЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеСостоянияЗадач КАК ТекущиеСостоянияЗадач
	|		ПО ВТ_СписокЗадач.Задача = ТекущиеСостоянияЗадач.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервичныеПриоритеты КАК ВТ_ПервичныеПриоритеты
	|		ПО ВТ_СписокЗадач.Задача = ВТ_ПервичныеПриоритеты.Задача
	|ГДЕ
	|	ВТ_СписокЗадач.ВариантПланирования = &ВариантПланирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проект,
	|	ПервичныйПриоритет
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПланыПоЗадачам.Исполнитель КАК Исполнитель,
	|	ВТ_ПланыПоЗадачам.Задача КАК Задача,
	|	ВТ_ПланыПоЗадачам.Проект КАК Проект,
	|	ВТ_ПланыПоЗадачам.Запланировано КАК Запланировано,
	|	ВТ_ПланыПоЗадачам.Приоритет КАК Приоритет,
	|	ВТ_ПланыПоЗадачам.ПлановаяДатаВыполнения КАК ПлановаяДатаВыполнения,
	|	ВТ_ПланыПоЗадачам.УчитыватьТолькоВремяНаОценку КАК УчитыватьТолькоВремяНаОценку,
	|	ЕСТЬNULL(ВТ_СписокЗадач.Трудозатраты, ВТ_ПланыПоЗадачам.Задача.ОстатокТрудозатрат) КАК Трудозатраты
	|ИЗ
	|	ВТ_ПланыПоЗадачам КАК ВТ_ПланыПоЗадачам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокЗадач КАК ВТ_СписокЗадач
	|		ПО ВТ_ПланыПоЗадачам.Задача = ВТ_СписокЗадач.Задача
	|			И (ВТ_СписокЗадач.ВариантПланирования = ""НовыеЗадачи"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("МесяцПланирования", МесяцПланирования);
	Запрос.УстановитьПараметр("ПредыдущийМесяц", ДобавитьМесяц(МесяцПланирования, -1));
	Запрос.УстановитьПараметр("ВариантПланирования", ВариантПланирования);
	
	ИсключаемыеСостояния = Новый Массив;
	ИсключаемыеСостояния.Добавить(Справочники.СостоянияЗадач.НаБизнесТестировании);
	ИсключаемыеСостояния.Добавить(Справочники.СостоянияЗадач.ОжиданиеПереносаИзменений);
	Запрос.УстановитьПараметр("ИсключаемыеСостояния", ИсключаемыеСостояния);
	
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	// Свободное время
	Выгрузка = РезультатЗапроса[3].Выгрузить();
	СвободноеВремяДетальное.Загрузить(Выгрузка);
	
	// Приоритеты задач
	Выгрузка = РезультатЗапроса[6].Выгрузить();
	ПриоритетыЗадач.Загрузить(Выгрузка);
	
	// Список задач
	ТекущаяСтрока = Элементы.СписокЗадач.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		ТекущаяЗадача = Неопределено;
		
	Иначе
		
		ТекущаяЗадача = СписокЗадач.НайтиПоИдентификатору(ТекущаяСтрока).Задача;
		
	КонецЕсли;
	
	Выгрузка = РезультатЗапроса[7].Выгрузить();
	СписокЗадач.Загрузить(Выгрузка);
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		
		ПараметрыОтбора = Новый Структура("Задача", ТекущаяЗадача);
		НайденныеСтроки = СписокЗадач.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Элементы.СписокЗадач.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запланированные задачи
	Выгрузка = РезультатЗапроса[8].Выгрузить();
	ПланПоЗадачам.Загрузить(Выгрузка);
	
	// Расчет итогов планирования
	ОбновитьИтогиПланирования();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПланирования()
	
	// Остаток времени.
	Для каждого СтрокаТаблицы Из СвободноеВремяДетальное Цикл
		
		СтрокаТаблицы.Запланировано = 0;
		СтрокаТаблицы.ОстатокВремени = СтрокаТаблицы.Выделено;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ПланПоЗадачам Цикл
		
		//  Остаток по проектам.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Проект", СтрокаТаблицы.Проект);
		ПараметрыОтбора.Вставить("Исполнитель", СтрокаТаблицы.Исполнитель);
		НайденныеСтроки = СвободноеВремяДетальное.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ОстатокСтрока = СвободноеВремяПоПроектам.Добавить();
			ОстатокСтрока.Проект = СтрокаТаблицы.Проект;
			
		Иначе
			
			ОстатокСтрока = НайденныеСтроки[0];
			
		КонецЕсли;
		
		ОстатокСтрока.Запланировано = ОстатокСтрока.Запланировано + СтрокаТаблицы.Запланировано;
		ОстатокСтрока.ОстатокВремени = ОстатокСтрока.ОстатокВремени - СтрокаТаблицы.Запланировано;
		
	КонецЦикла;
	
	ТаблицаВремени = СвободноеВремяДетальное.Выгрузить();
	ТаблицаВремени.Свернуть("Проект");
	НоваяСтрока = ТаблицаВремени.Добавить();
	СвободноеВремяПоПроектам.Загрузить(ТаблицаВремени);
	СвободноеВремяПоПроектам.Сортировать("Проект");
	
	ТаблицаВремени = СвободноеВремяДетальное.Выгрузить();
	ТаблицаВремени.Свернуть("Исполнитель");
	НоваяСтрока = ТаблицаВремени.Добавить();
	СвободноеВремяПоИсполнителям.Загрузить(ТаблицаВремени);
	СвободноеВремяПоИсполнителям.Сортировать("Исполнитель");
	
	ОбновитьТаблицыСвободногоВремени();
	
	// Признак запланированности.
	Для каждого СтрокаТаблицы Из СписокЗадач Цикл
		
		ПараметрыОтбора = Новый Структура("Задача", СтрокаТаблицы.Задача);
		НайденныеСтроки = ПланПоЗадачам.НайтиСтроки(ПараметрыОтбора);
		СтрокаТаблицы.ЕстьВПлане = (НайденныеСтроки.Количество() > 0);
		
	КонецЦикла;
	
	// Первичный приоритет.
	Для каждого СтрокаТаблицы Из ПланПоЗадачам Цикл
		
		ПараметрыОтбора = Новый Структура("Задача", СтрокаТаблицы.Задача);
		НайденныеСтроки = ПриоритетыЗадач.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТаблицы.ПервичныйПриоритет = 0;
			
		Иначе
			
			СтрокаТаблицы.ПервичныйПриоритет = НайденныеСтроки[0].ПервичныйПриоритет;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицыСвободногоВремени()
	
	ОбновитьТаблицуСвободногоВремени("СвободноеВремяПоПроектам", "Проект", "Исполнитель", ТекущийИсполнитель);
	ОбновитьТаблицуСвободногоВремени("СвободноеВремяПоИсполнителям", "Исполнитель", "Проект", ТекущийПроект);
	
	Для каждого СтрокаТаблицы Из СвободноеВремяПоИсполнителям Цикл
		
		Если СтрокаТаблицы.Выделено > 0
			Или СтрокаТаблицы.Запланировано > 0
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.Исполнитель) Тогда
			
			СтрокаТаблицы.ИсполнительДоступен = Истина;
			
		Иначе
			
			СтрокаТаблицы.ИсполнительДоступен = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуСвободногоВремени(ИмяТаблицы, ИмяПоля, ПолеОтбора, ЗначениеОтбора)
	
	// Очистим текущие значения.
	Для каждого СтрокаТаблицы Из ЭтотОбъект[ИмяТаблицы] Цикл
		
		СтрокаТаблицы.Выделено = 0;
		СтрокаТаблицы.Запланировано = 0;
		СтрокаТаблицы.ОстатокВремени = 0;
		
	КонецЦикла;
	
	// Получим детальные записи по отбору и свернем их.
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		
		ПараметрыОтбора.Вставить(ПолеОтбора, ЗначениеОтбора);
		
	КонецЕсли;
	
	ТаблицаВремени = СвободноеВремяДетальное.Выгрузить(ПараметрыОтбора);
	ТаблицаВремени.Свернуть(ИмяПоля, "Выделено, Запланировано, ОстатокВремени");
	
	// Добавим итоговую строку.
	НоваяСтрока = ТаблицаВремени.Добавить();
	НоваяСтрока.Выделено = ТаблицаВремени.Итог("Выделено");
	НоваяСтрока.Запланировано = ТаблицаВремени.Итог("Запланировано");
	НоваяСтрока.ОстатокВремени = ТаблицаВремени.Итог("ОстатокВремени");
	
	// Обновим строки в таблице на форме.
	Для каждого СтрокаТаблицы Из ТаблицаВремени Цикл
		
		ПараметрыОтбора = Новый Структура(ИмяПоля, СтрокаТаблицы[ИмяПоля]);
		НайденныеСтроки = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
		НайденныеСтроки[0].Выделено = СтрокаТаблицы.Выделено;
		НайденныеСтроки[0].Запланировано = СтрокаТаблицы.Запланировано;
		НайденныеСтроки[0].ОстатокВремени = СтрокаТаблицы.ОстатокВремени;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьМодифицированность(ФункцияОповещения, ДополнительныеПараметры = Неопределено)
	
	Если Не Модифицированность
		Или Не ПланированиеДоступно(ИсполнительПредыдущий) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Изменения не сохранены. Продолжить?'");
	ОписаниеОповещения = Новый ОписаниеОповещения(ФункцияОповещения, ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборСписков(Контекст)
	
	Элементы = Контекст.Элементы;
	
	// Отбор по задачам.
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контекст.ТекущийПроект) Тогда
		
		ПараметрыОтбора.Вставить("Проект", Контекст.ТекущийПроект);
		
	КонецЕсли;
	
	Если Не Контекст.ПоказыватьЗанятыеЗадачи Тогда
		
		ПараметрыОтбора.Вставить("ЗапланированаДругим", Ложь);
		
	КонецЕсли;
	
	Если Не Контекст.ПоказыватьНеприоритизированныеЗадачи Тогда
		
		ПараметрыОтбора.Вставить("Распределена", Истина);
		
	КонецЕсли;
	
	Элементы.СписокЗадач.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	
	// Запланированные задачи.
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контекст.ТекущийПроект) Тогда
		
		ПараметрыОтбора.Вставить("Проект", Контекст.ТекущийПроект);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контекст.ТекущийИсполнитель) Тогда
		
		ПараметрыОтбора.Вставить("Исполнитель", Контекст.ТекущийИсполнитель);
		
	КонецЕсли;
	
	Элементы.ПланПоЗадачам.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	
	// Свободное время.
	ПараметрыОтбора = Новый Структура;
	
	Если Контекст.ТолькоДоступныеИсполнители Тогда
		
		ПараметрыОтбора.Вставить("ИсполнительДоступен", Истина);
		
	КонецЕсли;
	
	Элементы.СвободноеВремяПоИсполнителям.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПланированиеДоступно(Исполнитель)
	
	Если ЗначениеЗаполнено(Исполнитель)
		И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Контекст)
	
	Контекст.Элементы.ПланПоЗадачам.ТолькоПросмотр = Не ПланированиеДоступно(Контекст.Исполнитель);
	
КонецПроцедуры

#КонецОбласти