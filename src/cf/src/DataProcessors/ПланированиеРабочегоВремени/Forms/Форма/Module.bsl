
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	МесяцПланирования = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), 1);
	МесяцПланированияПредыдущий = МесяцПланирования;
	ГруппаПользователейПредыдущая = ГруппаПользователей;
	ОбновитьОтборСтрокПоИсполнителю(ЭтотОбъект, Справочники.Пользователи.ПустаяСсылка());
	ЗаполнитьСотрудниковНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	ГруппаПользователейПредыдущая = ГруппаПользователей;
	ЗаполнитьСотрудниковНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Модифицированность Тогда

		Отказ = Истина;

		Если ЗавершениеРаботы Тогда

			ТекстПредупреждения = НСтр("ru = 'Изменения в планировании рабочего времени не сохранены.'");

		Иначе

			ПроверитьМодифицированность("ПослеПроверкиМодифицированностиЗакрытьФорму");

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцПланированияПриИзменении(Элемент)
	
	МесяцПланирования = НачалоМесяца(МесяцПланирования);
	
	Если Не ПроверитьМодифицированность("ПослеПроверкиМодифицированностиИзмененМесяцПланирования") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МесяцПланированияПредыдущий = МесяцПланирования;
	ЗаполнитьСотрудниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПланированияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МесяцПланирования = ДобавитьМесяц(МесяцПланирования, Направление);
	
	Если Не ПроверитьМодифицированность("ПослеПроверкиМодифицированностиИзмененМесяцПланирования") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МесяцПланированияПредыдущий = МесяцПланирования;
	ЗаполнитьСотрудниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПользователейПриИзменении(Элемент)
	
	Если Не ПроверитьМодифицированность("ПослеПроверкиМодифицированностиИзмененаГруппаПользователей") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ГруппаПользователейПредыдущая = ГруппаПользователей;
	ЗаполнитьСотрудниковНаСервере();
	
КонецПроцедуры

// Вспомогательные функции

&НаКлиенте
Процедура ПослеПроверкиМодифицированностиИзмененМесяцПланирования(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		МесяцПланированияПредыдущий = МесяцПланирования;
		ЗаполнитьСотрудниковНаСервере();
		
	Иначе
		
		МесяцПланирования = МесяцПланированияПредыдущий;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиМодифицированностиИзмененаГруппаПользователей(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ГруппаПользователейПредыдущая = ГруппаПользователей;
		ЗаполнитьСотрудниковНаСервере();
		
	Иначе
		
		ГруппаПользователей = ГруппаПользователейПредыдущая;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаИсполнителей

&НаКлиенте
Процедура ТаблицаИсполнителейПриАктивизацииСтроки(Элемент)
	
	Исполнитель = ТекущийИсполнитель();
	
	ОбновитьОтборСтрокПоИсполнителю(ЭтотОбъект, Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсполнителейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаИсполнителей.ТекущиеДанные;
	
	Если Поле = Элементы.ТаблицаИсполнителейИсполнитель Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Исполнитель);
		
	ИначеЕсли Поле = Элементы.ТаблицаИсполнителейПрофиль Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Профиль);
		
	ИначеЕсли Поле = Элементы.ТаблицаИсполнителейВыделеноПоДням Тогда
		// BSLLS:GetFormMethod-off
		ФормаПланаРабочегоВремени = ПолучитьФорму("РегистрСведений.ПланРабочегоВремениПоДням.ФормаСписка", , ЭтаФорма);
		// BSLLS:GetFormMethod-on	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаПланаРабочегоВремени.Список, "Исполнитель", 
			ТекущиеДанные.Исполнитель,,,, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаПланаРабочегоВремени.Список, "Месяц", 
			МесяцПланирования,,,, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		ФормаПланаРабочегоВремени.Открыть();
		
	Иначе
		
		// без обработки
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ЗаполнитьСотрудников

&НаКлиенте
Процедура ЗаполнитьСотрудников(Команда)
	
	Если Не ПроверитьМодифицированность("ПослеПроверкиМодифицированностиЗаполнитьСотрудников") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСотрудниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиМодифицированностиЗаполнитьСотрудников(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьСотрудниковНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудниковНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыПользователейСостав.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_Пользователи
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&ГруппаПользователей)
	|	И &ГруппаПользователей <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)
	|	И НЕ ГруппыПользователейСостав.Пользователь.Недействителен
	|	И НЕ ГруппыПользователейСостав.Пользователь.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланРабочегоВремениСводный.Исполнитель КАК Исполнитель,
	|	ПланРабочегоВремениСводный.ТипЗадачи КАК ТипЗадачи,
	|	ПланРабочегоВремениСводный.Проект КАК Проект,
	|	ПланРабочегоВремениСводный.Выделено КАК Выделено
	|ПОМЕСТИТЬ ВТ_ПланСводный
	|ИЗ
	|	ВТ_Пользователи КАК ВТ_Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланРабочегоВремениСводный КАК ПланРабочегоВремениСводный
	|		ПО ВТ_Пользователи.Пользователь = ПланРабочегоВремениСводный.Исполнитель
	|ГДЕ
	|	ПланРабочегоВремениСводный.Месяц = &МесяцПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланРабочегоВремениПоДням.Исполнитель КАК Исполнитель,
	|	ПланРабочегоВремениПоДням.День КАК День,
	|	ПланРабочегоВремениПоДням.Выделено КАК Выделено
	|ПОМЕСТИТЬ ВТ_ПланПоДням
	|ИЗ
	|	ВТ_Пользователи КАК ВТ_Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланРабочегоВремениПоДням КАК ПланРабочегоВремениПоДням
	|		ПО ВТ_Пользователи.Пользователь = ПланРабочегоВремениПоДням.Исполнитель
	|ГДЕ
	|	ПланРабочегоВремениПоДням.Месяц = &МесяцПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Исполнитель КАК Исполнитель,
	|	СУММА(ВложенныйЗапрос.ВыделеноСводно) КАК ВыделеноСводно,
	|	СУММА(ВложенныйЗапрос.ВыделеноПоДням) КАК ВыделеноПоДням
	|ПОМЕСТИТЬ ВТ_ИтогиПоИсполнителям
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ПланСводный.Исполнитель КАК Исполнитель,
	|		ВТ_ПланСводный.Выделено КАК ВыделеноСводно,
	|		0 КАК ВыделеноПоДням
	|	ИЗ
	|		ВТ_ПланСводный КАК ВТ_ПланСводный
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ПланПоДням.Исполнитель,
	|		0,
	|		ВТ_ПланПоДням.Выделено
	|	ИЗ
	|		ВТ_ПланПоДням КАК ВТ_ПланПоДням) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрофилиРаспределенияРабочегоВремениИсполнителейСрезПоследних.Исполнитель КАК Исполнитель,
	|	ПрофилиРаспределенияРабочегоВремениИсполнителейСрезПоследних.Профиль КАК Профиль
	|ПОМЕСТИТЬ ВТ_ПрофилиРаспределенияРабочегоВремениИсполнителей
	|ИЗ
	|	РегистрСведений.ПрофилиРаспределенияРабочегоВремениИсполнителей.СрезПоследних(
	|			&МесяцПланирования,
	|			Исполнитель В
	|				(ВЫБРАТЬ
	|					ВТ_Пользователи.Пользователь КАК Пользователь
	|				ИЗ
	|					ВТ_Пользователи КАК ВТ_Пользователи)) КАК ПрофилиРаспределенияРабочегоВремениИсполнителейСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПрофилиРаспределенияРабочегоВремениИсполнителей.Исполнитель КАК Исполнитель,
	|	ВТ_ПрофилиРаспределенияРабочегоВремениИсполнителей.Профиль КАК Профиль,
	|	ВТ_ИтогиПоИсполнителям.ВыделеноСводно КАК ВыделеноСводно,
	|	ВТ_ИтогиПоИсполнителям.ВыделеноПоДням КАК ВыделеноПоДням
	|ИЗ
	|	ВТ_ПрофилиРаспределенияРабочегоВремениИсполнителей КАК ВТ_ПрофилиРаспределенияРабочегоВремениИсполнителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИтогиПоИсполнителям КАК ВТ_ИтогиПоИсполнителям
	|		ПО ВТ_ПрофилиРаспределенияРабочегоВремениИсполнителей.Исполнитель = ВТ_ИтогиПоИсполнителям.Исполнитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Исполнитель
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("МесяцПланирования", МесяцПланирования);
	Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
	
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Выгрузка = РезультатЗапроса[1].Выгрузить();
	РезультатРаспределенияСводный.Загрузить(Выгрузка);
	
	Выгрузка = РезультатЗапроса[2].Выгрузить();
	РезультатРаспределенияПоДням.Загрузить(Выгрузка);
	
	Выгрузка = РезультатЗапроса[5].Выгрузить();
	ТаблицаИсполнителей.Загрузить(Выгрузка);
	
	ОбновитьФактическийПроцентРаспределения();
	РассчитатьРезультатРаспределенияПоПроектам();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

// Распределение времени

&НаКлиенте
Процедура ВыполнитьРаспределениеПоВсемСотрудникам(Команда)
	
	ИмяКоманды = Команда.Имя;
	ВыполнитьРаспределениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРаспределениеПоСотруднику(Команда)
	
	ИмяКоманды = Команда.Имя;
	ВыполнитьРаспределениеНаСервере();
	
	Исполнитель = ТекущийИсполнитель();
	
	ОбновитьОтборСтрокПоИсполнителю(ЭтотОбъект, Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРаспределениеПоВыделеннымДнямСотрудника(Команда)
	
	ИмяКоманды = Команда.Имя;
	ВыполнитьРаспределениеНаСервере();
	
	Исполнитель = ТекущийИсполнитель();
	
	ОбновитьОтборСтрокПоИсполнителю(ЭтотОбъект, Исполнитель);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределениеНаСервере()
	
	Если ИмяКоманды = "ВыполнитьРаспределениеПоСотруднику"
		Или ИмяКоманды = "ОбновитьРаспределениеПоВыделеннымДнямСотрудника" Тогда
		
		ИдентификаторСтроки = Элементы.ТаблицаИсполнителей.ТекущаяСтрока;
		
		Если ИдентификаторСтроки = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ТекущаяСтрока = ТаблицаИсполнителей.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущийИсполнитель = ТекущаяСтрока.Исполнитель;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаИсполнителей.Исполнитель КАК Справочник.Пользователи) КАК Исполнитель,
	|	ВЫРАЗИТЬ(ТаблицаИсполнителей.Профиль КАК Справочник.ПрофилиРаспределенияРабочегоВремени) КАК Профиль
	|ПОМЕСТИТЬ ВТ_ТаблицаИсполнителей
	|ИЗ
	|	&ТаблицаИсполнителей КАК ТаблицаИсполнителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Профиль КАК Профиль,
	|	ВложенныйЗапрос.ТипЗадачи КАК ТипЗадачи,
	|	ВложенныйЗапрос.Проект КАК Проект,
	|	ВложенныйЗапрос.РаспределениеПоПроцентуВремени КАК РаспределениеПоПроцентуВремени,
	|	ВложенныйЗапрос.КоличествоЧасовВДень КАК КоличествоЧасовВДень,
	|	ВложенныйЗапрос.КоличествоЧасовДляПланированияВДень * ВложенныйЗапрос.ДоляВремени КАК КоличествоЧасовВРабочийДень,
	|	(ВложенныйЗапрос.КоличествоЧасовДляПланированияВДень - 1) * ВложенныйЗапрос.ДоляВремени КАК КоличествоЧасовВПредпраздничныйДень
	|ПОМЕСТИТЬ ВТ_ПараметрыПрофилей
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрофилиРаспределенияРабочегоВремениРаспределениеВремени.Ссылка КАК Профиль,
	|		ПрофилиРаспределенияРабочегоВремениРаспределениеВремени.ТипЗадачи КАК ТипЗадачи,
	|		ПрофилиРаспределенияРабочегоВремениРаспределениеВремени.Проект КАК Проект,
	|		ВЫБОР
	|			КОГДА ПрофилиРаспределенияРабочегоВремени.КоличествоЧасовДляПланированияВДень = 0
	|				ТОГДА &КоличествоЧасовДляПланированияВДень
	|			ИНАЧЕ ПрофилиРаспределенияРабочегоВремени.КоличествоЧасовДляПланированияВДень
	|		КОНЕЦ КАК КоличествоЧасовДляПланированияВДень,
	|		ПрофилиРаспределенияРабочегоВремени.РаспределениеПоПроцентуВремени КАК РаспределениеПоПроцентуВремени,
	|		ПрофилиРаспределенияРабочегоВремениРаспределениеВремени.КоличествоЧасовВДень КАК КоличествоЧасовВДень,
	|		ПрофилиРаспределенияРабочегоВремениРаспределениеВремени.ПроцентВремени / 100 КАК ДоляВремени
	|	ИЗ
	|		Справочник.ПрофилиРаспределенияРабочегоВремени.РаспределениеВремени КАК ПрофилиРаспределенияРабочегоВремениРаспределениеВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиРаспределенияРабочегоВремени КАК ПрофилиРаспределенияРабочегоВремени
	|			ПО ПрофилиРаспределенияРабочегоВремениРаспределениеВремени.Ссылка = ПрофилиРаспределенияРабочегоВремени.Ссылка
	|	ГДЕ
	|		ПрофилиРаспределенияРабочегоВремениРаспределениеВремени.Ссылка В(&СписокПрофилей)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПараметрыПрофилей.Профиль КАК Профиль,
	|	ВТ_ПараметрыПрофилей.ТипЗадачи КАК ТипЗадачи,
	|	ВТ_ПараметрыПрофилей.Проект КАК Проект,
	|	ДанныеПроизводственногоКалендаря.Дата КАК День,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_ПараметрыПрофилей.РаспределениеПоПроцентуВремени
	|			ТОГДА ВТ_ПараметрыПрофилей.КоличествоЧасовВДень
	|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			ТОГДА ВТ_ПараметрыПрофилей.КоличествоЧасовВПредпраздничныйДень
	|		ИНАЧЕ ВТ_ПараметрыПрофилей.КоличествоЧасовВРабочийДень
	|	КОНЕЦ КАК КоличествоЧасовВДень
	|ПОМЕСТИТЬ ВТ_ПланПоПрофилям
	|ИЗ
	|	ВТ_ПараметрыПрофилей КАК ВТ_ПараметрыПрофилей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеПроизводственногоКалендаря.ВидДня В(&ВидДня)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИсполнителей.Исполнитель КАК Исполнитель,
	|	ВТ_ПланПоПрофилям.ТипЗадачи КАК ТипЗадачи,
	|	ВТ_ПланПоПрофилям.Проект КАК Проект,
	|	ВТ_ПланПоПрофилям.День КАК День,
	|	ВТ_ПланПоПрофилям.КоличествоЧасовВДень КАК Выделено
	|ПОМЕСТИТЬ ВТ_ПланыПоИсполнителям
	|ИЗ
	|	ВТ_ПланПоПрофилям КАК ВТ_ПланПоПрофилям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаИсполнителей КАК ВТ_ТаблицаИсполнителей
	|		ПО ВТ_ПланПоПрофилям.Профиль = ВТ_ТаблицаИсполнителей.Профиль
	|ГДЕ
	|	ВТ_ПланПоПрофилям.КоличествоЧасовВДень > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтсутствияИсполнителей.Исполнитель КАК Исполнитель,
	|	ДанныеПроизводственногоКалендаря.Дата КАК День
	|ПОМЕСТИТЬ ВТ_ОтсутствияИсполнителей
	|ИЗ
	|	РегистрСведений.ОтсутствияИсполнителей КАК ОтсутствияИсполнителей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ОтсутствияИсполнителей.ДатаНачала <= ДанныеПроизводственногоКалендаря.Дата
	|			И ОтсутствияИсполнителей.ДатаОкончания >= ДанныеПроизводственногоКалендаря.Дата
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПланыПоИсполнителям.Исполнитель КАК Исполнитель,
	|	ВТ_ПланыПоИсполнителям.ТипЗадачи КАК ТипЗадачи,
	|	ВТ_ПланыПоИсполнителям.Проект КАК Проект,
	|	ВТ_ПланыПоИсполнителям.День КАК День,
	|	ВТ_ПланыПоИсполнителям.Выделено * 1 КАК Выделено
	|ИЗ
	|	ВТ_ПланыПоИсполнителям КАК ВТ_ПланыПоИсполнителям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтсутствияИсполнителей КАК ВТ_ОтсутствияИсполнителей
	|		ПО ВТ_ПланыПоИсполнителям.Исполнитель = ВТ_ОтсутствияИсполнителей.Исполнитель
	|			И ВТ_ПланыПоИсполнителям.День = ВТ_ОтсутствияИсполнителей.День
	|ГДЕ
	|	ВТ_ОтсутствияИсполнителей.День ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Исполнитель,
	|	ТипЗадачи";
	
	ПараметрыПодсистемы = РегистрыСведений.ПараметрыПодсистемыПланированиеЗадач.Параметры();
	
	Если Не ЗначениеЗаполнено(ПараметрыПодсистемы.ПроизводственныйКалендарь) Тогда
		ТекстСообщения = НСтр("ru = 'Производственный календарь для планирования не заполнен (в параметрах подсистемы ""Планирование задач"").'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
	Если ПараметрыПодсистемы.КоличествоЧасовДляПланированияВДень = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не задано количество часов для планирования в день (в параметрах подсистемы ""Планирование задач"").'"));	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", МесяцПланирования);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(МесяцПланирования));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПараметрыПодсистемы.ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("КоличествоЧасовДляПланированияВДень", ПараметрыПодсистемы.КоличествоЧасовДляПланированияВДень);
	
	ВидДня = Новый Массив;
	ВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	ВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	Запрос.УстановитьПараметр("ВидДня", ВидДня);
	
	ПараметрыОтбора = Новый Структура;
	
	Если ИмяКоманды = "ВыполнитьРаспределениеПоСотруднику" Тогда
		
		ПараметрыОтбора.Вставить("Исполнитель", ТекущийИсполнитель);
		
	КонецЕсли;
	
	ТаблицаИсполнителейЗначение = ТаблицаИсполнителей.Выгрузить(ПараметрыОтбора);
	Запрос.УстановитьПараметр("ТаблицаИсполнителей", ТаблицаИсполнителейЗначение);
	
	ТаблицаПрофилей = ТаблицаИсполнителейЗначение.Скопировать(, "Профиль");
	ТаблицаПрофилей.Свернуть("Профиль");
	СписокПрофилей = ТаблицаПрофилей.ВыгрузитьКолонку("Профиль");
	Запрос.УстановитьПараметр("СписокПрофилей", СписокПрофилей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	
	// Предварительная очитска: РезультатРаспределенияСводный, РезультатРаспределенияПоДням
	ПодготовкаРезультирующихТаблиц(ПараметрыОтбора);

	// РезультатРаспределенияСводный
	ТаблицаРаспределения = Выгрузка.Скопировать();
	ТаблицаРаспределения.Свернуть("Исполнитель, ТипЗадачи, Проект", "Выделено");
	
	Для каждого СтрокаТаблицы Из ТаблицаРаспределения Цикл
		
		НоваяСтрока = РезультатРаспределенияСводный.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	// РезультатРаспределенияПоДням
	ТаблицаРаспределения = Выгрузка.Скопировать();
	ТаблицаРаспределения.Свернуть("Исполнитель, День", "Выделено");
	
	Если ИмяКоманды <> "ОбновитьРаспределениеПоВыделеннымДнямСотрудника" Тогда
	
		Для каждого СтрокаТаблицы Из ТаблицаРаспределения Цикл
			
			НоваяСтрока = РезультатРаспределенияПоДням.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
	
	КонецЕсли;
	
	ТаблицаРаспределения.Свернуть("Исполнитель", "Выделено");
	
	Для каждого СтрокаТаблицы Из ТаблицаИсполнителей Цикл
		
		ОбработкаСтрокиРаспределенияТаблицыИсполнителей(СтрокаТаблицы, ТаблицаРаспределения, ТекущийИсполнитель);
		
	КонецЦикла;
	
	ОбновитьФактическийПроцентРаспределения(); 
	
	РассчитатьРезультатРаспределенияПоПроектам();
		
КонецПроцедуры

&НаСервере
Процедура ПодготовкаРезультирующихТаблиц(ПараметрыОтбора)

	Если ИмяКоманды = "ВыполнитьРаспределениеПоСотруднику" Тогда
		
		НайденныеСтроки = РезультатРаспределенияСводный.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			РезультатРаспределенияСводный.Удалить(СтрокаТаблицы);
			
		КонецЦикла;
		
		НайденныеСтроки = РезультатРаспределенияПоДням.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			РезультатРаспределенияПоДням.Удалить(СтрокаТаблицы);
			
		КонецЦикла;
		
	ИначеЕсли ИмяКоманды = "ОбновитьРаспределениеПоВыделеннымДнямСотрудника" Тогда	
		// Оставляем результаты распределения по дням.
		
		НайденныеСтроки = РезультатРаспределенияСводный.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			РезультатРаспределенияСводный.Удалить(СтрокаТаблицы);
			
		КонецЦикла;
		
	Иначе
		
		РезультатРаспределенияСводный.Очистить();
		РезультатРаспределенияПоДням.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаСтрокиРаспределенияТаблицыИсполнителей(СтрокаТаблицы, ТаблицаРаспределения, ТекущийИсполнитель)
	
	Если ИмяКоманды = "ВыполнитьРаспределениеПоСотруднику"
		И СтрокаТаблицы.Исполнитель <> ТекущийИсполнитель Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаРаспределения.Найти(СтрокаТаблицы.Исполнитель, "Исполнитель");
	
	Если НайденнаяСтрока = Неопределено Тогда
		
		СтрокаТаблицы.ВыделеноСводно = 0;
		СтрокаТаблицы.ВыделеноПоДням = 0;
		
	Иначе
		
		ПараметрыОтбора = Новый Структура("Исполнитель", СтрокаТаблицы.Исполнитель);
		РезультатРаспределенияПоДнямИсполнителя = РезультатРаспределенияПоДням.Выгрузить(ПараметрыОтбора);
		ВыделеноПоРезультатуРаспределенияДня = РезультатРаспределенияПоДнямИсполнителя.Итог("Выделено");
		
		СтрокаТаблицы.ВыделеноСводно = ВыделеноПоРезультатуРаспределенияДня;
		СтрокаТаблицы.ВыделеноПоДням = ВыделеноПоРезультатуРаспределенияДня;
		
	КонецЕсли;
	
	ОстатокРаспределения = СтрокаТаблицы.ВыделеноПоДням;  // по дням устраняем отклонение остатка.
	ПараметрыОтбора = Новый Структура("Исполнитель", СтрокаТаблицы.Исполнитель);
	НайденныеСтроки = РезультатРаспределенияСводный.НайтиСтроки(ПараметрыОтбора);
	СтрокаСМаксимальнымВременем = Неопределено;
	
	Для каждого РаспределениеСтрока Из НайденныеСтроки Цикл
		
		РаспределениеСтрока.Выделено = Окр(РаспределениеСтрока.Выделено, ТочностьРаспределения);
		ОстатокРаспределения = ОстатокРаспределения - РаспределениеСтрока.Выделено;
		
		Если СтрокаСМаксимальнымВременем = Неопределено
			Или РаспределениеСтрока.Выделено > СтрокаСМаксимальнымВременем.Выделено Тогда
			
			СтрокаСМаксимальнымВременем = РаспределениеСтрока;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаСМаксимальнымВременем <> Неопределено Тогда
		
		СтрокаСМаксимальнымВременем.Выделено = СтрокаСМаксимальнымВременем.Выделено + ОстатокРаспределения;
		
	КонецЕсли;
	
КонецПроцедуры 

// СохранитьИзменения

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	СохранитьИзмененияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзмененияНаСервере()
	
	СохранитьРезультатРаспределения(РезультатРаспределенияСводный, "ПланРабочегоВремениСводный");
	СохранитьРезультатРаспределения(РезультатРаспределенияПоДням, "ПланРабочегоВремениПоДням");
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатРаспределения(РезультатРаспределения, ИмяРегистра)
	
	Для каждого СтрокаТаблицы Из ТаблицаИсполнителей Цикл
		
		ПараметрыОтбора = Новый Структура("Исполнитель", СтрокаТаблицы.Исполнитель);
		ТаблицаРаспределения = РезультатРаспределения.Выгрузить(ПараметрыОтбора);
		ТаблицаРаспределения.Колонки.Добавить("Месяц");
		ТаблицаРаспределения.ЗаполнитьЗначения(МесяцПланирования, "Месяц");
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Месяц.Установить(МесяцПланирования);
		НаборЗаписей.Отбор.Исполнитель.Установить(СтрокаТаблицы.Исполнитель);
		
		НаборЗаписей.Загрузить(ТаблицаРаспределения);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ТекущийИсполнитель()

	ТекущиеДанные = Элементы.ТаблицаИсполнителей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	Иначе
		Исполнитель = ТекущиеДанные.Исполнитель;
	КонецЕсли;

	Возврат Исполнитель;
	
КонецФункции // ТекущийИсполнитель()

&НаКлиенте
Процедура ПослеПроверкиМодифицированностиЗакрытьФорму(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборСтрокПоИсполнителю(Контекст, Исполнитель)
	
	ОтборСтрок = Новый ФиксированнаяСтруктура("Исполнитель", Исполнитель);
	Контекст.Элементы.РезультатРаспределенияСводный.ОтборСтрок = ОтборСтрок;
	
	ОтборПараметры = Новый Структура("Исполнитель", Исполнитель); 
	НайденныеСтрокиПоИсполнителю = Контекст.РезультатРаспределенияСводный.НайтиСтроки(ОтборПараметры);
	
	// Суммы колонок в РезультатРаспределенияСводный.
	Контекст.ВыделеноПоРезультатуРаспределенияСводный = 0;
	Контекст.ПроцентВремениПоРезультатуРаспределенияСводный = 0;
	
	Для каждого ТекСтрока Из НайденныеСтрокиПоИсполнителю Цикл
	
		 Контекст.ВыделеноПоРезультатуРаспределенияСводный = Контекст.ВыделеноПоРезультатуРаспределенияСводный + ТекСтрока.Выделено;
		 Контекст.ПроцентВремениПоРезультатуРаспределенияСводный = Контекст.ПроцентВремениПоРезультатуРаспределенияСводный + ТекСтрока.ПроцентВремени;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьМодифицированность(ФункцияОповещения, ДополнительныеПараметры = Неопределено)
	
	Если Не Модифицированность Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Изменения не сохранены. Продолжить?'");
	ОписаниеОповещения = Новый ОписаниеОповещения(ФункцияОповещения, ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьФактическийПроцентРаспределения()
	
	ВыделеноПоРезультатуРаспределения = 0;
	ПроцентВремениПоРезультатуРаспределения = 0;
	
	Для каждого ИсполнительСтрока Из ТаблицаИсполнителей Цикл
		
		ПараметрыОтбора = Новый Структура("Исполнитель", ИсполнительСтрока.Исполнитель);
		НайденныеСтроки = РезультатРаспределенияСводный.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОсталосьРаспределить = 100;
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			СтрокаТаблицы.ПроцентВремени = СтрокаТаблицы.Выделено / ИсполнительСтрока.ВыделеноСводно * 100;
			ОсталосьРаспределить = ОсталосьРаспределить - СтрокаТаблицы.ПроцентВремени;
			
			ВыделеноПоРезультатуРаспределения = ВыделеноПоРезультатуРаспределения + СтрокаТаблицы.Выделено;

		КонецЦикла;
		
		СтрокаТаблицы.ПроцентВремени = СтрокаТаблицы.ПроцентВремени + ОсталосьРаспределить; // чтобы в сумме было 100%
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРезультатРаспределенияПоПроектам()
	
	ТаблицаРаспределенияПоПроектам = РезультатРаспределенияСводный.Выгрузить(, "Проект, ТипЗадачи, Выделено");
	ТаблицаРаспределенияПоПроектам.Свернуть("Проект, ТипЗадачи", "Выделено");
	ТаблицаРаспределенияПоПроектам.Сортировать("Проект, ТипЗадачи");
	РезультатРаспределенияПоПроектам.Загрузить(ТаблицаРаспределенияПоПроектам);
	
КонецПроцедуры

#КонецОбласти